# Docker Compose file for HACS local development

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: ankane/pgvector:v0.5.1
    container_name: hacs-postgres
    environment:
      POSTGRES_DB: hacs
      POSTGRES_USER: hacs
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hacs_dev}
      # Enable pgvector extension
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - hacs_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hacs -d hacs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - hacs-network

  # Qdrant Vector Store (optional - for advanced vector operations)
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: hacs-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - hacs_qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - hacs-network
    profiles:
      - "with-qdrant"  # Optional service

  # HACS MCP Server
  hacs-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hacs-mcp-server
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://hacs:${POSTGRES_PASSWORD:-hacs_dev}@postgres:5432/hacs}
      
      # API Keys for LLM providers
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Vector Store Configuration (optional)
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      
      # HACS Configuration
      - HACS_API_KEY=${HACS_API_KEY:-dev_key_123}
      - HACS_ENVIRONMENT=${HACS_ENVIRONMENT:-development}
      
      # Performance and Security
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-10}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-X", "POST", "http://localhost:8000/", "-H", "Content-Type: application/json", "-d", '{"jsonrpc":"2.0","method":"tools/list","id":1}']
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - hacs-network

  # Database Migration Service
  hacs-migration:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hacs-migration
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://hacs:${POSTGRES_PASSWORD:-hacs_dev}@postgres:5432/hacs}
      - PYTHONPATH=/app/packages/hacs-core/src:/app/packages/hacs-persistence/src:/app/packages/hacs-utils/src
    command: ["python", "-c", "from hacs_persistence.migrations import run_migrations; run_migrations()"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hacs-network
    profiles:
      - "migration"  # Run separately when needed

  # HACS Tools Test Runner Service
  hacs-test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hacs-test-runner
    environment:
      - MCP_SERVER_URL=http://hacs-mcp-server:8000
      - DATABASE_URL=${DATABASE_URL:-postgresql://hacs:${POSTGRES_PASSWORD:-hacs_dev}@postgres:5432/hacs}
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - PYTHONPATH=/app/packages/hacs-core/src:/app/packages/hacs-tools/src:/app/packages/hacs-utils/src:/app/packages/hacs-persistence/src:/app/packages/hacs-registry/src
    command: ["python", "-m", "pytest", "tests/test_hacs_tools_comprehensive.py", "--mcp-integration", "-v", "--tb=short"]
    depends_on:
      hacs-mcp-server:
        condition: service_healthy
    volumes:
      - ./test_results:/app/test_results
    networks:
      - hacs-network
    profiles:
      - "test"  # Run separately when needed: docker-compose --profile test up

  # Note: LangGraph agents are now run locally with UV
  # See examples/*/README.md for instructions on running agents locally

volumes:
  hacs_postgres_data:
    name: hacs_postgres_data
  hacs_qdrant_data:
    name: hacs_qdrant_data

networks:
  hacs-network:
    driver: bridge