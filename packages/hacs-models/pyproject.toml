[project]
name = "hacs-models"
version = "0.3.1"
description = "HACS Healthcare Data Models - Pure Pydantic models for FHIR-compliant healthcare data"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Solano Todeschini", email = "solanovisitor@gmail.com"}
]
maintainers = [
    {name = "Solano Todeschini", email = "solanovisitor@gmail.com"}
]
keywords = ["healthcare", "fhir", "models", "pydantic", "ai", "agents"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.11.7",
    "typing-extensions>=4.12.2",
]

[project.urls]
Homepage = "https://github.com/solanovisitor/hacs-ai"
Documentation = "https://github.com/solanovisitor/hacs-ai/blob/main/docs/"
Repository = "https://github.com/solanovisitor/hacs-ai"
Issues = "https://github.com/solanovisitor/hacs-ai/issues"
Changelog = "https://github.com/solanovisitor/hacs-ai/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.0.0",
    "mypy>=1.13.0",
    "ruff>=0.8.4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/hacs_models"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

# Code Quality Tools Configuration
[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PL",  # pylint
    "RUF", # ruff-specific
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "S101",   # assert used (OK in tests)
    "PLR0913", # too many arguments (common in data models)
    "PLR2004", # magic values (OK for defaults)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "T20"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=hacs_models",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=95",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "fhir: FHIR compliance tests",
    "models: Model validation tests",
]