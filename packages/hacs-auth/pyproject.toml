[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hacs-auth"
version = "0.3.1"
description = "Authentication and authorization components for HACS (Healthcare Agent Communication Standard)"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Solano Todeschini", email = "solanovisitor@gmail.com" }
]
maintainers = [
    { name = "Solano Todeschini", email = "solanovisitor@gmail.com" }
]
keywords = [
    "healthcare",
    "authentication", 
    "authorization",
    "jwt",
    "oauth2",
    "fhir",
    "ai-agents",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.11.7",
    "pyjwt>=2.10.1",
    "hacs-models>=0.3.1",
]

[project.optional-dependencies]
oauth2 = [
    "authlib>=1.3.0",
    "httpx>=0.28.0",
]
dev = [
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.0",
    "mypy>=1.14.0",
    "ruff>=0.8.18",
    "pre-commit>=4.0.1",
    "hacs-auth[oauth2]",
]
test = [
    "pytest>=8.3.3", 
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/solanovisitor/hacs-ai"
Documentation = "https://github.com/solanovisitor/hacs-ai/blob/main/docs/"
Repository = "https://github.com/solanovisitor/hacs-ai"
Issues = "https://github.com/solanovisitor/hacs-ai/issues"
Changelog = "https://github.com/solanovisitor/hacs-ai/blob/main/CHANGELOG.md"
[tool.hatch.build.targets.wheel]
packages = ["src/hacs_auth"]

# Ruff Configuration - Zero tolerance linting
[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]
extend-exclude = [
    "*.pyi",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache", 
    ".ruff_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable comprehensive linting ruleset
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "CPY",    # flake8-copyright
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "LOG",    # flake8-logging
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # numpy
    "AIR",    # airflow
    "PERF",   # perflint
    "FURB",   # refurb
    "RUF",    # ruff-specific
]

ignore = [
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package  
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicit string concatenation (conflicts with formatter)
    "CPY001",  # Missing copyright notice
]

# Allow fix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D",       # Ignore docstring requirements in tests
    "S101",    # Allow assert in tests
    "PLR2004", # Allow magic values in tests
    "ANN",     # No need for type annotations in tests
]
"src/hacs_auth/__init__.py" = [
    "F401",    # Allow unused imports in __init__.py
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["hacs_auth", "hacs_models"]
force-single-line = false
lines-after-imports = 2

# MyPy Configuration - Strict typing
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=hacs_auth",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=95",
    "--tb=short",
]
testpaths = ["tests"]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage Configuration  
[tool.coverage.run]
source = ["src/hacs_auth"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
    "pass",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"