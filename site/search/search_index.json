{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HACS \u2014 Context\u2011engineering framework for healthcare agents","text":"<p>Context\u2011engineering framework for building healthcare AI with structured memory, clinical reasoning, and FHIR compliance.</p>","boost":2},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Quick Start - Install HACS and build healthcare AI in 5 minutes</li> <li>API Reference - Complete API documentation  </li> <li>HACS Tools - 20+ healthcare tools reference</li> <li>Testing Guide - Testing and validation</li> </ul>","boost":2},{"location":"#tutorials","title":"Tutorials","text":"<ul> <li>Complete Context Engineering - Full workflow with all 4 strategies</li> <li>Medication Extraction - Extract clinical data from text</li> </ul>","boost":2},{"location":"#key-features","title":"Key Features","text":"<ul> <li>20+ Tools - Specialized for clinical workflows via MCP protocol</li> <li>FHIR Models - Type-safe Pydantic models for healthcare data</li> <li>Context Engineering - Four strategies: Isolate, Select, Compress, Write  </li> <li>Actor Security - Role-based permissions with audit trails</li> <li>AI Framework Ready - Works with LangGraph, LangChain, and any MCP client</li> </ul>","boost":2},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph LR\n  A[Healthcare AI] --&gt; B[HACS Tools]\n  B --&gt; C[(PostgreSQL)]\n  B --&gt; D[Vector Store]\n  B --&gt; E[FHIR Models]\n</code></pre>","boost":2},{"location":"#install-uv-cli","title":"Install uv CLI","text":"<p>Install the <code>uv</code> package manager first. It provides fast, reproducible environments and workspace management.</p> <p>More installation options</p> <p>See the official uv installation guide for standalone installers, Homebrew, pipx, and more: uv \u2014 Installing uv.</p> <pre><code># macOS/Linux standalone installer\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Verify\nuv --version\n</code></pre>","boost":2},{"location":"#install-hacs-beta","title":"Install HACS (beta)","text":"<p>HACS is in active beta. The preferred install is from source to ensure the latest fixes and docs.</p> <p>Requirements</p> <ul> <li>Python &gt;= 3.11</li> <li><code>uv</code> (recommended)</li> <li>Optional: PostgreSQL + <code>pgvector</code> for persistence (see How\u2011to)</li> </ul> uv (recommended)pip <pre><code># Create virtual environment (requires uv installed)\nuv venv -p 3.11\nsource .venv/bin/activate\n\n# Clone and install workspace from source (editable)\ngit clone https://github.com/solanovisitor/hacs-ai.git\ncd hacs-ai\nuv pip install -U pip\nuv sync\n\n# Configure environment\ncp .env.example .env    # fill OPENAI_API_KEY, DATABASE_URL\n</code></pre> <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -U pip\npip install -U hacs-core hacs-auth hacs-models hacs-tools hacs-utils hacs-persistence hacs-registry\n</code></pre> <p>Missing Local Package?</p> <p>If you are not using <code>uv</code> and run into a ModuleNotFoundError for local packages, ensure you installed the workspace or editable packages and re\u2011activated your environment. Using <code>uv sync</code> is recommended.</p>","boost":2},{"location":"#next-steps","title":"Next steps","text":"<ul> <li>Follow the Quick Start to validate your setup</li> <li>Connect to a database: Connect to database</li> <li>Generate structured data with LLMs: Generate structured data</li> <li>Extract with citations: Extract citations</li> <li>Persist resources: Persist Resources</li> </ul>","boost":2},{"location":"#quick-links_1","title":"Quick Links","text":"<ul> <li>Quick Start - Install HACS and build healthcare AI in minutes</li> <li>API Reference - Complete API documentation</li> <li>HACS Tools - Tooling overview and references</li> <li>Testing Guide - Testing and validation</li> </ul>","boost":2},{"location":"api-reference/","title":"HACS API Reference","text":"<p>Lightweight, developer-first reference to core packages and integrations. See How-to\u2019s for step-by-step tasks.</p> <p>\ud83d\udcda Related Documentation:</p> <ul> <li>Quick Start Guide</li> <li>How-to\u2019s</li> <li>HACS Tools Reference</li> <li>Complete Context Engineering</li> <li>Medication Extraction</li> </ul>"},{"location":"api-reference/#core-hacs-packages","title":"\ud83e\uddec Core HACS Packages","text":""},{"location":"api-reference/#hacs-models-healthcare-data-models","title":"<code>hacs-models</code> - Healthcare Data Models","text":""},{"location":"api-reference/#visualize-resources-and-their-definitions","title":"Visualize resources and their definitions","text":"<pre><code>from hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\nfrom hacs_utils.visualization import resource_to_markdown, get_specs_markdown, get_specs\n\npat = Patient(full_name=\"Maria Rodriguez\", birth_date=\"1985-03-15\", gender=\"female\")\nobs = Observation(status=ObservationStatus.FINAL,\n                  code=CodeableConcept(text=\"Blood Pressure\"),\n                  value_quantity=Quantity(value=128, unit=\"mmHg\"),\n                  subject=f\"Patient/{pat.id}\")\n\n# Render concise Markdown summaries for any resource\nprint(to_markdown(pat, include_json=False))\nprint(to_markdown(obs, include_json=False))\n\n# Render model definition docs (scope, boundaries, relationships)\nprint(get_specs_markdown(Patient))\nprint(get_specs_markdown(Observation))\n</code></pre> <pre><code>### Patient\n\n| Field | Value |\n|---|---|\n| resource_type | Patient |\n| id | patient-... |\n| status | active |\n| created_at | 2025-... |\n| updated_at | 2025-... |\n\n### Observation\n\n| Field | Value |\n|---|---|\n| resource_type | Observation |\n| id | observation-... |\n| status | final |\n| code.text | Blood Pressure |\n| subject | Patient/patient-... |\n| created_at | 2025-... |\n| updated_at | 2025-... |\n\n### Patient Definition\n\n**Scope &amp; Usage**\n\nDemographics and administrative information for a person or animal receiving care\u2026\n\n**Boundaries**\n\nPatient resources do not contain clinical findings\u2026\n\n**Relationships**\n- Referenced by: Observation.subject, Encounter.subject, \u2026\n\n**References**\n- Document.subject\n- Encounter.subject\n\n### Observation Definition\n\n**Scope &amp; Usage**\n\nMeasurements and simple assertions\u2026\n\n**Boundaries**\n\nDo not use for diagnoses/problems\u2026\n</code></pre> <p>FHIR-aligned healthcare models</p> <pre><code>from hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\nfrom hacs_utils.visualization import resource_to_markdown\n\npatient = Patient(full_name=\"John Smith\", birth_date=\"1980-01-15\", gender=\"male\")\nobs = Observation(status=ObservationStatus.FINAL,\n                  code=CodeableConcept(text=\"Blood Pressure\"),\n                  value_quantity=Quantity(value=120, unit=\"mmHg\"),\n                  subject=f\"Patient/{patient.id}\")\n\n# Always visualize created records\nprint(\"Patient record:\")\nprint(resource_to_markdown(patient, include_json=False))\nprint(\"\\nObservation record:\")\nprint(resource_to_markdown(obs, include_json=False))\n</code></pre> <p>Markdown visualization (for static docs):</p> <pre><code># Markdown visualization for any resource\nfrom hacs_utils.visualization import resource_to_markdown, annotations_to_markdown\nfrom hacs_models import AnnotatedDocument, Extraction, CharInterval\n\nprint(resource_to_markdown(patient, include_json=False))\nprint(resource_to_markdown(obs, include_json=False))\n\ndoc = AnnotatedDocument(text=\"BP 128/82, HR 72\",\n                        extractions=[Extraction(extraction_class=\"blood_pressure\",\n                                                extraction_text=\"128/82\",\n                                                char_interval=CharInterval(start_pos=3, end_pos=9))])\nprint(annotations_to_markdown(doc))\n</code></pre> <pre><code>### Patient\n\n| Field | Value |\n|---|---|\n| resource_type | Patient |\n| id | patient-... |\n| status | active |\n| created_at | 2025-... |\n| updated_at | 2025-... |\n\n### Observation\n\n| Field | Value |\n|---|---|\n| resource_type | Observation |\n| id | observation-... |\n| status | final |\n| code.text | Blood Pressure |\n| subject | Patient/patient-... |\n| created_at | 2025-... |\n| updated_at | 2025-... |\n\n### DiagnosticReport\n\n| Field | Value |\n|---|---|\n| resource_type | DiagnosticReport |\n| id | diagnosticreport-... |\n| status | final |\n| code.text | Complete Blood Count |\n| subject | Patient/patient-... |\n| created_at | 2025-... |\n| updated_at | 2025-... |\n\n| Class | Span | Snippet |\n|---|---|---|\n| Blood Pressure | [3-9] | \u2026 BP **128/82** , HR 72 \u2026 |\n</code></pre> <p>Key Classes: - <code>Patient</code> - Patient demographics and clinical context - <code>Observation</code> - Clinical measurements and findings - <code>Encounter</code> - Healthcare visits and episodes - <code>Actor</code> - Healthcare providers with permissions - <code>MemoryBlock</code> - AI agent memory structures - <code>Evidence</code> - Clinical guidelines and decision support</p>"},{"location":"api-reference/#hacs-tools-healthcare-tools-4-domains","title":"<code>hacs-tools</code> - Healthcare Tools (4 domains)","text":"<p>Low-level, LLM-friendly tools organized into 4 domains: modeling, extraction, database, agents.</p> <pre><code>from dotenv import load_dotenv\nload_dotenv(dotenv_path=\".env\", override=True)\n\nfrom hacs_utils.integrations.common.tool_loader import get_all_hacs_tools_sync, set_injected_params\nset_injected_params({\"actor_name\": \"llm-agent-docs\"})\n\ntools = get_all_hacs_tools_sync(framework='langchain')\nprint('tool_count:', len(tools))\nprint('sample:', [t.name for t in tools[:8]])\n</code></pre> <p>Tool Categories (low-level only): - Resource Management - CRUD, modeling, bundles - Memory Operations - Clinical memory and context management - Schema Discovery - Resource type exploration and analysis - Workflow Modeling - ActivityDefinition, PlanDefinition, Task adapters</p>"},{"location":"api-reference/#hacs-auth-healthcare-security","title":"<code>hacs-auth</code> - Healthcare Security","text":"<p>Actor-based security with role-based permissions</p> <pre><code>from hacs_auth import Actor, ActorRole, require_permission\n\n# Healthcare provider with permissions\nphysician = Actor(\n    name=\"Dr. Sarah Chen\",\n    role=ActorRole.PHYSICIAN,\n    organization=\"Mount Sinai\",\n    permissions=[\"patient:read\", \"patient:write\", \"observation:write\"]\n)\n\nprint(f\"\ud83d\udc69\u200d\u2695\ufe0f Healthcare Provider Created:\")\nprint(f\"   Actor ID: {physician.id}\")\nprint(f\"   Name: {physician.name}\")\nprint(f\"   Role: {physician.role}\")\nprint(f\"   Organization: {physician.organization}\")\nprint(f\"   Permissions: {physician.permissions}\")\nprint(f\"   Active Session: {physician.has_active_session()}\")\n\n# Test permission checks\nprint(f\"\\n\ud83d\udd10 Permission Checks:\")\nprint(f\"   Can read patients: {physician.has_permission('patient:read')}\")\nprint(f\"   Can write medications: {physician.has_permission('medication:write')}\")\nprint(f\"   Can write observations: {physician.has_permission('observation:write')}\")\n\n# Permission-protected functions\n@require_permission(\"patient:read\")\ndef get_patient_data(patient_id: str, **kwargs):\n    token_data = kwargs.get(\"token_data\", {})\n    actor_name = token_data.get(\"actor_name\", \"Unknown\")\n    return f\"Patient data for {patient_id} accessed by {actor_name}\"\n\nprint(f\"\\n\ud83d\udee1\ufe0f Protected Function Created:\")\nprint(f\"   Function: get_patient_data\")\nprint(f\"   Required Permission: patient:read\")\n\n# Simulate function call with proper permissions\ntry:\n    # In real usage, this would be handled by the authentication middleware\n    mock_token_data = {\"actor_name\": physician.name, \"permissions\": physician.permissions}\n    result = get_patient_data(\"patient-123\", token_data=mock_token_data)\n    print(f\"   \u2705 Access granted: {result}\")\nexcept Exception as e:\n    print(f\"   \u274c Access denied: {e}\")\n</code></pre> <p>Expected Output: <pre><code>\ud83d\udc69\u200d\u2695\ufe0f Healthcare Provider Created:\n   Actor ID: actor-dr-sarah-chen-physician-uuid\n   Name: Dr. Sarah Chen\n   Role: ActorRole.PHYSICIAN\n   Organization: Mount Sinai\n   Permissions: ['patient:read', 'patient:write', 'observation:write']\n   Active Session: False\n\n\ud83d\udd10 Permission Checks:\n   Can read patients: True\n   Can write medications: False\n   Can write observations: True\n\n\ud83d\udee1\ufe0f Protected Function Created:\n   Function: get_patient_data\n   Required Permission: patient:read\n\n   \u2705 Access granted: Patient data for patient-123 accessed by Dr. Sarah Chen\n</code></pre></p>"},{"location":"api-reference/#hacs-persistence-data-storage","title":"<code>hacs-persistence</code> - Data Storage","text":"<p>PostgreSQL + pgvector for healthcare data</p> <pre><code>from hacs_persistence import HACSConnectionFactory\nimport time\n\n# Database connection with migrations\nfactory = HACSConnectionFactory()\nprint(\"\ud83d\udd27 Creating database adapter...\")\nadapter = factory.get_adapter(auto_migrate=True)\n\nprint(f\"\ud83d\udcca Database Adapter Created:\")\nprint(f\"   Factory: {type(factory).__name__}\")\nprint(f\"   Adapter: {type(adapter).__name__}\")\nprint(f\"   Auto-migrate: True\")\n\n# Store healthcare resources (using patient from previous example)\nprint(f\"\\n\ud83d\udcbe Storing Healthcare Resource:\")\nstart_time = time.time()\nsaved_patient = adapter.save_record(patient)\nsave_time = (time.time() - start_time) * 1000\n\nprint(f\"   Resource Type: Patient\")\nprint(f\"   Patient ID: {saved_patient.get('id', 'N/A')}\")\nprint(f\"   Save Time: {save_time:.1f}ms\")\nprint(f\"   Status: \u2705 Saved successfully\")\n\n# Vector operations for clinical embeddings\nprint(f\"\\n\ud83d\udd0d Vector Operations:\")\nclinical_embedding = [0.1, 0.2, 0.3, -0.1, 0.5, 0.8, -0.3, 0.4]  # 8-dimensional example\nstart_time = time.time()\n\nadapter.store_vector(\n    resource_id=\"patient_123\",\n    embedding=clinical_embedding,\n    metadata={\"type\": \"patient_summary\", \"dimension\": len(clinical_embedding)}\n)\n\nvector_time = (time.time() - start_time) * 1000\n\nprint(f\"   Resource ID: patient_123\")\nprint(f\"   Embedding Dimension: {len(clinical_embedding)}\")\nprint(f\"   Metadata: {{'type': 'patient_summary', 'dimension': {len(clinical_embedding)}}}\")\nprint(f\"   Store Time: {vector_time:.1f}ms\")\nprint(f\"   Status: \u2705 Vector stored successfully\")\n\n# Test vector similarity search\nprint(f\"\\n\ud83d\udd0e Vector Similarity Search:\")\nquery_embedding = [0.15, 0.18, 0.25, -0.08, 0.52, 0.75, -0.28, 0.35]\nstart_time = time.time()\n\nsimilar_records = adapter.vector_search(\n    query_embedding=query_embedding,\n    resource_type=\"patient\", \n    top_k=3\n)\n\nsearch_time = (time.time() - start_time) * 1000\n\nprint(f\"   Query Dimension: {len(query_embedding)}\")\nprint(f\"   Resource Type: patient\")\nprint(f\"   Top K: 3\")\nprint(f\"   Search Time: {search_time:.1f}ms\")\nprint(f\"   Results Found: {len(similar_records)}\")\n\nif similar_records:\n    for i, record in enumerate(similar_records[:2], 1):\n        similarity = record.get('similarity_score', 'N/A')\n        print(f\"   {i}. ID: {record.get('resource_id', 'N/A')} (similarity: {similarity})\")\n</code></pre> <p>Expected Output: <pre><code>\ud83d\udd27 Creating database adapter...\n\ud83d\udcca Database Adapter Created:\n   Factory: HACSConnectionFactory\n   Adapter: PostgreSQLAdapter\n   Auto-migrate: True\n\n\ud83d\udcbe Storing Healthcare Resource:\n   Resource Type: Patient\n   Patient ID: patient-john-smith-1980-01-15-uuid\n   Save Time: 23.4ms\n   Status: \u2705 Saved successfully\n\n\ud83d\udd0d Vector Operations:\n   Resource ID: patient_123\n   Embedding Dimension: 8\n   Metadata: {'type': 'patient_summary', 'dimension': 8}\n   Store Time: 15.2ms\n   Status: \u2705 Vector stored successfully\n\n\ud83d\udd0e Vector Similarity Search:\n   Query Dimension: 8\n   Resource Type: patient\n   Top K: 3\n   Search Time: 8.7ms\n   Results Found: 1\n   1. ID: patient_123 (similarity: 0.987)\n</code></pre></p>"},{"location":"api-reference/#hacs-utils-integration-utilities","title":"<code>hacs-utils</code> - Integration Utilities","text":"<p>MCP server and framework integrations</p> <pre><code># Visualization helpers available in all environments\nfrom hacs_utils.visualization import visualize_resource, visualize_annotations\nhtml_card = visualize_resource(patient)        # HTML widget (notebook) or str\nhtml_ann = visualize_annotations(doc)          # HTML widget (notebook) or str\n</code></pre>"},{"location":"api-reference/#mcp-server-api","title":"\ud83d\udee0\ufe0f MCP Server API","text":"<p>The HACS MCP server provides all tools via JSON-RPC at <code>HACS_MCP_SERVER_URL</code>.</p>"},{"location":"api-reference/#base-request-format","title":"Base Request Format","text":"<pre><code>import requests\nimport os\n\ndef call_mcp_tool(method, params=None):\n    server_url = os.getenv('HACS_MCP_SERVER_URL', 'http://127.0.0.1:8000')\n    response = requests.post(server_url, json={\n        \"jsonrpc\": \"2.0\",\n        \"method\": method,\n        \"params\": params or {},\n        \"id\": 1\n    })\n    return response.json()\n</code></pre>"},{"location":"api-reference/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api-reference/#toolslist-list-available-tools-with-domains-and-tags","title":"<code>tools/list</code> - List Available Tools (with domains and tags)","text":"<pre><code>tools = call_mcp_tool(\"tools/list\")\nprint(f\"Available tools: {len(tools['result']['tools'])}\")\n# Example tool metadata: {\"name\": \"save_record\", \"domain\": \"database\", \"tags\": [\"save\", \"record\", \"domain:database\", \"records\"]}\n</code></pre>"},{"location":"api-reference/#toolscall-execute-tool","title":"<code>tools/call</code> - Execute Tool","text":"<pre><code>result = call_mcp_tool(\"tools/call\", {\n    \"name\": \"save_record\",\n    \"arguments\": {\n        \"resource_type\": \"Patient\",\n        \"resource_data\": {\n            \"full_name\": \"John Smith\",\n            \"birth_date\": \"1980-01-15\"\n        }\n    }\n})\n</code></pre>"},{"location":"api-reference/#complete-tool-reference","title":"\ud83d\udccb Complete Tool Reference","text":""},{"location":"api-reference/#resource-management-tools","title":"Resource Management Tools","text":"<p>Use the database domain for records CRUD:</p> <pre><code>result = use_hacs_tool(\"save_record\", {\n    \"resource_type\": \"Patient\",\n    \"resource_data\": {\n        \"full_name\": \"John Smith\",\n        \"birth_date\": \"1980-01-15\",\n        \"gender\": \"male\"\n    }\n})\n\npatient = use_hacs_tool(\"read_record\", {\"resource_type\": \"Patient\", \"resource_id\": \"patient-123\"})\n\nresult = use_hacs_tool(\"update_record\", {\"resource_type\": \"Patient\", \"resource_id\": \"patient-123\", \"patch\": {\"agent_context\": {\"primary_care_provider\": \"Dr. Johnson\"}}})\n\nresult = use_hacs_tool(\"delete_record\", {\"resource_type\": \"Patient\", \"resource_id\": \"patient-123\"})\n</code></pre>"},{"location":"api-reference/#memory-operations-tools","title":"Memory Operations Tools","text":""},{"location":"api-reference/#create_hacs_memory","title":"<code>create_hacs_memory</code>","text":"<p>Store clinical memories for AI agents.</p> <pre><code>memory = use_hacs_tool(\"create_hacs_memory\", {\n    \"content\": \"Patient reports improvement after treatment\",  # Required\n    \"memory_type\": \"episodic\",                               # Required: episodic, semantic, working\n    \"importance_score\": 0.8,                                 # Optional: 0.0-1.0\n    \"tags\": [\"treatment\", \"improvement\"],                    # Optional: List of tags\n    \"context_metadata\": {                                    # Optional: Additional context\n        \"patient_id\": \"patient-123\",\n        \"encounter_id\": \"encounter-456\"\n    }\n})\n</code></pre>"},{"location":"api-reference/#search_hacs_memories","title":"<code>search_hacs_memories</code>","text":"<p>Semantic search of clinical memories.</p> <pre><code>memories = use_hacs_tool(\"search_hacs_memories\", {\n    \"query\": \"medication response\",      # Required: Search query\n    \"memory_type\": \"episodic\",           # Optional: Memory type filter\n    \"limit\": 5,                          # Optional: Result limit\n    \"similarity_threshold\": 0.7          # Optional: Minimum similarity\n})\n</code></pre>"},{"location":"api-reference/#check_memory","title":"<code>check_memory</code>","text":"<p>Gather and filter memories for agent context construction.</p> <pre><code>ctx = use_hacs_tool(\"check_memory\", {\n    \"actor_id\": actor.id,\n    \"memory_types\": [\"episodic\", \"procedural\"],\n    \"min_importance\": 0.5,\n    \"limit\": 20\n})\n</code></pre>"},{"location":"api-reference/#workflow-modeling-tools","title":"Workflow Modeling Tools","text":""},{"location":"api-reference/#template-registration-and-instantiation","title":"Template registration and instantiation","text":"<p>Register templates and instantiate stacks.</p> <pre><code>result = use_hacs_tool(\"register_stack_template\", {\"template\": {\"name\": \"Example\", \"version\": \"1.0.0\", \"layers\": [], \"variables\": {}}})\n</code></pre>"},{"location":"api-reference/#create_activity_definition-create_plan_definition-create_task_from_activity-complete_task-fail_task","title":"<code>create_activity_definition</code>, <code>create_plan_definition</code>, <code>create_task_from_activity</code>, <code>complete_task</code>, <code>fail_task</code>","text":"<p>Low-level adapters for workflow resources; keep business logic in workflows.</p>"},{"location":"api-reference/#modeling-and-schema-tools","title":"Modeling and Schema Tools","text":""},{"location":"api-reference/#describe_models","title":"<code>describe_models</code>","text":"<p>Explore available healthcare model types and get summaries.</p> <pre><code>resources = use_hacs_tool(\"describe_models\", {\n    \"resource_types\": [\"Patient\", \"Observation\"],\n    \"include_examples\": True\n})\n</code></pre>"},{"location":"api-reference/#list_model_fields","title":"<code>list_model_fields</code>","text":"<p>List fields for a healthcare model.</p> <pre><code>schema = use_hacs_tool(\"list_model_fields\", {\n    \"resource_type\": \"Patient\"\n})\n</code></pre>"},{"location":"api-reference/#framework-integrations","title":"\ud83d\udd17 Framework Integrations","text":""},{"location":"api-reference/#langchain-integration","title":"LangChain Integration","text":"<p>LangChain packaging is provided via <code>hacs-utils</code> integrations. Install extras when needed:</p> <pre><code>uv pip install -U hacs-utils[langchain]\n</code></pre> <pre><code>tool_count: 47\nsample: ['pin_resource', 'compose_bundle', 'validate_resource', 'diff_resources', 'validate_bundle', 'list_models', 'describe_model', 'describe_models']\n</code></pre>"},{"location":"api-reference/#langgraph-integration","title":"LangGraph Integration","text":"<pre><code>from langgraph.graph import StateGraph, END\nfrom hacs_utils.integrations.langchain.tools import langchain_tools\n\n# Get HACS tools for LangGraph\ntools = langchain_tools()\n\n# Create healthcare workflow\nworkflow = StateGraph(state_schema)\nworkflow.add_node(\"agent\", agent_with_tools)\nworkflow.add_edge(\"agent\", END)\n\nhealthcare_agent = workflow.compile()\n</code></pre>"},{"location":"api-reference/#knowledge-management-evidence","title":"Knowledge Management (Evidence)","text":"<pre><code>evidence = use_hacs_tool(\"search_evidence\", {\"query\": \"beta-blockers in heart failure\", \"top_k\": 5})\n</code></pre>"},{"location":"api-reference/#crewai-integration","title":"CrewAI Integration","text":"<pre><code>from crewai import Agent, Task, Crew\nfrom hacs_utils.integrations.langchain.tools import langchain_tools\ntools = langchain_tools()\n</code></pre>"},{"location":"api-reference/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"<pre><code># Required - Database\nDATABASE_URL=postgresql://hacs:password@localhost:5432/hacs\n\n# Required - LLM Provider (choose one)\nANTHROPIC_API_KEY=sk-ant-...     # Recommended for healthcare\nOPENAI_API_KEY=sk-...            # Alternative\n\n# Optional - MCP Server\nHACS_MCP_SERVER_URL=http://127.0.0.1:8000\nHACS_ENVIRONMENT=development     # development, staging, production\nHACS_DEV_MODE=true              # Bypass some security in dev\n\n# Optional - Organization\nHACS_ORGANIZATION=your_health_system\nHEALTHCARE_SYSTEM_NAME=Your Health System\n\n# Optional - Security\nHACS_API_KEY=key1,key2         # Comma-separated API keys\nHACS_API_KEY_FILE=/path/to/keys.txt\n</code></pre>"},{"location":"api-reference/#docker-configuration","title":"Docker Configuration","text":"<pre><code># docker-compose.yml\nservices:\n  hacs-postgres:\n    image: pgvector/pgvector:pg16\n    environment:\n      POSTGRES_DB: hacs\n      POSTGRES_USER: hacs\n      POSTGRES_PASSWORD: hacs_dev\n\n  hacs-mcp-server:\n    build: .\n    ports:\n      - \"${HACS_MCP_PORT:-8000}:8000\"\n    environment:\n      - DATABASE_URL=postgresql://hacs:hacs_dev@postgres:5432/hacs\n      - HACS_ENVIRONMENT=development\n</code></pre>"},{"location":"api-reference/#security-reference","title":"\ud83d\udd10 Security Reference","text":""},{"location":"api-reference/#actor-based-permissions","title":"Actor-Based Permissions","text":"<pre><code>from hacs_auth import Actor, ActorRole\n\n# Healthcare roles with different permissions\nphysician = Actor(\n    role=ActorRole.PHYSICIAN,\n    permissions=[\n        \"patient:read\", \"patient:write\",\n        \"observation:read\", \"observation:write\", \n        \"memory:read\", \"memory:write\"\n    ]\n)\n\nnurse = Actor(\n    role=ActorRole.NURSE,\n    permissions=[\n        \"patient:read\",\n        \"observation:read\", \"vitals:write\"\n    ]\n)\n\nai_agent = Actor(\n    role=ActorRole.AGENT,\n    permissions=[\n        \"patient:read\",\n        \"memory:read\", \"analytics:population\"\n    ]\n)\n</code></pre>"},{"location":"api-reference/#session-management","title":"Session Management","text":"<pre><code># Start actor session\nphysician.start_session(\"session_123\")\n\n# Check session status\nif physician.has_active_session():\n    print(\"Session is active\")\n\n# Session timeout (default 8 hours)\nif physician.is_session_expired(timeout_minutes=480):\n    print(\"Session expired, need to re-authenticate\")\n</code></pre>"},{"location":"api-reference/#performance-guidelines","title":"\ud83d\udcca Performance Guidelines","text":""},{"location":"api-reference/#optimal-tool-usage","title":"Optimal Tool Usage","text":"<pre><code># \u2705 GOOD: Use selective data extraction\npatient_data = patient.model_dump(include={\n    \"full_name\", \"birth_date\", \"agent_context\"\n})\n\n# \u274c AVOID: Full serialization with unnecessary fields\npatient_data = patient.model_dump()  # Includes FHIR overhead\n\n# \u2705 GOOD: Use text summaries for LLM context\nsummary = patient.summary()  # \"Patient patient-123\"\n\n# \u2705 GOOD: Batch operations (use your own query adapter or DB filtering)\n</code></pre>"},{"location":"api-reference/#memory-management","title":"Memory Management","text":"<pre><code># \u2705 GOOD: Set importance scores for relevance filtering\nmemory = MemoryBlock(\n    content=\"Clinical finding\",\n    importance_score=0.9,  # High importance\n    memory_type=\"episodic\"\n)\n\n# \u2705 GOOD: Use tags for efficient retrieval\nmemory.tags = [\"cardiology\", \"urgent\", \"followup_needed\"]\n\n# \u2705 GOOD: Include relevant context metadata\nmemory.context_metadata = {\n    \"patient_id\": \"patient-123\",\n    \"clinical_domain\": \"cardiology\",\n    \"urgency_level\": \"high\"\n}\n</code></pre>"},{"location":"api-reference/#error-handling","title":"\ud83d\udea8 Error Handling","text":""},{"location":"api-reference/#common-error-patterns","title":"Common Error Patterns","text":"<pre><code>def safe_hacs_tool_call(tool_name, arguments):\n    \"\"\"Robust HACS tool calling with error handling\"\"\"\n    try:\n        result = use_hacs_tool(tool_name, arguments)\n\n        if \"error\" in result:\n            print(f\"Tool error: {result['error']}\")\n            return None\n\n        return result.get(\"result\")\n\n    except requests.exceptions.ConnectionError:\n        print(\"MCP server not available\")\n        return None\n\n    except requests.exceptions.Timeout:\n        print(\"Tool call timed out\")\n        return None\n\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return None\n</code></pre>"},{"location":"api-reference/#validation-patterns","title":"Validation Patterns","text":"<pre><code># Validate before creating resources\nvalidation = use_hacs_tool(\"validate_record_data\", {\n    \"resource_type\": \"Patient\",\n    \"data\": patient_data\n})\n\nif validation[\"result\"][\"is_valid\"]:\n    # Proceed with creation\n    result = use_hacs_tool(\"create_record\", {\n        \"resource_type\": \"Patient\",\n        \"resource_data\": patient_data\n    })\nelse:\n    print(f\"Validation errors: {validation['result']['errors']}\")\n</code></pre>"},{"location":"api-reference/#support-and-resources","title":"\ud83d\udcde Support and Resources","text":"<ul> <li>GitHub Repository - Source code and issues</li> <li>Documentation Hub - Complete documentation index</li> <li>Quick Start Guide - Get running in 5 minutes</li> <li>Healthcare Tools - Detailed tool documentation</li> <li>Integration guides: LangGraph (see package README), LangChain (see package README), MCP (see package README)</li> </ul> <p>This API reference is maintained as part of the HACS project. For the latest updates, see the GitHub repository.</p>"},{"location":"api-reference/#rendering-and-data-views","title":"Rendering and Data Views","text":"<ul> <li>Render any HACS resource as an interactive widget with a selector for Rendered / JSON / YAML / Schema:</li> </ul> <pre><code>from hacs_models import Patient\nfrom hacs_utils.visualization import resource_to_html_widget\n\np = Patient(full_name=\"Maria Rodriguez\", gender=\"female\")\nprint(resource_to_html_widget(p))\n</code></pre> <ul> <li>Convert resources across formats in code:</li> </ul> <pre><code>from hacs_utils.visualization import resource_to_json_str, resource_to_yaml_str, resource_to_schema_json_str\n\nprint(resource_to_json_str(p))      # JSON string\nprint(resource_to_yaml_str(p))      # YAML string (falls back to JSON if PyYAML missing)\nprint(resource_to_schema_json_str(Patient))  # JSON schema for the model\n</code></pre>"},{"location":"gallery/","title":"HACS Resource Gallery","text":"<p>Quick visual previews for common HACS resources. These render best in notebooks; otherwise the functions return raw HTML strings you can embed.</p>"},{"location":"gallery/#prereq","title":"Prereq","text":"<pre><code>uv pip install -U hacs-utils\n</code></pre>"},{"location":"gallery/#patient","title":"Patient","text":"<pre><code>from hacs_models import Patient\nfrom hacs_utils.visualization import resource_to_markdown\npatient = Patient(full_name=\"Jane Doe\", birth_date=\"1990-01-01\", gender=\"female\")\nprint(resource_to_markdown(patient, include_json=False))\n</code></pre>"},{"location":"gallery/#patient_1","title":"Patient","text":"Field Value resource_type Patient id patient-\u2026 status active created_at \u2026 updated_at \u2026"},{"location":"gallery/#observation","title":"Observation","text":"<pre><code>from hacs_models import Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\nfrom hacs_utils.visualization import resource_to_markdown\nobs = Observation(status=ObservationStatus.FINAL, code=CodeableConcept(text=\"Blood Pressure\"), value_quantity=Quantity(value=128.0, unit=\"mmHg\"), subject=\"Patient/p1\")\nprint(resource_to_markdown(obs, include_json=False))\n</code></pre>"},{"location":"gallery/#observation_1","title":"Observation","text":"Field Value resource_type Observation id observation-\u2026 status final subject Patient/p1 created_at \u2026 updated_at \u2026 code.text Blood Pressure"},{"location":"gallery/#diagnosticreport","title":"DiagnosticReport","text":"<pre><code>from hacs_models import DiagnosticReport, CodeableConcept\nfrom hacs_utils.visualization import resource_to_markdown\nreport = DiagnosticReport(status=\"final\", code=CodeableConcept(text=\"Chest X-Ray\"), subject=\"Patient/p1\")\nprint(resource_to_markdown(report, include_json=False))\n</code></pre>"},{"location":"gallery/#diagnosticreport_1","title":"DiagnosticReport","text":"Field Value resource_type DiagnosticReport id diagnosticreport-\u2026 status final subject Patient/p1 created_at \u2026 updated_at \u2026 code.text Chest X-Ray"},{"location":"gallery/#annotated-document-extractions","title":"Annotated Document (extractions)","text":"<pre><code>from hacs_models import AnnotatedDocument, Extraction, CharInterval\nfrom hacs_utils.visualization import annotations_to_markdown\ndoc = AnnotatedDocument(text=\"BP 128/82, HR 72\", extractions=[\n    Extraction(extraction_class=\"blood_pressure\", extraction_text=\"128/82\", char_interval=CharInterval(start_pos=3, end_pos=9)),\n    Extraction(extraction_class=\"heart_rate\", extraction_text=\"72\", char_interval=CharInterval(start_pos=15, end_pos=17)),\n])\nprint(annotations_to_markdown(doc))\n</code></pre>"},{"location":"gallery/#annotations-markdown-preview","title":"Annotations (Markdown preview)","text":"<ul> <li>blood_pressure [3-9]: \u2026 BP  128/82 , HR 72 \u2026</li> </ul>"},{"location":"hacs-tools/","title":"HACS Tools Reference","text":"<p>A comprehensive guide to the 50+ HACS tools for healthcare AI agents. Build clinical workflows with typed resources, CRUD operations, agent memory, and specialized healthcare tools.</p> <p>New to HACS? Start with the Quick Start.</p>"},{"location":"hacs-tools/#how-to-use-hacs-tools","title":"How to use HACS tools","text":"<p>HACS tools work in two modes:</p> <ul> <li>Python API (in-process): Import and call functions directly. Best for Python applications and testing.</li> <li>MCP API (out-of-process): JSON-RPC over HTTP/stdio. Best for non-Python agents or sandboxed contexts.</li> </ul> <p>All examples show both patterns where applicable.</p>"},{"location":"hacs-tools/#quick-start-save-and-retrieve-a-patient","title":"Quick Start: Save and retrieve a patient","text":""},{"location":"hacs-tools/#prerequisites","title":"Prerequisites","text":"<pre><code># Install HACS with database support\nuv pip install -U hacs-tools hacs-persistence\n\n# Set up environment \nexport DATABASE_URL=\"postgresql://user:pass@localhost/hacs\"  \nexport OPENAI_API_KEY=\"sk-...\"  # Optional, for extraction tools\n</code></pre>"},{"location":"hacs-tools/#python-api","title":"Python API","text":"<pre><code>from dotenv import load_dotenv\nload_dotenv()\n\nfrom hacs_tools.domains.database import save_resource, read_resource\nfrom hacs_tools.domains.modeling import pin_resource\nfrom hacs_models import Patient\n\n# 1. Create a patient resource\npatient_data = {\n    \"full_name\": \"Jane Doe\",\n    \"birth_date\": \"1990-01-01\", \n    \"gender\": \"female\",\n    \"active\": True\n}\n\n# 2. Pin the resource (validates and adds metadata)\nresult = pin_resource(\"Patient\", patient_data)\nif result.success:\n    patient_resource = result.data[\"resource\"]\n    print(f\"\u2713 Created Patient: {patient_resource['id']}\")\nelse:\n    print(f\"\u2717 Error: {result.message}\")\n\n# Output:\n# \u2713 Created Patient: patient_a1b2c3d4\n\n# 3. Save to database\nsave_result = await save_resource(resource=patient_resource)\nprint(f\"\u2713 Saved: {save_result.data['resource_id']}\")\n\n# Output:  \n# \u2713 Saved: patient_a1b2c3d4\n\n# 4. Read back from database\nread_result = await read_resource(\"Patient\", \"patient_a1b2c3d4\")\nif read_result.success:\n    retrieved = read_result.data[\"resource\"]\n    print(f\"Retrieved: {retrieved['full_name']} (DOB: {retrieved['birth_date']})\")\nelse:\n    print(f\"Error: {read_result.message}\")\n\n# Output:\n# Retrieved: Jane Doe (DOB: 1990-01-01)\n</code></pre>"},{"location":"hacs-tools/#mcp-api","title":"MCP API","text":"<p>Start the MCP server:</p> <pre><code>cd /Users/solanotodeschini/Code/hacs-ai\nuv run hacs-utils mcp-server --port 8000\n</code></pre> <p>Call tools via JSON-RPC:</p> <pre><code>import requests\n\n# 1. List available tools\nresponse = requests.post(\"http://localhost:8000/\", json={\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/list\", \n    \"id\": 1\n})\ntools = response.json()[\"result\"][\"tools\"]\nprint(f\"Found {len(tools)} tools\")\n\n# Output:\n# Found 23 tools\n\n# 2. Save a patient\nresponse = requests.post(\"http://localhost:8000/\", json={\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"pin_resource\",\n        \"arguments\": {\n            \"resource_type\": \"Patient\",\n            \"resource_data\": {\n                \"full_name\": \"John Smith\",\n                \"birth_date\": \"1985-03-15\",\n                \"gender\": \"male\"\n            }\n        }\n    },\n    \"id\": 2\n})\nresult = response.json()[\"result\"]\nprint(f\"\u2713 Patient ID: {result['data']['resource']['id']}\")\n\n# Output:\n# \u2713 Patient ID: patient_x9y8z7w6\n</code></pre>"},{"location":"hacs-tools/#core-workflow-tools","title":"Core Workflow Tools","text":""},{"location":"hacs-tools/#data-management-20-tools","title":"\ud83d\udcca Data Management (20 tools)","text":"<p>Healthcare data persistence, search, and registry operations with full CRUD support.</p>"},{"location":"hacs-tools/#core-crud-operations","title":"Core CRUD Operations","text":""},{"location":"hacs-tools/#save_resource","title":"<code>save_resource</code>","text":"<p>Purpose: Persist HACS resources to typed tables or generic JSONB storage.</p> <pre><code>from hacs_tools.domains.database import save_resource\n\n# Save with typed table (recommended)\nresult = await save_resource(\n    resource=patient_dict,\n    as_typed=True,           # Use strongly-typed Patient table\n    index_semantic=True      # Create vector embeddings for search\n)\n\n# Example output:\n# HACSResult(\n#   success=True,\n#   message=\"Resource saved successfully\",\n#   data={\n#     \"resource_id\": \"patient_abc123\",\n#     \"resource_type\": \"Patient\", \n#     \"schema\": \"hacs_clinical\",\n#     \"table\": \"patient\",\n#     \"semantic_indexed\": True\n#   }\n# )\n\n# Save to generic JSONB (for flexibility)\nresult = await save_resource(\n    resource=custom_resource,\n    as_typed=False,          # Use generic jsonb storage\n    schema=\"custom_schema\"\n)\n</code></pre> <p>Parameters: - <code>resource</code> (dict): Resource data to save - <code>as_typed</code> (bool): Use typed table (True) or generic JSONB (False)  - <code>schema</code> (str, optional): Schema name override - <code>index_semantic</code> (bool): Create vector embeddings for search</p> <p>Returns: <code>HACSResult</code> with resource ID and storage details</p>"},{"location":"hacs-tools/#read_resource","title":"<code>read_resource</code>","text":"<p>Purpose: Retrieve resources by type and ID.</p> <pre><code>from hacs_tools.domains.database import read_resource\n\n# Read from typed table\nresult = await read_resource(\"Patient\", \"patient_abc123\")\nif result.success:\n    patient = result.data[\"resource\"] \n    print(f\"Name: {patient['full_name']}\")\n    print(f\"DOB: {patient['birth_date']}\")\n\n# Example output:\n# Name: Jane Doe\n# DOB: 1990-01-01\n# \n# HACSResult.data = {\n#   \"resource\": {\n#     \"id\": \"patient_abc123\",\n#     \"resource_type\": \"Patient\",\n#     \"full_name\": \"Jane Doe\",\n#     \"birth_date\": \"1990-01-01\",\n#     \"created_at\": \"2024-01-15T10:30:00Z\",\n#     ...\n#   },\n#   \"metadata\": {\n#     \"table\": \"patient\",\n#     \"schema\": \"hacs_clinical\"\n#   }\n# }\n\n# Read from generic storage\nresult = await read_resource(\"CustomType\", \"custom_123\", as_typed=False)\n</code></pre> <p>Parameters: - <code>resource_type</code> (str): HACS resource type name - <code>resource_id</code> (str): Resource ID to retrieve - <code>as_typed</code> (bool): Read from typed table (True) or generic (False) - <code>schema</code> (str, optional): Schema name override</p>"},{"location":"hacs-tools/#update_resource","title":"<code>update_resource</code>","text":"<p>Purpose: Apply partial updates to existing resources.</p> <pre><code>from hacs_tools.domains.database import update_resource\n\n# Update specific fields\nresult = await update_resource(\n    resource_type=\"Patient\",\n    resource_id=\"patient_abc123\",\n    patch={\n        \"active\": False,\n        \"telecom\": [{\"system\": \"phone\", \"value\": \"555-1234\"}],\n        \"updated_reason\": \"Phone number updated\"\n    }\n)\n\n# Example output:\n# HACSResult(\n#   success=True,\n#   message=\"Resource updated successfully\", \n#   data={\n#     \"resource\": {\n#       \"id\": \"patient_abc123\",\n#       \"full_name\": \"Jane Doe\",  # unchanged\n#       \"active\": False,          # updated\n#       \"telecom\": [...],         # updated\n#       \"updated_at\": \"2024-01-15T15:45:00Z\"  # auto-updated\n#     }\n#   }\n# )\n</code></pre>"},{"location":"hacs-tools/#delete_resource","title":"<code>delete_resource</code>","text":"<p>Purpose: Remove resources from storage.</p> <pre><code>from hacs_tools.domains.database import delete_resource\n\nresult = await delete_resource(\"Patient\", \"patient_abc123\")\nif result.success:\n    print(\"\u2713 Patient deleted successfully\")\n\n# Example output: \n# \u2713 Patient deleted successfully\n#\n# HACSResult(\n#   success=True,\n#   message=\"Resource deleted successfully\",\n#   data={\n#     \"resource_id\": \"patient_abc123\",\n#     \"resource_type\": \"Patient\",\n#     \"deleted_at\": \"2024-01-15T16:00:00Z\"\n#   }\n# )\n</code></pre>"},{"location":"hacs-tools/#search-operations","title":"Search Operations","text":""},{"location":"hacs-tools/#search_memories","title":"<code>search_memories</code>","text":"<p>Purpose: Vector-based search of agent memories with database filters.</p> <pre><code>from hacs_tools.domains.database import search_memories\n\n# Semantic search with actor filter\nresult = await search_memories(\n    actor_id=\"dr_chen\",\n    query=\"patient blood pressure management\",\n    filters={\"memory_type\": \"episodic\"},\n    top_k=5\n)\n\nfor memory in result.data[\"memories\"]:\n    print(f\"\u2022 {memory['content'][:100]}...\")\n    print(f\"  Relevance: {memory['score']:.3f}\")\n\n# Example output:\n# \u2022 Discussed BP management with Patient Jane Doe. Recommended lifestyle changes and monitoring...\n#   Relevance: 0.892\n# \u2022 Patient reported difficulty with medication adherence. Suggested pill organizer and...\n#   Relevance: 0.847\n</code></pre>"},{"location":"hacs-tools/#search_knowledge_items","title":"<code>search_knowledge_items</code>","text":"<p>Purpose: Search clinical knowledge base using vector similarity.</p> <pre><code>from hacs_tools.domains.database import search_knowledge_items\n\n# Search evidence with reranking\nresult = await search_knowledge_items(\n    query=\"hypertension treatment guidelines ACE inhibitors\",\n    top_k=3,\n    filters={\"source\": \"pubmed\", \"year_min\": 2020},\n    rerank=True\n)\n\nfor item in result.data[\"items\"]:\n    print(f\"Title: {item['title']}\")\n    print(f\"Source: {item['source']} ({item['year']})\")\n    print(f\"Relevance: {item['relevance_score']:.3f}\\n\")\n\n# Example output:\n# Title: ACE Inhibitors in Hypertension Management: 2023 Guidelines\n# Source: pubmed (2023)  \n# Relevance: 0.934\n#\n# Title: Comparative Effectiveness of ACE Inhibitors vs ARBs\n# Source: pubmed (2022)\n# Relevance: 0.891\n</code></pre>"},{"location":"hacs-tools/#registry-operations","title":"Registry Operations","text":""},{"location":"hacs-tools/#register_model_version","title":"<code>register_model_version</code>","text":"<p>Purpose: Register model schemas in the HACS registry for versioning.</p> <pre><code>from hacs_tools.domains.database import register_model_version\n\n# Register a custom patient extension\nresult = await register_model_version(\n    resource_name=\"ExtendedPatient\",\n    version=\"1.2.0\", \n    schema_def={\n        \"type\": \"object\",\n        \"properties\": {\n            \"full_name\": {\"type\": \"string\"},\n            \"birth_date\": {\"type\": \"string\", \"format\": \"date\"},\n            \"genetic_markers\": {\n                \"type\": \"array\",\n                \"items\": {\"type\": \"string\"}\n            }\n        },\n        \"required\": [\"full_name\", \"birth_date\"]\n    },\n    tags=[\"patient\", \"genomics\", \"extended\"]\n)\n\nprint(f\"\u2713 Registered: {result.data['registry_id']}\")\n\n# Example output:\n# \u2713 Registered: extended_patient_v1.2.0_abc123\n</code></pre>"},{"location":"hacs-tools/#database-administration","title":"Database Administration","text":""},{"location":"hacs-tools/#run_migrations","title":"<code>run_migrations</code>","text":"<p>Purpose: Execute database schema migrations to ensure consistency.</p> <pre><code>from hacs_tools.domains.database import run_migrations\n\n# Run all pending migrations\nresult = await run_migrations()\nprint(f\"Applied {len(result.data['applied'])} migrations:\")\nfor migration in result.data['applied']:\n    print(f\"  \u2022 {migration['name']} - {migration['description']}\")\n\n# Example output:\n# Applied 3 migrations:\n#   \u2022 20240115_001_patient_telecom - Add telecom fields to patient table\n#   \u2022 20240115_002_observation_index - Add semantic index to observation table  \n#   \u2022 20240115_003_memory_schema - Update memory table schema\n</code></pre>"},{"location":"hacs-tools/#get_db_status","title":"<code>get_db_status</code>","text":"<p>Purpose: Check database connection and migration state.</p> <pre><code>from hacs_tools.domains.database import get_db_status\n\nresult = await get_db_status()\nstatus = result.data\n\nprint(f\"Connection: {'\u2713' if status['connected'] else '\u2717'}\")\nprint(f\"Schema version: {status['schema_version']}\")\nprint(f\"Pending migrations: {status['pending_migrations']}\")\n\n# Example output:\n# Connection: \u2713\n# Schema version: 2.1.3\n# Pending migrations: 0\n</code></pre>"},{"location":"hacs-tools/#resource-modeling-5-tools","title":"\ud83c\udfd7\ufe0f Resource Modeling (5 tools)","text":"<p>Tools for creating, validating, and composing HACS resources with proper metadata and type safety.</p>"},{"location":"hacs-tools/#pin_resource","title":"<code>pin_resource</code>","text":"<p>Purpose: Create and validate HACS resources with proper metadata.</p> <pre><code>from hacs_tools.domains.modeling import pin_resource\n\n# Create a medication request\nmed_data = {\n    \"status\": \"active\",\n    \"intent\": \"order\", \n    \"medication_codeable_concept\": {\n        \"text\": \"Lisinopril 10mg\",\n        \"coding\": [{\n            \"system\": \"http://www.nlm.nih.gov/research/umls/rxnorm\",\n            \"code\": \"314077\"\n        }]\n    },\n    \"subject\": {\"reference\": \"Patient/patient_abc123\"},\n    \"dosage_instruction\": [{\n        \"text\": \"Take one tablet daily\"\n    }]\n}\n\nresult = pin_resource(\"MedicationRequest\", med_data)\nif result.success:\n    resource = result.data[\"resource\"]\n    print(f\"\u2713 Created MedicationRequest: {resource['id']}\")\n    print(f\"Status: {resource['status']}\")\n    print(f\"Medication: {resource['medication_codeable_concept']['text']}\")\n\n# Example output:\n# \u2713 Created MedicationRequest: medreq_def456\n# Status: active\n# Medication: Lisinopril 10mg\n</code></pre>"},{"location":"hacs-tools/#compose_bundle","title":"<code>compose_bundle</code>","text":"<p>Purpose: Combine multiple resources into a FHIR Bundle.</p> <pre><code>from hacs_tools.domains.modeling import compose_bundle\n\n# Create a bundle with patient and observations\nresources = [patient_resource, bp_observation, hr_observation]\n\nresult = compose_bundle(\n    bundle_type=\"collection\",\n    title=\"Patient Visit Summary\",\n    resources=resources\n)\n\nbundle = result.data[\"bundle\"]\nprint(f\"\u2713 Bundle contains {bundle['total']} resources\")\nfor entry in bundle[\"entry\"]:\n    resource = entry[\"resource\"]\n    print(f\"  \u2022 {resource['resource_type']}: {resource['id']}\")\n\n# Example output:\n# \u2713 Bundle contains 3 resources\n#   \u2022 Patient: patient_abc123\n#   \u2022 Observation: obs_bp_789\n#   \u2022 Observation: obs_hr_456\n</code></pre>"},{"location":"hacs-tools/#validate_resource","title":"<code>validate_resource</code>","text":"<p>Purpose: Validate resources against HACS schemas and business rules.</p> <pre><code>from hacs_tools.domains.modeling import validate_resource\n\n# Validate with comprehensive checking\nresult = validate_resource(\n    resource=medication_request,\n    check_references=True,    # Validate reference integrity\n    check_business_rules=True # Apply clinical validation rules  \n)\n\nif result.success:\n    print(\"\u2713 Resource is valid\")\n    if result.data.get(\"warnings\"):\n        for warning in result.data[\"warnings\"]:\n            print(f\"\u26a0 Warning: {warning}\")\nelse:\n    print(\"\u2717 Validation failed:\")\n    for error in result.data[\"errors\"]:\n        print(f\"  \u2022 {error['field']}: {error['message']}\")\n\n# Example output:\n# \u2713 Resource is valid\n# \u26a0 Warning: dosage_instruction[0] missing timing information\n</code></pre>"},{"location":"hacs-tools/#agent-operations-10-tools","title":"\ud83e\udd16 Agent Operations (10 tools)","text":"<p>Tools for agent working memory, task planning, long-term memory, and context management.</p>"},{"location":"hacs-tools/#working-memory-scratchpad","title":"Working Memory (Scratchpad)","text":""},{"location":"hacs-tools/#write_scratchpad","title":"<code>write_scratchpad</code>","text":"<p>Purpose: Record observations, decisions, and working notes.</p> <pre><code>from hacs_tools.domains.agents import write_scratchpad\n\n# Record a clinical observation\nresult = write_scratchpad(\n    content=\"Patient reports 7/10 chest pain, onset 2 hours ago. No radiation to arms. Vital signs stable.\",\n    entry_type=\"observation\",\n    session_id=\"visit_20240115\",\n    tags=[\"chest_pain\", \"assessment\"]\n)\n\nprint(f\"\u2713 Recorded entry: {result.data['entry_id']}\")\n\n# Example output:\n# \u2713 Recorded entry: scratchpad_ghi789\n</code></pre>"},{"location":"hacs-tools/#read_scratchpad","title":"<code>read_scratchpad</code>","text":"<p>Purpose: Retrieve working memory entries for context.</p> <pre><code>from hacs_tools.domains.agents import read_scratchpad\n\n# Get recent observations for this session\nresult = read_scratchpad(\n    session_id=\"visit_20240115\",\n    entry_type=\"observation\", \n    limit=5\n)\n\nfor entry in result.data[\"entries\"]:\n    print(f\"[{entry['created_at']}] {entry['content'][:80]}...\")\n\n# Example output:\n# [2024-01-15T14:30:00Z] Patient reports 7/10 chest pain, onset 2 hours ago. No radiation to arms...\n# [2024-01-15T14:25:00Z] Reviewed patient history: 3 prior ED visits for chest pain, all negative...\n</code></pre>"},{"location":"hacs-tools/#task-planning","title":"Task Planning","text":""},{"location":"hacs-tools/#create_todo","title":"<code>create_todo</code>","text":"<p>Purpose: Create structured task items for clinical workflows.</p> <pre><code>from hacs_tools.domains.agents import create_todo\n\n# Create urgent clinical task\nresult = create_todo(\n    content=\"Order cardiac enzymes and chest X-ray for patient with chest pain\",\n    priority=\"high\",\n    clinical_urgency=\"urgent\",\n    due_date=\"2024-01-15T16:00:00Z\",\n    context={\n        \"patient_id\": \"patient_abc123\",\n        \"session_id\": \"visit_20240115\"\n    }\n)\n\nprint(f\"\u2713 Created todo: {result.data['todo_id']}\")\n\n# Example output:\n# \u2713 Created todo: todo_urgent_jkl012\n</code></pre>"},{"location":"hacs-tools/#list_todos","title":"<code>list_todos</code>","text":"<p>Purpose: Retrieve and filter task lists.</p> <pre><code>from hacs_tools.domains.agents import list_todos\n\n# Get high-priority pending tasks\nresult = list_todos(\n    status=\"pending\",\n    priority_min=3,  # High priority and above\n    limit=10\n)\n\nprint(f\"Found {len(result.data['todos'])} high-priority tasks:\")\nfor todo in result.data[\"todos\"]:\n    print(f\"\u2022 [{todo['priority']}] {todo['content'][:60]}...\")\n    if todo.get('clinical_urgency'):\n        print(f\"  Clinical urgency: {todo['clinical_urgency']}\")\n\n# Example output:\n# Found 3 high-priority tasks:\n# \u2022 [high] Order cardiac enzymes and chest X-ray for patient with chest...\n#   Clinical urgency: urgent\n# \u2022 [high] Review medication interactions for patient on multiple...\n#   Clinical urgency: moderate\n</code></pre>"},{"location":"hacs-tools/#long-term-memory","title":"Long-term Memory","text":""},{"location":"hacs-tools/#store_memory","title":"<code>store_memory</code>","text":"<p>Purpose: Persist important information for future reference.</p> <pre><code>from hacs_tools.domains.agents import store_memory\n\n# Store procedural knowledge\nresult = store_memory(\n    content=\"When evaluating chest pain in young patients, always consider anxiety/panic disorder if cardiac workup is negative. Patient education about anxiety symptoms is crucial.\",\n    memory_type=\"procedural\",\n    actor_id=\"dr_chen\", \n    tags=[\"chest_pain\", \"anxiety\", \"young_patients\"],\n    context={\"domain\": \"emergency_medicine\", \"evidence_level\": \"clinical_experience\"}\n)\n\nprint(f\"\u2713 Stored memory: {result.data['memory_id']}\")\n\n# Example output:\n# \u2713 Stored memory: memory_mno345\n</code></pre>"},{"location":"hacs-tools/#retrieve_memories","title":"<code>retrieve_memories</code>","text":"<p>Purpose: Find relevant memories using semantic search.</p> <pre><code>from hacs_tools.domains.agents import retrieve_memories\n\n# Retrieve relevant clinical knowledge\nresult = retrieve_memories(\n    query=\"chest pain young patient anxiety\",\n    actor_id=\"dr_chen\",\n    memory_type=\"procedural\",\n    limit=3\n)\n\nfor memory in result.data[\"memories\"]:\n    print(f\"\u2022 {memory['content'][:100]}...\")\n    print(f\"  Relevance: {memory['relevance_score']:.3f}\")\n    print(f\"  Tags: {', '.join(memory.get('tags', []))}\\n\")\n\n# Example output:\n# \u2022 When evaluating chest pain in young patients, always consider anxiety/panic disorder if...\n#   Relevance: 0.924\n#   Tags: chest_pain, anxiety, young_patients\n</code></pre>"},{"location":"hacs-tools/#context-management","title":"Context Management","text":""},{"location":"hacs-tools/#inject_preferences","title":"<code>inject_preferences</code>","text":"<p>Purpose: Apply actor preferences to messages and responses.</p> <pre><code>from hacs_tools.domains.agents import inject_preferences\n\n# Apply communication preferences\nmessage = {\n    \"role\": \"assistant\",\n    \"content\": \"The patient should start on ACE inhibitor therapy.\"\n}\n\nresult = inject_preferences(\n    message=message,\n    actor_id=\"dr_chen\",\n    preference_scope=\"communication_style\"\n)\n\nenhanced_message = result.data[\"message\"]\nprint(f\"Enhanced: {enhanced_message['content']}\")\n\n# Example output:\n# Enhanced: Based on current guidelines, I recommend initiating ACE inhibitor therapy for this patient. Please consider starting with lisinopril 5mg daily, with close monitoring of blood pressure and renal function. Would you like me to provide patient education materials about this medication?\n</code></pre>"},{"location":"hacs-tools/#select_tools_for_task","title":"<code>select_tools_for_task</code>","text":"<p>Purpose: Choose relevant tools using semantic matching.</p> <pre><code>from hacs_tools.domains.agents import select_tools_for_task\n\n# Get tools for clinical documentation\nresult = select_tools_for_task(\n    task_description=\"Create comprehensive discharge summary for patient with heart failure\",\n    max_tools=8,\n    domain_filter=\"modeling\"\n)\n\nfor tool in result.data[\"selected_tools\"]:\n    print(f\"\u2022 {tool['name']}: {tool['description'][:60]}...\")\n    print(f\"  Relevance: {tool['relevance_score']:.3f}\")\n\n# Example output:  \n# \u2022 pin_resource: Create and validate HACS resources with proper metadata...\n#   Relevance: 0.887\n# \u2022 compose_bundle: Combine multiple resources into a FHIR Bundle...\n#   Relevance: 0.823\n</code></pre>"},{"location":"hacs-tools/#advanced-features-optional","title":"\ud83d\udd0d Advanced Features (Optional)","text":""},{"location":"hacs-tools/#extraction-tools-llm-dependent","title":"Extraction Tools (LLM-dependent)","text":"<p>These tools require LLM integration and are optional based on your setup.</p>"},{"location":"hacs-tools/#extract_variables","title":"<code>extract_variables</code>","text":"<p>Purpose: Extract structured data from clinical text using LLMs.</p> <pre><code>from hacs_tools.domains.extraction import extract_variables\n\n# Extract vital signs from clinical notes  \nresult = extract_variables(\n    text=\"Patient presents with BP 140/90, HR 88, temp 98.6F, O2 sat 97% on room air\",\n    variables=[\"systolic_bp\", \"diastolic_bp\", \"heart_rate\", \"temperature\", \"oxygen_saturation\"],\n    provider=\"openai\"\n)\n\nif result.success:\n    extracted = result.data[\"variables\"]\n    print(\"Extracted variables:\")\n    for var, value in extracted.items():\n        print(f\"  {var}: {value}\")\n\n# Example output:\n# Extracted variables:\n#   systolic_bp: 140\n#   diastolic_bp: 90  \n#   heart_rate: 88\n#   temperature: 98.6\n#   oxygen_saturation: 97\n</code></pre>"},{"location":"hacs-tools/#terminology-tools-optional","title":"Terminology Tools (Optional)","text":"<p>Clinical coding and terminology management tools.</p>"},{"location":"hacs-tools/#search_umls","title":"<code>search_umls</code>","text":"<p>Purpose: Search UMLS terminology for clinical codes.</p> <pre><code>from hacs_tools.domains.terminology import search_umls\n\n# Find codes for hypertension\nresult = search_umls(\n    query=\"essential hypertension\",\n    source_vocabularies=[\"SNOMEDCT_US\", \"ICD10CM\"],\n    max_results=5\n)\n\nfor concept in result.data[\"concepts\"]:\n    print(f\"\u2022 {concept['preferred_name']}\")\n    print(f\"  Code: {concept['code']} ({concept['vocabulary']})\")\n    print(f\"  Definition: {concept['definition'][:80]}...\\n\")\n\n# Example output:\n# \u2022 Essential hypertension\n#   Code: 59621000 (SNOMEDCT_US)\n#   Definition: Hypertension that occurs without apparent cause; idiopathic...\n</code></pre>"},{"location":"hacs-tools/#error-handling-and-patterns","title":"Error Handling and Patterns","text":""},{"location":"hacs-tools/#hacsresult-pattern","title":"HACSResult Pattern","text":"<p>All HACS tools return a consistent <code>HACSResult</code> object:</p> <pre><code>from hacs_models import HACSResult\n\n# Always check success before using data\nresult = await some_tool(parameters...)\n\nif result.success:\n    data = result.data\n    print(f\"\u2713 {result.message}\")\n    # Use data safely\nelse:\n    print(f\"\u2717 Error: {result.message}\")\n    if result.error:\n        print(f\"Details: {result.error}\")\n        # Handle error gracefully\n</code></pre>"},{"location":"hacs-tools/#asyncsync-patterns","title":"Async/Sync Patterns","text":"<p>Most database tools are async; agent tools are typically sync:</p> <pre><code># Database tools (async)\nawait save_resource(resource)\nawait search_memories(query=\"...\")\n\n# Agent tools (sync)  \nwrite_scratchpad(content=\"...\")\nresult = create_todo(content=\"...\")\n\n# Check tool documentation for async status\nfrom hacs_tools import get_tool\ntool = get_tool(\"save_resource\") \nprint(f\"Async: {tool.is_async}\")  # True\n</code></pre>"},{"location":"hacs-tools/#authentication-requirements","title":"Authentication Requirements","text":"<p>Tools that require actor authentication:</p> <pre><code># Tools requiring authentication inject actor automatically\nfrom hacs_utils.integrations.common.tool_loader import set_injected_params\n\nset_injected_params({\"actor_name\": \"dr_chen\"})\n\n# Now all authenticated tools use this actor\nresult = store_memory(content=\"...\")  # Automatically uses dr_chen\nresult = create_todo(content=\"...\")   # Automatically uses dr_chen\n</code></pre>"},{"location":"hacs-tools/#discovery-and-registry","title":"Discovery and Registry","text":""},{"location":"hacs-tools/#list-all-available-tools","title":"List All Available Tools","text":"<pre><code># Python API - get all tools\nfrom hacs_registry import get_global_tool_registry\n\nregistry = get_global_tool_registry()\nall_tools = registry.get_all_tools()\n\nfor tool in all_tools:\n    print(f\"{tool.name} ({tool.domain}) - {tool.description[:60]}...\")\n\n# MCP API - get curated tools\nimport requests\nresponse = requests.post(\"http://localhost:8000/\", json={\n    \"jsonrpc\": \"2.0\", \n    \"method\": \"tools/list\",\n    \"id\": 1\n})\n\ntools = response.json()[\"result\"][\"tools\"]\nprint(f\"MCP exposes {len(tools)} tools\")\n</code></pre>"},{"location":"hacs-tools/#search-tools-by-domain","title":"Search Tools by Domain","text":"<pre><code># Find all modeling tools\nmodeling_tools = registry.get_tools_by_domain(\"modeling\")\n\nfor tool in modeling_tools:\n    print(f\"\u2022 {tool.name}: {tool.description}\")\n\n# Example output:\n# \u2022 pin_resource: Create and validate HACS resources with proper metadata\n# \u2022 compose_bundle: Combine multiple resources into a FHIR Bundle\n# \u2022 validate_resource: Validate resources against HACS schemas\n# \u2022 diff_resources: Compare two resources and show differences\n# \u2022 validate_bundle: Validate bundle structure and resource references\n</code></pre>"},{"location":"hacs-tools/#tool-categories-summary","title":"Tool Categories Summary","text":"Domain Tools Purpose \ud83d\udcca Database 20 CRUD, search, registry, admin \ud83e\udd16 Agents 10 Memory, tasks, context, preferences \ud83c\udfd7\ufe0f Modeling 5 Resource creation, validation, bundles \ud83d\udd0d Extraction 4 LLM-based data extraction (optional) \ud83e\uddec Terminology 5 Clinical coding, UMLS search (optional) \ud83c\udfe5 Resource-specific 15+ Specialized tools for Patient, Observation, etc. <p>For implementation examples and integration patterns, see the Quick Start guide.</p> <p>This reference covers all 50+ HACS tools with real examples and outputs. For the latest tool additions, check the registry with <code>get_all_tools()</code>.</p>"},{"location":"quick-start/","title":"HACS Quick Start Guide","text":"<p>Build a Healthcare Document Processing Pipeline in 5 Minutes</p> <p>Extract structured healthcare data from clinical text and persist to database with proper actor security.</p>"},{"location":"quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Docker (for database)</li> </ul>"},{"location":"quick-start/#step-1-minimal-inprocess-example","title":"Step 1: Minimal in\u2011process example","text":"<p>Install HACS first (see home page \u201cInstall HACS (beta)\u201d). Then run this minimal in\u2011process example using HACS models. HACS models are healthcare\u2011native, FHIR\u2011aligned typed data structures that form the canonical layer for agents, tools, and persistence. This first step introduces the core types and how resources are constructed and reasoned over in\u2011process.</p> <pre><code>from hacs_auth import Actor, ActorRole\nfrom hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\n\n# Provider (in\u2011process only)\ndoctor = Actor(name=\"Dr. Sarah Chen\", role=ActorRole.PHYSICIAN, organization=\"General Hospital\")\n\n# Typed resources (no DB, no LLM)\npatient = Patient(full_name=\"Maria Rodriguez\", birth_date=\"1985-03-15\", gender=\"female\")\nbp = Observation(status=ObservationStatus.FINAL, code=CodeableConcept(text=\"Blood Pressure\"), value_quantity=Quantity(value=128.0, unit=\"mmHg\"), subject=f\"Patient/{patient.id}\")\n\nprint(\"\u2705 Minimal example ready:\")\nprint(\"  Actor:\", doctor.name, doctor.role)\nprint(\"  Patient:\", patient.full_name, patient.id)\nprint(\"  BP:\", bp.value_quantity.value, bp.value_quantity.unit)\n\n# Always visualize structured records\nfrom hacs_utils.visualization import resource_to_markdown\nprint(\"\\nPatient record:\")\nprint(resource_to_markdown(patient, include_json=False))\nprint(\"\\nObservation record:\")\nprint(resource_to_markdown(bp, include_json=False))\n</code></pre> <pre><code>\u2705 Minimal example ready:\n  Actor: Dr. Sarah Chen physician\n  Patient: Maria Rodriguez patient-3bd910dd\n  BP: 128.0 mmHg\n\nPatient record:\n#### Patient\n\n| Field | Value |\n|---|---|\n| resource_type | Patient |\n| id | patient-3bd910dd |\n| status | active |\n| full_name | Maria Rodriguez |\n| gender | female |\n| birth_date | 1985-03-15 |\n| created_at | 2025-08-18T22:38:39.046248Z |\n| updated_at | 2025-08-18T22:38:39.046248Z |\n\nObservation record:\n#### Observation\n\n| Field | Value |\n|---|---|\n| resource_type | Observation |\n| id | observation-93675660 |\n| status | final |\n| code | Blood Pressure |\n| value.quantity | 128.0 mmHg |\n| subject | Patient/patient-3bd910dd |\n| performer | [] |\n| created_at | 2025-08-18T22:38:39.046393Z |\n| updated_at | 2025-08-18T22:38:39.046393Z |\n</code></pre> <p>This validates your local environment and demonstrates HACS typed models in\u2011process.</p>"},{"location":"quick-start/#step-2-add-capabilities","title":"Step 2: Add capabilities","text":"<p>Add structured extraction and PostgreSQL persistence to the minimal setup.</p> <p>The following snippets illustrate common extensions to the minimal setup.</p>"},{"location":"quick-start/#llm-extraction","title":"LLM extraction","text":"<pre><code># Prereq: uv pip install -U hacs-utils[langchain]; set OPENAI_API_KEY\n\nfrom hacs_models import Patient\nfrom hacs_utils.structured import extract\nfrom langchain_openai import ChatOpenAI\n\nPatientInfo = Patient.pick(\"full_name\", \"birth_date\", \"gender\")\nllm = ChatOpenAI(model=\"gpt-5\", temperature=0)\nnote = \"Maria Rodriguez (1985-03-15), female.\"\nsubset = extract(llm, prompt=f\"Extract demographics.\\n\\n{note}\", output_model=PatientInfo)\nprint(\"extracted:\", subset.model_dump())\n</code></pre> <p>See <code>docs/tutorials/medication_extraction.md</code> and API reference (structured extraction).</p>"},{"location":"quick-start/#database-persistence","title":"Database persistence","text":"<pre><code>\"\"\" Prereq: uv pip install -U hacs-persistence; set DATABASE_URL \"\"\"\n\nimport os, asyncio, logging\nfrom hacs_persistence import HACSConnectionFactory\nfrom hacs_auth import Actor, ActorRole\nfrom hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\n\nlogging.basicConfig(level=logging.INFO, format=\"%(name)s:%(levelname)s:%(message)s\")\n\nos.environ[\"DATABASE_URL\"] = os.getenv(\"DATABASE_URL\", \"postgresql://hacs:hacs_dev@localhost:5432/hacs\")\n\nadapter = HACSConnectionFactory.get_adapter(auto_migrate=False)\ndoctor = Actor(name=\"Dr. Sarah Chen\", role=ActorRole.PHYSICIAN, organization=\"General Hospital\")\npatient = Patient(full_name=\"Maria Rodriguez\", birth_date=\"1985-03-15\", gender=\"female\")\nbp_obs = Observation(status=ObservationStatus.FINAL, code=CodeableConcept(text=\"Blood Pressure\"), value_quantity=Quantity(value=128.0, unit=\"mmHg\"), subject=f\"Patient/{patient.id}\")\nhr_obs = Observation(status=ObservationStatus.FINAL, code=CodeableConcept(text=\"Heart Rate\"), value_quantity=Quantity(value=72.0, unit=\"bpm\"), subject=f\"Patient/{patient.id}\")\n\nasync def run():\n    sp = await adapter.save(patient, doctor)\n    bp_obs.subject = f\"Patient/{sp.id}\"\n    hr_obs.subject = f\"Patient/{sp.id}\"\n    await adapter.save(bp_obs, doctor)\n    await adapter.save(hr_obs, doctor)\n    print(\"\u2705 Persisted Patient and Observations\")\n\nasyncio.run(run())\n</code></pre> <pre><code>INFO:hacs_persistence.adapter:PostgreSQLAdapter (Async) configured for schema 'public'\nINFO:hacs_persistence.connection_factory:Created database adapter for schema 'public'\nINFO:hacs_persistence.adapter:HACS resources table checked/created successfully\nINFO:hacs_persistence.adapter:Async connection pool established and tables initialized.\nINFO:hacs_persistence.adapter:Resource Patient/patient-d900519e saved successfully\nINFO:hacs_persistence.adapter:Resource Observation/observation-87dae782 saved successfully\nINFO:hacs_persistence.adapter:Resource Observation/observation-8280d00e saved successfully\n\u2705 Persisted Patient and Observations\n</code></pre>"},{"location":"quick-start/#visualization","title":"Visualization","text":"<p>Render compact HTML cards for resources and highlight extractions in notebooks.</p> <pre><code># Prereq: uv pip install -U hacs-utils\nfrom hacs_utils.visualization import visualize_resource, visualize_annotations\nfrom hacs_models import AnnotatedDocument, Extraction, CharInterval\n\nvisualize_resource(patient)\n\ndoc = AnnotatedDocument(\n    text=\"BP 128/82, HR 72\",\n    extractions=[\n        Extraction(\n            extraction_class=\"blood_pressure\",\n            extraction_text=\"128/82\",\n            char_interval=CharInterval(start_pos=3, end_pos=9),\n        )\n    ],\n)\nvisualize_annotations(doc)\n\n# For static docs (Markdown), use:\n#   from hacs_utils.visualization import resource_to_markdown, annotations_to_markdown\n# See rendered example below.\n</code></pre> <p>Rendered (Markdown):</p>"},{"location":"quick-start/#patient","title":"Patient","text":"Field Value resource_type Patient id patient-5a82a2cb status active created_at 2025-08-17T23:33:58.656558Z updated_at 2025-08-17T23:33:58.656563Z <p>Annotations preview:</p> Class Span Snippet Blood Pressure [3-9] \u2026 BP  128/82 , HR 72 \u2026"},{"location":"quick-start/#step-3-integrate","title":"Step 3: Integrate","text":"<p>Bind HACS tools to an agent.</p> <p>You can now bind HACS tools to an agent. Refer to the API reference and tools guide for details.</p> <pre><code>from langgraph.prebuilt import create_react_agent\nfrom hacs_utils.integrations.langchain.tools import langchain_tools\n\ntools = langchain_tools()\nagent = create_react_agent(model=\"anthropic:claude-3-7-sonnet-latest\", tools=tools, prompt=\"You are a healthcare assistant using HACS tools.\")\n</code></pre>"},{"location":"quick-start/#what-you-built","title":"\ud83c\udfaf What You Built","text":"<p>\u2705 Healthcare Document Processor - Extract structured data from clinical text \u2705 FHIR-Compliant Database - PostgreSQL with healthcare schemas \u2705 Actor-Based Security - Role-based permissions for providers \u2705 AI-Ready Pipeline - Integrated with LangGraph and 20+ healthcare tools  </p>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":""},{"location":"quick-start/#production-workflows","title":"Production Workflows","text":"<ul> <li>Complete Context Engineering - All 4 context strategies</li> <li>Medication Extraction - Extract medications from clinical notes</li> </ul>"},{"location":"quick-start/#documentation","title":"Documentation","text":"<ul> <li>API Reference - Complete API documentation</li> <li>HACS Tools - 20+ healthcare tools reference</li> <li>Testing Guide - Testing and validation</li> </ul>"},{"location":"quick-start/#database-setup-migrations","title":"Database setup &amp; migrations","text":"<ul> <li><code>packages/hacs-persistence/README.md</code> \u2014 connection strings, schema overview, async migrations (<code>run_migration()</code>), guidance for <code>auto_migrate=True</code> in quick starts vs. explicit migrations in production</li> <li><code>docs/index.md</code> \u2014 HACS architecture (models, tools, persistence, integrations) and context\u2011engineering vision (Write, Select, Compress, Isolate)</li> </ul>"},{"location":"testing/","title":"HACS Testing Guide","text":"<p>This guide covers testing for HACS, including the new Phase 2 persistence, security, and vector integration features.</p> <p>For environment setup basics, see the Quick Start.</p>"},{"location":"testing/#quick-start","title":"Quick Start","text":""},{"location":"testing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Python 3.11+ (for local testing)</li> <li>UV package manager (required): <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code></li> <li>Environment variables configured in <code>.env</code> file (see root directory)</li> </ul>"},{"location":"testing/#running-tests","title":"Running Tests","text":""},{"location":"testing/#1-using-the-test-runner-script-recommended","title":"1. Using the Test Runner Script (Recommended)","text":"<p>We provide a convenient test runner script:</p> <pre><code># Validate environment setup\n./run_tests.sh validate\n\n# Run local unit tests\n./run_tests.sh local unit\n\n# Run Phase 2 integration tests (persistence, security, vector)\n./run_tests.sh local phase2\n\n# Run all local tests\n./run_tests.sh local all\n\n# Run full Docker test suite\n./run_tests.sh docker\n</code></pre>"},{"location":"testing/#2-direct-docker-testing","title":"2. Direct Docker Testing","text":"<p>Run the complete test suite with Docker:</p> <pre><code># Start all services and run tests\ndocker-compose --profile test up --build\n\n# View test results\ndocker logs hacs-test-runner\n</code></pre>"},{"location":"testing/#3-local-testing-development","title":"3. Local Testing (Development)","text":"<p>For local development and debugging:</p> <pre><code># Set up Python path\nexport PYTHONPATH=\"$PWD/packages/hacs-models/src:$PWD/packages/hacs-core/src:$PWD/packages/hacs-tools/src:$PWD/packages/hacs-auth/src:$PWD/packages/hacs-persistence/src:$PWD/packages/hacs-registry/src:$PWD/packages/hacs-utils/src:$PYTHONPATH\"\n\n# Install test dependencies with UV\nuv pip install pytest pytest-asyncio\n\n# Run specific test categories\npython -m pytest tests/test_ci_essential.py -v                # Essential CI tests\npython -m pytest tests/test_phase2_integration.py -v         # Phase 2 integration tests\npython -m pytest tests/test_integration_end_to_end.py -v     # End-to-end tests\n\n# Run specific domain tests\npython -m pytest tests/test_hacs_tools_schema.py::TestModeling -v\n</code></pre>"},{"location":"testing/#3-manual-mcp-integration-test","title":"3. Manual MCP Integration Test","text":"<p>For debugging MCP server integration:</p> <pre><code># Start MCP server\ndocker-compose up postgres qdrant hacs-mcp-server\n\n# Run manual integration test\ncd tests\npython test_hacs_tools_comprehensive.py --mcp\n</code></pre>"},{"location":"testing/#test-architecture","title":"Test Architecture","text":""},{"location":"testing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test tool definitions and basic functionality</li> <li>MCP Integration Tests: Test tools via MCP server protocol</li> <li>End-to-End Tests: Test complete workflows across multiple tools</li> <li>Performance Tests: Test tool execution timing and resource usage</li> </ol>"},{"location":"testing/#test-data","title":"Test Data","text":"<p>The test suite uses test data including:</p> <ul> <li>Patients: 3 test patients with complete demographics</li> <li>Observations: Blood pressure, vital signs, and clinical measurements</li> <li>Encounters: Ambulatory and emergency department visits</li> <li>Conditions: Hypertension, diabetes, and other chronic conditions</li> <li>Memory Blocks: Episodic, procedural, and executive memories</li> <li>Vector Data: Embeddings for semantic search testing</li> <li>Organizations: Healthcare systems and provider organizations</li> </ul>"},{"location":"testing/#tool-coverage-4-domains","title":"Tool Coverage (4 domains)","text":"<ul> <li>Modeling: <code>describe_models</code>, <code>list_model_fields</code>, <code>plan_bundle_schema</code>, <code>validate_resource</code>, <code>add_bundle_entries</code></li> <li>Extraction: <code>suggest_mapping</code>, <code>extract_values</code>, <code>apply_mapping</code>, <code>summarize_context</code></li> <li>Database (records): <code>save_record</code>, <code>read_record</code>, <code>update_record</code>, <code>delete_record</code>, <code>search_records</code></li> <li>Agents: <code>write_scratchpad</code>, <code>inject_preferences</code>, <code>store_memory</code>, <code>retrieve_memories</code>, <code>select_tools_for_task</code></li> </ul>"},{"location":"testing/#configuration","title":"Configuration","text":""},{"location":"testing/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables for testing:</p> <pre><code># Database Configuration\nDATABASE_URL=postgresql://hacs:hacs_dev@localhost:5432/hacs\n\n# Vector Store Configuration  \nQDRANT_URL=http://localhost:6333\nQDRANT_API_KEY=\"\"\n\n# API Keys (optional for basic tests)\nOPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n\n# MCP Server Configuration\nMCP_SERVER_URL=http://localhost:8000\n</code></pre>"},{"location":"testing/#test-profiles","title":"Test Profiles","text":"<p>Use Docker Compose profiles to run different test scenarios:</p> <pre><code># Basic services only\ndocker-compose up\n\n# Include Qdrant vector store\ndocker-compose --profile with-qdrant up\n\n# Run database migrations\ndocker-compose --profile migration up\n\n# Run tests\ndocker-compose --profile test up\n</code></pre>"},{"location":"testing/#test-results","title":"Test Results","text":""},{"location":"testing/#output-formats","title":"Output Formats","text":"<p>Test results are available in multiple formats:</p> <ol> <li>Console Output: Real-time test execution logs</li> <li>JSON Reports: Detailed test results in <code>test_results/</code> directory</li> <li>Coverage Reports: Code coverage analysis</li> <li>Performance Metrics: Tool execution timing and resource usage</li> </ol>"},{"location":"testing/#result-interpretation","title":"Result Interpretation","text":"<ul> <li>\u2705 Pass: Tool executed successfully with expected results</li> <li>\u274c Fail: Tool execution failed or returned unexpected results</li> <li>\u23ed\ufe0f Skip: Test skipped (e.g., MCP integration disabled)</li> <li>\u26a0\ufe0f Warning: Tool executed but with warnings or performance issues</li> </ul>"},{"location":"testing/#example-test-output","title":"Example Test Output","text":"<pre><code>\ud83d\ude80 HACS Tools Test Suite\n=====================================\n\n\u2705 MCP Server Health Check\n   Server Status: \u2705 Online\n   MCP Endpoint: \u2705 Ready\n   Available Tools: 20\n\n\ud83d\udcca Test Results Summary:\n   Total Tools: 20\n   Successful: 38\n   Failed: 2\n   Skipped: 2\n   Success Rate: 90.5%\n   Duration: 45.2 seconds\n\n\ud83d\udcc1 Detailed results saved to: test_results/hacs_tools_test_results_20241215_143022.json\n</code></pre>"},{"location":"testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"testing/#common-issues","title":"Common Issues","text":""},{"location":"testing/#mcp-server-not-accessible","title":"MCP Server Not Accessible","text":"<pre><code># Check if services are running\ndocker-compose ps\n\n# View MCP server logs\ndocker logs hacs-mcp-server\n\n# Test MCP server health\ncurl http://localhost:8000/health\n</code></pre>"},{"location":"testing/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Check database logs\ndocker logs hacs-postgres\n\n# Test database connection\ndocker-compose exec postgres pg_isready -U hacs -d hacs\n\n# Run migration manually\ndocker-compose --profile migration up\n</code></pre>"},{"location":"testing/#tool-import-errors","title":"Tool Import Errors","text":"<pre><code># Check Python path configuration\ndocker-compose exec hacs-mcp-server python -c \"import sys; print(sys.path)\"\n\n# Test tool imports\ndocker-compose exec hacs-mcp-server python -c \"from hacs_tools.tools import ALL_HACS_TOOLS; print(len(ALL_HACS_TOOLS))\"\n</code></pre>"},{"location":"testing/#performance-optimization","title":"Performance Optimization","text":"<p>For better test performance:</p> <ol> <li>Use Local Database: Set up PostgreSQL locally instead of Docker</li> <li>Parallel Testing: Use pytest-xdist for parallel execution</li> <li>Test Caching: Cache test data between runs</li> <li>Selective Testing: Run only changed domains during development</li> </ol> <pre><code># Parallel execution\npython -m pytest tests/test_hacs_tools_comprehensive.py -n auto\n\n# Selective testing\npython -m pytest tests/test_hacs_tools_comprehensive.py -k \"ResourceManagement or AdminOperations\"\n\n# Fast feedback loop\npython -m pytest tests/test_hacs_tools_comprehensive.py --ff --tb=short\n</code></pre>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"testing/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>The test suite integrates with GitHub Actions for CI/CD:</p> <pre><code># .github/workflows/test-hacs-tools.yml\nname: HACS Tools Test Suite\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Run HACS Tools Tests\n        run: |\n          docker-compose --profile test up --build --abort-on-container-exit\n</code></pre>"},{"location":"testing/#test-coverage-requirements","title":"Test Coverage Requirements","text":"<ul> <li>Minimum Coverage: 85% for all tool domains</li> <li>Critical Tools: 95% coverage for resource management and clinical workflows</li> <li>Integration Tests: All tools must have at least one integration test</li> </ul>"},{"location":"testing/#contributing","title":"Contributing","text":""},{"location":"testing/#adding-new-tests","title":"Adding New Tests","text":"<ol> <li>Add Test Data: Update <code>examples/hacs_developer_agent/scripts/init-db.sql</code> with relevant test data</li> <li>Create Test Cases: Add test methods to appropriate test classes</li> <li>Update Documentation: Document new test scenarios in this guide</li> <li>Verify Coverage: Ensure new tools havetest coverage</li> </ol>"},{"location":"testing/#test-development-guidelines","title":"Test Development Guidelines","text":"<ul> <li>Use Descriptive Names: Test method names should clearly indicate what is being tested</li> <li>Include Error Cases: Test both success and failure scenarios</li> <li>Validate Results: Assert on specific result values, not just success/failure</li> <li>Performance Aware: Include timing assertions for performance-critical tools</li> </ul>"},{"location":"testing/#support","title":"Support","text":"<p>For testing support:</p> <ol> <li>Documentation: Refer to tool-specific documentation in <code>packages/hacs-tools/</code></li> <li>Issues: Report test failures as GitHub issues with full logs</li> <li>Discussions: Use GitHub Discussions for test strategy questions</li> <li>Development: Join the HACS development community for real-time support</li> </ol>"},{"location":"how-to/authenticate_actor/","title":"Authenticate an Actor with permissions","text":"<p>This guide shows how to create and validate an access token with role-based permissions.</p> <pre><code># Prereq (demo secret): export HACS_JWT_SECRET=\"this_is_a_demo_secret_key_with_length_over_32_chars________\"\nfrom hacs_auth.auth_manager import AuthManager\nfrom hacs_auth.decorators import require_permission\n\nam = AuthManager()\n# Physician with read/write to patient\ntoken = am.create_access_token(\n    user_id=\"dr_chen\",\n    role=\"physician\",\n    permissions=[\"patient:read\", \"patient:write\"],\n    organization=\"General Hospital\",\n)\nprint(\"token_prefix:\", token[:24])\n\n@require_permission(\"patient:read\")\ndef get_patient(patient_id: str, **kwargs):\n    return {\"id\": patient_id, \"status\": \"ok\"}\n\nprint(get_patient(\"patient-123\", token=token))\n</code></pre> <pre><code>token_prefix: eyJhbGciOiJIUzI1NiIsInR5\n{'id': 'patient-123', 'status': 'ok'}\n</code></pre>"},{"location":"how-to/authenticate_actor/#verify-token-and-inspect-claims","title":"Verify token and inspect claims","text":"<pre><code>from hacs_auth.auth_manager import AuthError\n\n# Decode and verify token\nclaims = am.verify_token(token)\n\nprint(\"User:\", claims.user_id)\nprint(\"Role:\", claims.role)\nprint(\"Permissions:\", claims.permissions)\nprint(\"Org:\", claims.organization)\nprint(\"Issued:\", claims.issued_at)\nprint(\"Expires:\", claims.expires_at)\nprint(\"TTL (s):\", am.get_token_ttl(claims))\nprint(\"Expired?\", am.is_token_expired(claims))\n</code></pre> <pre><code>User: dr_chen\nRole: physician\nPermissions: ['patient:read', 'patient:write']\nOrg: General Hospital\nIssued: 2025-08-19 19:07:46.184696+00:00\nExpires: 2025-08-19 19:22:46.184696+00:00\nTTL (s): 899\nExpired? False\n</code></pre>"},{"location":"how-to/authenticate_actor/#permission-checks-exact-wildcard-admin","title":"Permission checks (exact, wildcard, admin)","text":"<pre><code># Exact permission\nprint(\"Has patient:read?\", am.has_permission(claims, \"patient:read\"))\n\n# Wildcard permission example (admin:* overrides everything)\nadmin_token = am.create_access_token(\n    user_id=\"sec_admin\",\n    role=\"admin\",\n    permissions=[\"admin:*\"],\n    organization=\"General Hospital\",\n)\nadmin_claims = am.verify_token(admin_token)\n\nprint(\"Admin has patient:write?\", am.has_permission(admin_claims, \"patient:write\"))\n\n# Enforce required permission (raises AuthError if missing)\ntry:\n    am.require_permission(claims, \"patient:delete\")\n    print(\"Delete allowed (unexpected)\")\nexcept AuthError as e:\n    print(\"Delete denied:\", e.message)\n</code></pre> <pre><code>Has patient:read? True\nAdmin has patient:write? True\nDelete denied: Permission denied: patient:delete required\n</code></pre>"},{"location":"how-to/authenticate_actor/#security-level-validation","title":"Security level validation","text":"<pre><code># Token created above has default security_level=\"medium\"\nprint(\"Meets 'low'?\", am.validate_security_level(claims, \"low\"))\nprint(\"Meets 'high'?\", am.validate_security_level(claims, \"high\"))\n</code></pre> <pre><code>Meets 'low'? True\nMeets 'high'? False\n</code></pre>"},{"location":"how-to/authenticate_actor/#refresh-token-flow","title":"Refresh token flow","text":"<pre><code># Issue and verify a refresh token\nrefresh = am.create_refresh_token(user_id=claims.user_id)\nprint(\"refresh_prefix:\", refresh[:24])\n\nuser_from_refresh = am.verify_refresh_token(refresh)\nprint(\"user_from_refresh:\", user_from_refresh)\n\n# Mint a new access token using refresh identity\nnew_token = am.create_access_token(\n    user_id=user_from_refresh,\n    role=claims.role,\n    permissions=claims.permissions,\n    organization=claims.organization,\n)\nprint(\"new_token_prefix:\", new_token[:24])\n</code></pre> <pre><code>refresh_prefix: eyJhbGciOiJIUzI1NiIsInR5\nuser_from_refresh: dr_chen\nnew_token_prefix: eyJhbGciOiJIUzI1NiIsInR5\n</code></pre>"},{"location":"how-to/authenticate_actor/#decorators-for-write-operations","title":"Decorators for write operations","text":"<pre><code>@require_permission(\"patient:write\")\ndef update_patient(patient_id: str, payload: dict, **kwargs):\n    return {\"id\": patient_id, \"updated\": True, \"payload_keys\": sorted(payload.keys())}\n\nprint(update_patient(\"patient-123\", {\"allergies\": [\"penicillin\"]}, token=token))\n</code></pre> <pre><code>{'id': 'patient-123', 'updated': True, 'payload_keys': ['allergies']}\n</code></pre>"},{"location":"how-to/authenticate_actor/#tips","title":"Tips","text":"<ul> <li>Use strong secrets; set <code>HACS_JWT_SECRET</code> to a 32+ char value. In production, HTTPS and MFA are enforced via <code>AuthConfig</code>.</li> <li>Default access token expiry is 15 min; adjust via <code>HACS_TOKEN_EXPIRE_MINUTES</code> (min 5, max 60).</li> <li>Use <code>admin:*</code> sparingly; prefer fine-grained permissions like <code>patient:read</code> and <code>patient:write</code>.</li> </ul>"},{"location":"how-to/authenticate_actor/#next-steps","title":"Next steps","text":"<ul> <li>Connect to a database and persist resources: see Connect to a database</li> <li>Validate models and structure: see Validate HACS Models</li> <li>Visualize resources and outputs: see Visualize Resources</li> </ul>"},{"location":"how-to/connect_postgres/","title":"Connect to a database","text":"<p>This guide shows how to set up a production-ready PostgreSQL database for HACS, run migrations, and create clinical resources using authenticated actors.</p> <p>Prerequisites: - PostgreSQL database (local or cloud) - <code>uv pip install -U hacs-persistence hacs-auth hacs-models</code></p>"},{"location":"how-to/connect_postgres/#database-setup-and-migrations","title":"Database setup and migrations","text":""},{"location":"how-to/connect_postgres/#configure-database-connection","title":"Configure database connection","text":"<pre><code>from dotenv import load_dotenv\nload_dotenv()  # Load DATABASE_URL from .env\n\nimport os\nprint(\"Database URL configured:\", bool(os.getenv(\"DATABASE_URL\")))\nprint(\"URL preview:\", (os.getenv(\"DATABASE_URL\") or \"\")[:30] + \"...\" if os.getenv(\"DATABASE_URL\") else \"Not set\")\n</code></pre> <p>Output: <pre><code>Database URL configured: True\nURL preview: postgresql://postgres:hB4NrD4l...\n</code></pre></p>"},{"location":"how-to/connect_postgres/#production-database-configuration","title":"Production database configuration","text":"<pre><code># Production-ready database configuration\nproduction_config = {\n    \"connection_pool_size\": 20,\n    \"max_overflow\": 30,\n    \"pool_timeout\": 30,\n    \"pool_recycle\": 3600,\n    \"ssl_mode\": \"require\",\n    \"application_name\": \"hacs-production\",\n    \"statement_timeout\": 30000,  # 30 seconds\n    \"idle_in_transaction_session_timeout\": 60000,  # 1 minute\n}\n\nprint(\"\ud83d\ude80 Production Database Configuration:\")\nfor key, value in production_config.items():\n    print(f\"  {key}: {value}\")\n\n# Security recommendations\nsecurity_checklist = [\n    \"\u2705 SSL/TLS encryption enabled (sslmode=require)\",\n    \"\u2705 Connection pooling configured for scalability\", \n    \"\u2705 Statement timeouts prevent hanging queries\",\n    \"\u2705 Idle transaction timeouts prevent lock contention\",\n    \"\u2705 Application name for connection tracking\",\n    \"\u2705 Prepared statements for performance\"\n]\n\nprint(f\"\\n\ud83d\udd12 Security Checklist:\")\nfor item in security_checklist:\n    print(f\"  {item}\")\n</code></pre> <p>Output: <pre><code>\ud83d\ude80 Production Database Configuration:\n  connection_pool_size: 20\n  max_overflow: 30\n  pool_timeout: 30\n  pool_recycle: 3600\n  ssl_mode: require\n  application_name: hacs-production\n  statement_timeout: 30000\n  idle_in_transaction_session_timeout: 60000\n\n\ud83d\udd12 Security Checklist:\n  \u2705 SSL/TLS encryption enabled (sslmode=require)\n  \u2705 Connection pooling configured for scalability\n  \u2705 Statement timeouts prevent hanging queries\n  \u2705 Idle transaction timeouts prevent lock contention\n  \u2705 Application name for connection tracking\n  \u2705 Prepared statements for performance\n</code></pre></p>"},{"location":"how-to/connect_postgres/#hacs-database-schema-overview","title":"HACS database schema overview","text":"<p>HACS organizes healthcare data into six specialized PostgreSQL schemas for optimal performance and security. The hacs_core schema contains foundational resources like patients, observations, and encounters that form the backbone of clinical data. hacs_clinical houses specialized clinical data including conditions, medications, procedures, and diagnostic reports. hacs_registry manages registered resource definitions, tool versions, and knowledge items for AI agents. hacs_agents stores agent messages, memory blocks, and session data for conversational workflows. hacs_admin contains system configuration and operational settings. Finally, hacs_audit provides comprehensive audit logging and compliance tracking for all system operations. This schema separation enables fine-grained access control, optimized indexing strategies, and clear data governance boundaries essential for healthcare applications.</p>"},{"location":"how-to/connect_postgres/#where-postgres-fits-in-hacs","title":"Where Postgres fits in HACS","text":"<ul> <li>Adapters: HACS provides an async JSONB adapter (<code>PostgreSQLAdapter</code>) for universal storage and an optional granular adapter (<code>GranularPostgreSQLAdapter</code>) for typed, per-resource tables. Both store full resources and indexes key fields for queries.</li> <li>Schemas: Data is split across <code>hacs_core</code>, <code>hacs_clinical</code>, <code>hacs_registry</code>, <code>hacs_agents</code>, <code>hacs_admin</code>, <code>hacs_audit</code> for governance and performance.</li> <li>JSONB vs typed tables: The JSONB adapter writes to <code>public.hacs_resources</code> and works for all models. The granular adapter writes to typed tables (e.g., <code>hacs_core.patients</code>, <code>hacs_core.observations</code>) for faster analytics and joins.</li> <li>Configuration: Set <code>DATABASE_URL</code> (or <code>HACS_DATABASE_URL</code>) in your environment; the snippet maps it so the adapter initializes cleanly.</li> </ul>"},{"location":"how-to/connect_postgres/#run-database-migrations","title":"Run database migrations","text":"<pre><code>import asyncio\nfrom hacs_persistence.migrations import run_migration, get_migration_status\n\n# Check current migration status\nprint(\"Checking migration status...\")\nstatus = await get_migration_status()\n\nif status.get(\"error\"):\n    print(f\"\u274c Database connection error: {status['error']}\")\nelse:\n    print(f\"Migration complete: {status['migration_complete']}\")\n    print(f\"Tables found: {status['total_tables']}/{status['expected_tables']}\")\n    print(f\"pgvector enabled: {status['pgvector_enabled']}\")\n    print(\"Schema breakdown:\", status['schema_breakdown'])\n\n# Run migration if needed\nif not status.get(\"migration_complete\", False):\n    print(\"\\nRunning database migration...\")\n    migration_success = await run_migration()\n\n    if migration_success:\n        print(\"\u2705 Migration completed successfully!\")\n\n        # Verify migration\n        new_status = await get_migration_status()\n        print(f\"Verification: {new_status['total_tables']} tables created\")\n    else:\n        print(\"\u274c Migration failed\")\n</code></pre> <p>Output: <pre><code>Checking migration status...\nMigration complete: True\nTables found: 36/23\npgvector enabled: True\nSchema breakdown: {'hacs_core': 7, 'hacs_clinical': 21, 'hacs_registry': 2, 'hacs_agents': 3, 'hacs_admin': 1, 'hacs_audit': 1, 'public': 1}\n</code></pre></p>"},{"location":"how-to/connect_postgres/#authentication","title":"Authentication","text":"<p>This guide focuses on database connectivity. For creating and verifying the authenticated provider and permissions, see Authenticate Actor.</p>"},{"location":"how-to/connect_postgres/#create-and-save-patient-records","title":"Create and save patient records","text":"<pre><code>from datetime import date, datetime\nfrom dotenv import load_dotenv\nimport os\nfrom hacs_models import Patient, HumanName, ContactPoint, Address, Actor, Observation, CodeableConcept, Quantity\nfrom hacs_persistence.adapter import create_postgres_adapter\n\n# Ensure environment is loaded and mapped for HACS\nload_dotenv()\nos.environ.setdefault(\"HACS_DATABASE_URL\", os.getenv(\"DATABASE_URL\", \"\"))\n\nasync def save_patient_and_observation() -&gt; dict:\n    # Build resources\n    patient = Patient(\n        full_name=\"Carlos Miguel Fernandez\",\n        name=[HumanName(use=\"official\", family=\"Fernandez\", given=[\"Carlos\", \"Miguel\"])],\n        gender=\"male\",\n        birth_date=date(1978, 12, 3),\n        active=True,\n        telecom=[ContactPoint(system=\"phone\", value=\"+1-555-0198\", use=\"mobile\")],\n        address=[Address(use=\"home\", line=[\"456 Pine Avenue\"], city=\"Houston\", state=\"TX\", postal_code=\"77001\")],\n    )\n\n    observation = Observation(\n        status=\"final\",\n        category=[CodeableConcept(text=\"Vital Signs\", coding=[{\"system\": \"http://terminology.hl7.org/CodeSystem/observation-category\", \"code\": \"vital-signs\", \"display\": \"Vital Signs\"}])],\n        code=CodeableConcept(text=\"Blood Pressure\", coding=[{\"system\": \"http://loinc.org\", \"code\": \"85354-9\", \"display\": \"Blood pressure panel\"}]),\n        subject=f\"Patient/{patient.id}\",\n        effective_date_time=datetime.now(),\n    )\n    observation.set_quantity_value(118, \"mmHg\", system=\"http://unitsofmeasure.org\")\n    observation.add_note(\"Systolic 118 mmHg; Diastolic 76 mmHg\")\n\n    # Save using async adapter with a valid audit actor\n    adapter = await create_postgres_adapter()\n    author = Actor(name=\"db-writer\", role=\"system\", permissions=[\"patient:write\", \"observation:write\"])  # type: ignore[arg-type]\n\n    saved_patient = await adapter.save(patient, author)\n    saved_obs = await adapter.save(observation, author)\n\n    # Read back patient to confirm\n    read_back = await adapter.read(Patient, saved_patient.id, author)\n\n    return {\n        \"patient_id\": saved_patient.id,\n        \"observation_id\": saved_obs.id,\n        \"patient_name\": read_back.full_name,\n        \"saved_at\": saved_patient.created_at.isoformat(),\n    }\n\nimport asyncio\nresult = asyncio.run(save_patient_and_observation())\nprint(\"\u2705 Patient &amp; Observation persisted:\")\nprint(f\"  Patient ID: {result['patient_id']}\")\nprint(f\"  Observation ID: {result['observation_id']}\")\nprint(f\"  Name: {result['patient_name']}\")\nprint(f\"  Timestamp: {result['saved_at']}\")\n</code></pre> <p>Output: <pre><code>\u2705 Patient &amp; Observation persisted:\n  Patient ID: patient-704ac73d\n  Observation ID: observation-f7db7a5d\n  Name: Carlos Miguel Fernandez\n  Timestamp: 2025-08-19T19:38:00.292553+00:00\n</code></pre></p>"},{"location":"how-to/connect_postgres/#query-patient-records","title":"Query patient records","text":"<pre><code>from hacs_tools.domains.database import read_resource\n\n@require_permission(\"patient:read\")\nasync def get_patient_by_id(patient_id: str, **kwargs) -&gt; dict:\n    \"\"\"Retrieve patient record with authentication check.\"\"\"\n    # Query database using HACS tools\n    read_result = read_resource(\n        resource_id=patient_id,\n        resource_type=\"Patient\",\n        actor_id=kwargs.get(\"claims\", {}).get(\"user_id\")\n    )\n\n    if not read_result.success:\n        raise Exception(f\"Failed to read patient {patient_id}: {read_result.message}\")\n\n    patient_data = read_result.data[\"resource\"]\n\n    return {\n        \"id\": patient_data[\"id\"],\n        \"resource_type\": patient_data[\"resource_type\"],\n        \"full_name\": patient_data[\"full_name\"],\n        \"gender\": patient_data[\"gender\"],\n        \"birth_date\": str(patient_data[\"birth_date\"]),\n        \"active\": patient_data[\"active\"],\n        \"retrieved_at\": datetime.now().isoformat(),\n        \"retrieved_by\": kwargs.get(\"claims\", {}).get(\"user_id\"),\n        \"version\": patient_data.get(\"version\", \"1.0.0\")\n    }\n\n# Retrieve the patient\npatient_record = await get_patient_by_id(\n    patient_result[\"patient_id\"],\n    token=provider_token,\n    claims=provider_claims\n)\n\nprint(\"\u2705 Patient Retrieved:\")\nprint(f\"  ID: {patient_record['id']}\")\nprint(f\"  Name: {patient_record['full_name']}\")\nprint(f\"  Retrieved by: {patient_record['retrieved_by']}\")\nprint(f\"  Active: {patient_record['active']}\")\n</code></pre> <p>Output: <pre><code>\u2705 Patient Retrieved:\n  ID: patient-demo-80200\n  Name: Carlos Miguel Fernandez\n  Retrieved by: dr_martinez\n  Version: 1.0.0\n  Active: True\n</code></pre></p>"},{"location":"how-to/connect_postgres/#next-steps","title":"Next steps","text":"<p>Now that you have a configured database with authenticated actors, you can:</p> <ul> <li>Extract Structured HACS Models: Use LLM extraction to create clinical resources from text</li> <li>Validate HACS Models: Ensure clinical data quality and FHIR compliance</li> <li>Visualize Resources: Create rich visualizations of patient data and clinical records</li> </ul>"},{"location":"how-to/create_langgraph_agent/","title":"Create a simple agent with LangGraph","text":"<pre><code># Prereq: uv pip install -U hacs-utils[langchain,langgraph]\nfrom langgraph.prebuilt import create_react_agent\nfrom hacs_utils.integrations.langchain.tools import langchain_tools\n\n# Provision tools\ntools = langchain_tools()\n\n# Minimal agent\nagent = create_react_agent(model=\"anthropic:claude-3-7-sonnet-latest\", tools=tools,\n                           prompt=\"You are a healthcare assistant using HACS tools.\")\nprint(\"Agent ready with\", len(tools), \"tools\")\n</code></pre>"},{"location":"how-to/creating_private_registry/","title":"Creating a private Registry","text":""},{"location":"how-to/creating_private_registry/#creating-a-private-registry","title":"Creating a private Registry","text":"<p>This guide shows how an organization can create a private registry of custom resources using decorators and a migration step. We will:</p> <ul> <li>Register a composed, organization-specific resource (PatientSnapshot)</li> <li>Discover and import plugin modules</li> <li>Persist the catalog (resources and tools) to the database</li> </ul>"},{"location":"how-to/creating_private_registry/#prerequisites","title":"Prerequisites","text":"<ul> <li>Environment: Python 3.11+ with <code>uv</code></li> <li>Set <code>OPENAI_API_KEY</code> and database credentials in <code>.env</code></li> <li>Packages installed (editable): <code>hacs-models</code>, <code>hacs-registry</code>, <code>hacs-persistence</code>, <code>hacs-utils</code>, <code>hacs-core</code>, <code>hacs-tools</code></li> </ul>"},{"location":"how-to/creating_private_registry/#1-define-and-register-an-organization-specific-resource","title":"1) Define and register an organization-specific resource","text":"<p>Create a module for your private package, e.g. <code>org_acme/resources.py</code>:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import Optional\n\nfrom hacs_models import BaseResource, Patient, Observation\nfrom hacs_registry import register_resource, ResourceCategory, ResourceStatus\n\n\n@register_resource(\n    name=\"PatientSnapshot\",\n    version=\"1.0.0\",\n    description=\"Organization-specific snapshot composed from Patient and key Observations\",\n    category=ResourceCategory.CLINICAL,\n    status=ResourceStatus.PUBLISHED,\n    tags=[\"org:acme\", \"snapshot\"],\n)\nclass PatientSnapshot(BaseResource):\n    \"\"\"A compact view combining demographics and vitals.\"\"\"\n\n    resource_type: str = Field(default=\"PatientSnapshot\")\n\n    # Derived fields from Patient\n    patient_id: str\n    full_name: str\n    gender: Optional[str] = None\n    birth_date: Optional[str] = None\n\n    # Composed fields from recent Observations\n    latest_systolic_bp: Optional[float] = None\n    latest_diastolic_bp: Optional[float] = None\n    latest_heart_rate: Optional[float] = None\n    latest_weight_kg: Optional[float] = None\n\n    # Organization-specific extensions\n    risk_band: Optional[str] = Field(default=None, description=\"Internal risk band A/B/C/D\")\n\n    @classmethod\n    def from_resources(\n        cls,\n        patient: Patient,\n        observations: list[Observation],\n        *,\n        risk_band: Optional[str] = None,\n    ) -&gt; \"PatientSnapshot\":\n        # pick vitals\n        def get_obs(code: str) -&gt; Optional[Observation]:\n            for obs in observations:\n                if getattr(obs, \"code\", \"\") == code:\n                    return obs\n            return None\n\n        sbp = get_obs(\"systolic-bp\")\n        dbp = get_obs(\"diastolic-bp\")\n        hr = get_obs(\"heart-rate\")\n        wt = get_obs(\"weight\")\n\n        return cls(\n            patient_id=patient.id,\n            full_name=getattr(patient, \"full_name\", None) or f\"{patient.name.given} {patient.name.family}\",\n            gender=getattr(patient, \"gender\", None),\n            birth_date=getattr(patient, \"birth_date\", None),\n            latest_systolic_bp=getattr(sbp, \"value\", None),\n            latest_diastolic_bp=getattr(dbp, \"value\", None),\n            latest_heart_rate=getattr(hr, \"value\", None),\n            latest_weight_kg=getattr(wt, \"value\", None),\n            risk_band=risk_band,\n        )\n</code></pre> <p>Notes: - The <code>@register_resource</code> decorator enqueues registration for a migration step; it does not write to DB immediately. - The classmethod <code>from_resources</code> shows composing variables from existing resources and extending with custom fields.</p>"},{"location":"how-to/creating_private_registry/#2-discover-and-import-your-private-module","title":"2) Discover and import your private module","text":"<p>Export your module path through <code>HACS_PLUGIN_PACKAGES</code> to auto-import it during migration:</p> <pre><code>uv run --env-file .env -- bash -lc 'export HACS_PLUGIN_PACKAGES=\"org_acme.resources\"; python - &lt;&lt;PY\nimport asyncio, os\nfrom hacs_registry import register_catalog\n\nasync def main():\n    report = await register_catalog(persist=False)\n    print(\"registered_resources:\", report.get(\"resources\"))\n    print(\"discovered_tools:\", report.get(\"tools\"))\n\nasyncio.run(main())\nPY'\n</code></pre> <p>Expected output (counts will vary):</p> <pre><code>registered_resources: 1\ndiscovered_tools: 75\n</code></pre>"},{"location":"how-to/creating_private_registry/#3-persist-your-private-catalog-to-the-database","title":"3) Persist your private catalog to the database","text":"<p>To persist to PostgreSQL, configure the registry persistence integration using <code>hacs-persistence</code>:</p> <pre><code>import asyncio\nfrom dotenv import load_dotenv\nload_dotenv()\n\nfrom hacs_persistence.adapter import create_postgres_adapter\nfrom hacs_registry import get_registry_integration, register_catalog\n\nasync def main():\n    adapter = await create_postgres_adapter()\n    integ = get_registry_integration()\n    integ.configure_persistence(adapter)\n\n    report = await register_catalog(persist=True)\n    print(\"persisted:\", report.get(\"persisted\"))\n\nasyncio.run(main())\n</code></pre> <p>Example output:</p> <pre><code>persisted: True\n</code></pre>"},{"location":"how-to/creating_private_registry/#4-use-your-private-resource-in-code","title":"4) Use your private resource in code","text":"<p>After migration, the resource is available via the registry:</p> <pre><code>from hacs_registry import get_global_registry\n\nreg = get_global_registry()\nsnapshots = reg.find_resources(name_pattern=\"PatientSnapshot\")\nprint(len(snapshots) &gt; 0)\n</code></pre>"},{"location":"how-to/creating_private_registry/#next-steps","title":"Next steps","text":"<ul> <li>Use <code>PatientSnapshot.from_resources(patient, observations, risk_band=\"B\")</code> in your pipelines.</li> <li>Register additional private resources with <code>@register_resource</code> and persist them with <code>register_catalog</code>.</li> <li>Combine with \u201cPersist Resources\u201d to save instances and \u201cUse &amp; Register Tools\u201d to expose operations over snapshots.</li> </ul>"},{"location":"how-to/extract_annotations/","title":"Generate structured data","text":""},{"location":"how-to/extract_annotations/#create-hacs-records-from-unstructured-data","title":"Create HACS records from unstructured data","text":"<p>This guide shows how to extract clinical data as typed HACS Resources.</p>"},{"location":"how-to/extract_annotations/#about-annotateddocument-composition-and-document","title":"About AnnotatedDocument, Composition, and Document","text":"<ul> <li><code>AnnotatedDocument</code> is a working container for raw clinical text plus intermediate artifacts (extractions, spans). It\u2019s ideal for grounded extraction and analysis.</li> <li><code>Composition</code>/<code>Document</code> represent the finalized clinical note. Use them to assemble the human-readable record from validated structured resources and/or grounded spans. The <code>Composition</code> holds metadata (title, type, subject, status, confidentiality) and hierarchical sections; <code>Document</code> overlays convenience utilities on top of <code>Composition</code>.</li> <li>Typical flow: start with <code>AnnotatedDocument</code> \u2192 extract typed models with <code>extract()</code> (and citations when needed) \u2192 write the final note as a <code>Document</code> with sections summarizing or referencing those models.</li> </ul> <p>Prerequisites:</p> <ul> <li><code>uv pip install -U hacs-utils[langchain]</code></li> <li>An LLM provider (OpenAI, Anthropic, or a client exposing <code>ainvoke</code>/<code>invoke</code>)</li> </ul>"},{"location":"how-to/extract_annotations/#extract-typed-hacs-models-from-annotateddocument","title":"Extract typed HACS models from AnnotatedDocument","text":"<p>Let's start with the recommended approach: extracting medication information as validated HACS models from clinical text in an AnnotatedDocument.</p>"},{"location":"how-to/extract_annotations/#step-1-import-and-setup","title":"Step 1: Import and setup","text":"<pre><code>from dotenv import load_dotenv\nload_dotenv()  # Load API keys from .env file\n\nimport asyncio\nfrom hacs_models import MedicationRequest, AnnotatedDocument, Observation, Condition\nfrom hacs_models.annotation import FormatType\nfrom hacs_utils.structured import extract\nfrom hacs_utils.visualization import visualize_annotations, annotations_to_markdown\nfrom langchain_openai import ChatOpenAI\n</code></pre>"},{"location":"how-to/extract_annotations/#step-2-create-an-annotateddocument","title":"Step 2: Create an AnnotatedDocument","text":"<pre><code># Start with clinical text in an AnnotatedDocument\nclinical_text = \"\"\"\nPatient was prescribed Lisinopril 10mg daily for hypertension management.\nStarted Metformin 500mg twice daily for type 2 diabetes control.\nContinue current Aspirin 81mg daily for cardioprotection.\n\"\"\".strip()\n\n# Create the annotated document (this could come from a previous annotation step)\nannotated_doc = AnnotatedDocument(\n    text=clinical_text,\n    document_id=\"clinical_note_001\"\n)\n\nprint(f\"\u2713 Created AnnotatedDocument:\")\nprint(f\"  ID: {annotated_doc.document_id}\")\nprint(f\"  Text length: {len(annotated_doc.text)} characters\")\nprint(f\"  Content preview: \\\"{annotated_doc.text[:50]}...\\\"\")\n</code></pre> <p>Output: <pre><code>\u2713 Created AnnotatedDocument:\n  ID: clinical_note_001\n  Text length: 196 characters\n  Content preview: \"Patient was prescribed Lisinopril 10mg daily for h...\"\n</code></pre></p>"},{"location":"how-to/extract_annotations/#step-3-define-hacs-model-schemas-and-introspect-fields","title":"Step 3: Define HACS model schemas and introspect fields","text":"<pre><code>from hacs_utils.visualization import to_markdown\n\n# Use to_markdown to show HACS model specifications with field descriptions\nprint(to_markdown(MedicationRequest))\n</code></pre> <p>Output: <pre><code>#### MedicationRequest Specifications\n\n**Scope &amp; Usage**\n\nOrder or authorization for supply and administration of medication to a patient. Represents prescriptions, medication orders, and medication authorizations with detailed dosing instructions, quantity, refills, and substitution rules. Supports complex dosing regimens, conditional orders, and medication reconciliation workflows. Includes prescriber information, pharmacy instructions, and administration context.\n\n**Boundaries**\n\nDo not use for actual medication taking/administration (use MedicationStatement/MedicationAdministration), medication definitions (use Medication), or medication dispensing (use MedicationDispense). Focus on the intent/order, not the fulfillment. Do not use for medication history or adherence tracking.\n\n**Relationships**\n\n- References: Patient via subject, Practitioner via requester, Medication via medicationReference, Encounter via encounter\n- Based on: CarePlan via basedOn, ServiceRequest via basedOn\n- Supports: MedicationDispense.authorizingPrescription, MedicationAdministration.request\n- Groups: priorPrescription (medication changes), groupIdentifier (related orders)\n\n**References**\n\n- Patient.subject\n- Practitioner.requester\n- Medication.medicationReference\n- Encounter.encounter\n\n**Tools**\n\n- validate_prescription_tool\n- route_prescription_tool\n- check_contraindications_tool\n- check_drug_interactions_tool\n\n| Field | Type | Description |\n|---|---|---|\n| status | &lt;enum 'MedicationRequestStatus'&gt; | Status of the medication request (active, completed, cancelled, etc.) |\n| intent | &lt;enum 'MedicationRequestIntent'&gt; | Intent of the medication request (proposal, plan, order, etc.) |\n| medication_codeable_concept | hacs_models.observation.CodeableConcept | Medication to be taken (coded) |\n| dosage_instruction | list[hacs_models.medication_request.Dosage] | How medication should be taken |\n| subject | &lt;class 'str'&gt; | Who or group medication request is for |\n[... additional fields truncated for brevity ...]\n</code></pre></p>"},{"location":"how-to/extract_annotations/#step-4-configure-the-llm","title":"Step 4: Configure the LLM","text":"<pre><code># Initialize the language model for HACS model extraction\nfrom langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(model=\"gpt-5-mini-2025-08-07\")\n\nprint(\"\u2713 LLM configured for HACS model extraction\")\nprint(f\"Model: {llm.model_name}\")\n</code></pre> <p>Output: <pre><code>\u2713 LLM configured for HACS model extraction\nModel: gpt-5-mini-2025-08-07\n</code></pre></p>"},{"location":"how-to/extract_annotations/#step-5-extract-structured-hacs-models","title":"Step 5: Extract structured HACS models","text":"<pre><code>from hacs_utils.visualization import to_markdown\n\n# One-call structured extraction using LangChain with descriptive schema context\nmedication_requests = asyncio.run(extract(\n    llm_provider=llm,\n    prompt=f\"Extract MedicationRequest objects from this clinical text:\\n\\n{annotated_doc.text}\",\n    output_model=MedicationRequest,\n    many=True,\n    max_items=5,\n    format_type=FormatType.JSON,\n    strict=False,\n    max_retries=3,\n    use_descriptive_schema=True,\n))\n\nprint(to_markdown(medication_requests, title=\"Example Extraction Record\"))\n</code></pre> <p>Output: <pre><code>### Example Extraction Record\n\n#### MedicationRequest\n\n| Field | Value |\n|---|---|\n| resource_type | MedicationRequest |\n| id | medicationrequest-093872e8 |\n| status | active |\n| subject | Patient/123 |\n| dosage_instruction | [] |\n| intent | order |\n| created_at | 2025-08-20T02:24:30.881805Z |\n| updated_at | 2025-08-20T02:24:30.881814Z |\n</code></pre></p> <p>What happens during HACS model extraction:</p> <ol> <li>HACS descriptive schema provides field descriptions, enum values, and examples to the LLM</li> <li>LangChain's structured output (function calling) ensures strict schema adherence</li> <li>The AnnotatedDocument text is processed with rich schema context</li> <li>LLM returns valid HACS model instances with proper enum values (status=active, intent=order)</li> <li>Each instance has full BaseResource functionality and FHIR compliance</li> <li>Result is a list of validated HACS resources ready for persistence</li> </ol> <p>Provider integrations: This example uses LangChain with OpenAI. For other approaches and adapters, see the Use &amp; Register Tools guide.</p>"},{"location":"how-to/extract_annotations/#extract-multiple-resource-types","title":"Extract multiple resource types","text":"<p>You can call <code>extract()</code> multiple times to build a bundle of different resource types from the same text. Example for <code>MedicationRequest</code> and <code>Condition</code>:</p> <pre><code>from hacs_models import (\n    MedicationRequest, Condition,\n    MedicationRequestStatus, MedicationRequestIntent,\n)\nfrom hacs_models.types import ConditionClinicalStatus, ConditionVerificationStatus\n\nmed_prompt = f\"\"\"\nExtract MedicationRequest objects for each medication order in the text.\n- Set medication_codeable_concept.text and dosage_instruction[0].text\n- Do not invent fields you cannot infer.\nText:\n{annotated_doc.text}\n\"\"\".strip()\n\ncond_prompt = f\"\"\"\nExtract Condition objects for each condition mentioned.\n- Set code.text (e.g., \"hypertension\")\n- Set clinical_status and verification_status\nText:\n{annotated_doc.text}\n\"\"\".strip()\n\nmeds = asyncio.run(extract(\n    llm_provider=llm,\n    prompt=med_prompt,\n    output_model=MedicationRequest,\n    many=True,\n    use_descriptive_schema=True,\n    injected_fields={\n        \"status\": MedicationRequestStatus.ACTIVE,\n        \"intent\": MedicationRequestIntent.ORDER,\n        \"subject\": \"Patient/123\",\n    },\n    strict=False,\n))\n\nconds = asyncio.run(extract(\n    llm_provider=llm,\n    prompt=cond_prompt,\n    output_model=Condition,\n    many=True,\n    use_descriptive_schema=True,\n    injected_fields={\n        \"clinical_status\": ConditionClinicalStatus.ACTIVE,\n        \"verification_status\": ConditionVerificationStatus.CONFIRMED,\n        \"subject\": \"Patient/123\",\n    },\n    strict=False,\n))\n\nprint(to_markdown(meds, title=\"Extracted MedicationRequests\"))\nprint()\nprint(to_markdown(conds, title=\"Extracted Conditions\"))\n</code></pre> <p>Output: <pre><code>### Extracted MedicationRequests\n\n#### MedicationRequest\n\n| Field | Value |\n|---|---|\n| resource_type | MedicationRequest |\n| id | medicationrequest-093872e8 |\n| status | active |\n| subject | Patient/123 |\n| dosage_instruction | [] |\n| intent | order |\n| created_at | 2025-08-20T02:24:30.881805Z |\n| updated_at | 2025-08-20T02:24:30.881814Z |\n\n### Extracted Conditions\n\n#### Condition\n\n| Field | Value |\n|---|---|\n| resource_type | Condition |\n| id | condition-1 |\n| status | active |\n| code | hypertension |\n| subject | Patient/123 |\n| created_at | 2025-08-20T00:00:00Z |\n| updated_at | 2025-08-20T00:00:00Z |\n\n#### Condition\n\n| Field | Value |\n|---|---|\n| resource_type | Condition |\n| id | condition-2 |\n| status | active |\n| code | type 2 diabetes |\n| subject | Patient/123 |\n| created_at | 2025-08-20T00:00:00Z |\n| updated_at | 2025-08-20T00:00:00Z |\n</code></pre></p>"},{"location":"how-to/extract_annotations/#create-a-clinical-document-from-extracted-resources","title":"Create a clinical document from extracted resources","text":"<p>Once you have extracted HACS models, assemble them into a structured clinical document:</p> <pre><code>from hacs_models import Document\nfrom hacs_models.types import DocumentType, DocumentStatus, ConfidentialityLevel\n\n# Create a structured clinical document (preliminary until sections are added)\nclinical_doc = Document(\n    title=\"Medication Review Note\",\n    document_type=DocumentType.PROGRESS_NOTE,\n    status=DocumentStatus.PRELIMINARY,\n    subject_name=\"Patient\",\n    confidentiality=ConfidentialityLevel.NORMAL\n)\n\n# Add a medications section summarizing the extracted data\nmed_summary = f\"Extracted {len(medication_requests)} medication orders:\"\nfor mr in medication_requests:\n    med_name = mr.medication_codeable_concept.text if hasattr(mr.medication_codeable_concept, 'text') else 'Unknown'\n    dosage = mr.dosage_instruction[0].text if mr.dosage_instruction and hasattr(mr.dosage_instruction[0], 'text') else 'No dosage specified'\n    med_summary += f\"\\n- {med_name}: {dosage} ({mr.status})\"\n\nclinical_doc.add_section(\n    title=\"Current Medications\",\n    text=med_summary,\n    code=\"10160-0\",  # LOINC code for medication list\n    metadata={\"extracted_resource_count\": len(medication_requests)}\n)\n\n# Update status to final after adding sections\nclinical_doc.status = DocumentStatus.FINAL\n\nprint(f\"\u2713 Created clinical document: {clinical_doc.title}\")\nprint(f\"  Status: {clinical_doc.status}\")\nprint(f\"  Sections: {len(clinical_doc.sections)}\")\nprint(f\"  Word count: {clinical_doc.get_word_count()}\")\n</code></pre> <p>Output: <pre><code>\u2713 Created clinical document: Medication Review Note\n  Status: DocumentStatus.FINAL\n  Sections: 1\n  Word count: 47\n</code></pre></p>"},{"location":"how-to/extract_annotations/#next-steps","title":"Next steps","text":"<p>Now that you have extracted HACS models and assembled a clinical document, you can:</p> <ul> <li>Validate models: Examine structure and verify clinical data quality</li> <li>Persist resources: Save models to database with proper validation</li> <li>Visualize data: Create rich visualizations and reports</li> <li>Extract citations: Extract mentions with character positions for text analysis</li> </ul>"},{"location":"how-to/extract_annotations/#alternative-approaches","title":"Alternative approaches","text":""},{"location":"how-to/extract_annotations/#extract-with-citations","title":"Extract with citations","text":"<p>For cases where you need precise character positions instead of structured models, see the Extract with citations guide.</p>"},{"location":"how-to/grounded_extraction/","title":"Extract citations","text":""},{"location":"how-to/grounded_extraction/#extract-with-citations","title":"Extract with citations","text":"<p>Use a minimal multi-resource example to extract typed HACS resources (MedicationRequest and Condition) from the same clinical text. No mocks; runs with your real API key.</p> <p>Prerequisites: - <code>uv pip install -U \"hacs-utils[langchain]\"</code> - <code>OPENAI_API_KEY</code> in your <code>.env</code></p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n\nimport asyncio\nfrom langchain_openai import ChatOpenAI\nfrom hacs_utils.structured import extract\nfrom hacs_utils.visualization import to_markdown\nfrom hacs_models import (\n    MedicationRequest, Condition,\n    MedicationRequestStatus, MedicationRequestIntent,\n    ConditionClinicalStatus, ConditionVerificationStatus,\n)\n\nclinical_text = (\n    \"Patient was prescribed Lisinopril 10mg daily for hypertension management.\\n\"\n    \"Started Metformin 500mg twice daily for type 2 diabetes control.\\n\"\n    \"Continue current Aspirin 81mg daily for cardioprotection.\"\n)\n\nllm = ChatOpenAI(model=\"gpt-5-mini-2025-08-07\")\n\nmed_prompt = f\"\"\"\nExtract MedicationRequest objects for each medication order in the text.\n- Set medication_codeable_concept.text and dosage_instruction[0].text\n- Do not invent fields you cannot infer.\nText:\n{clinical_text}\n\"\"\".strip()\n\ncond_prompt = f\"\"\"\nExtract Condition objects for each condition mentioned.\n- Set code.text (e.g., \"hypertension\")\n- Set clinical_status and verification_status\nText:\n{clinical_text}\n\"\"\".strip()\n\nmeds = asyncio.run(extract(\n    llm_provider=llm,\n    prompt=med_prompt,\n    output_model=MedicationRequest,\n    many=True,\n    use_descriptive_schema=True,\n    injected_fields={\n        \"status\": MedicationRequestStatus.ACTIVE,\n        \"intent\": MedicationRequestIntent.ORDER,\n        \"subject\": \"Patient/123\",\n    },\n    strict=False,\n))\n\nconds = asyncio.run(extract(\n    llm_provider=llm,\n    prompt=cond_prompt,\n    output_model=Condition,\n    many=True,\n    use_descriptive_schema=True,\n    injected_fields={\n        \"clinical_status\": ConditionClinicalStatus.ACTIVE,\n        \"verification_status\": ConditionVerificationStatus.CONFIRMED,\n        \"subject\": \"Patient/123\",\n    },\n    strict=False,\n))\n\nprint(to_markdown(meds, title=\"Extracted MedicationRequests\"))\nprint()\nprint(to_markdown(conds, title=\"Extracted Conditions\"))\n</code></pre> <p>Output: <pre><code>### Extracted MedicationRequests\n\n#### MedicationRequest\n\n| Field | Value |\n|---|---|\n| resource_type | MedicationRequest |\n| id | medicationrequest-093872e8 |\n| status | active |\n| subject | Patient/123 |\n| dosage_instruction | [] |\n| intent | order |\n| created_at | 2025-08-20T02:24:30.881805Z |\n| updated_at | 2025-08-20T02:24:30.881814Z |\n\n### Extracted Conditions\n\n#### Condition\n\n| Field | Value |\n|---|---|\n| resource_type | Condition |\n| id | condition-1 |\n| status | active |\n| code | hypertension |\n| subject | Patient/123 |\n| created_at | 2025-08-20T00:00:00Z |\n| updated_at | 2025-08-20T00:00:00Z |\n\n#### Condition\n\n| Field | Value |\n|---|---|\n| resource_type | Condition |\n| id | condition-2 |\n| status | active |\n| code | type 2 diabetes |\n| subject | Patient/123 |\n| created_at | 2025-08-20T00:00:00Z |\n| updated_at | 2025-08-20T00:00:00Z |\n</code></pre></p>"},{"location":"how-to/grounded_extraction/#visualize-annotations-with-highlighting","title":"Visualize annotations with highlighting","text":"<pre><code>from hacs_utils.visualization import annotations_to_markdown, visualize_annotations\n\n# Generate markdown with highlighted spans\nprint(\"Grounded Mentions Visualization:\")\nmention_table = annotations_to_markdown(annotated_doc, context_chars=30)\nprint(mention_table)\n\n# Create HTML visualization with color coding\nhtml_output = visualize_annotations(\n    annotated_doc,\n    show_legend=True  # Show color legend\n)\n\nprint(f\"\\n\u2713 HTML visualization created ({len(html_output)} characters)\")\nprint(\"Features: Color-coded spans, hover tooltips, extraction legend\")\n</code></pre> <p>Output: <pre><code>Grounded Mentions Visualization:\n| Class | Span | Snippet |\n|---|---|---|\n| Medication Mention | [23-44] | \u2026 Patient was prescribed **Lisinopril 10mg daily** for hypertension management. \u2026 |\n| Medication Mention | [82-109] | \u2026 Started **Metformin 500mg twice daily** for type 2 diabetes control. \u2026 |\n| Medication Mention | [156-174] | \u2026 Continue current **Aspirin 81mg daily** for cardioprotection. \u2026 |\n\n\u2713 HTML visualization created (1919 characters)\nFeatures: Color-coded spans, hover tooltips, extraction legend\n</code></pre></p>"},{"location":"how-to/manage_context_tools/","title":"Use agentic tools to manage context","text":"<p>Step-by-step examples to write/read agent scratchpad, summarize/prune state, and work with resource field selection.</p>"},{"location":"how-to/manage_context_tools/#1-setup","title":"1) Setup","text":"<pre><code>from dotenv import load_dotenv\nload_dotenv(dotenv_path=\".env\", override=True)\n</code></pre>"},{"location":"how-to/manage_context_tools/#2-create-patient-record","title":"2) Create Patient record","text":"<pre><code>from hacs_models import Patient\nfrom hacs_utils.visualization import resource_to_markdown\n\n# Create structured patient with clinical context\npatient = Patient(\n    full_name=\"Jane Doe\", \n    birth_date=\"1990-01-01\", \n    gender=\"female\",\n    agent_context={\n        \"clinical_notes\": \"Presents with hypertension. BP 128/82, HR 72.\",\n        \"extracted_from\": \"clinical_note_2025_01_24\"\n    }\n)\nprint(\"[patient] created:\", patient.full_name, patient.gender)\n\n# Always visualize structured records (full render)\nmd = resource_to_markdown(patient, include_json=False)\nprint(md)\n</code></pre> <pre><code>[patient] created: Jane Doe female\n\n#### Patient\n\n| Field | Value |\n|---|---|\n| resource_type | Patient |\n| id | patient-b1a81c01 |\n| status | active |\n| full_name | Jane Doe |\n| gender | female |\n| birth_date | 1990-01-01 |\n| created_at | 2025-08-18T22:36:50.762540Z |\n| updated_at | 2025-08-18T22:36:50.762544Z |\n</code></pre>"},{"location":"how-to/manage_context_tools/#3-write-to-scratchpad","title":"3) Write to scratchpad","text":"<p>Working with multiple entries, filtering, and visualization:</p> <pre><code># Write multiple clinical scratchpad entries\nentries = [\n    \"Patient Jane Doe presents with diabetes follow-up. HbA1c improved from 8.2% to 7.1%\",\n    \"Current medications: Metformin 1000mg BID, Insulin glargine 20 units daily\", \n    \"BP 128/82, HR 72, weight stable at 165 lbs\",\n    \"Patient reports good medication adherence, occasional hypoglycemic episodes\",\n    \"Plan: Continue current regimen, schedule nutrition consult\"\n]\n\nprint(\"=== Writing scratchpad entries ===\")\nfor i, content in enumerate(entries, 1):\n    w = write_scratchpad(content=content)\n    print(f\"Entry {i} written: {w.success}\")\n\n# Read all scratchpad entries\nprint(\"\\n=== Reading all scratchpad entries ===\")\nr = read_scratchpad()\nprint(f\"Read success: {r.success}\")\nif r.success and r.data:\n    all_entries = r.data.get('entries', [])\n    print(f\"Total entries found: {len(all_entries)}\")\n\n    # Show details of recent entries\n    for i, entry in enumerate(all_entries[-3:], 1):\n        print(f\"\\nEntry {i}:\")\n        print(f\"  ID: {entry.get('id', 'N/A')[:8]}...\")\n        print(f\"  Agent: {entry.get('agent_id', 'system')}\")\n        print(f\"  Content: {entry.get('content', 'N/A')[:60]}...\")\n        print(f\"  Created: {entry.get('created_at', 'N/A')}\")\n\n# Filter entries by content keyword\nprint(\"\\n=== Selecting entries by content filter ===\")\nr_med = read_scratchpad(filter_content=\"medication\")\nif r_med.success and r_med.data:\n    med_entries = r_med.data.get('entries', [])\n    print(f\"Medication-related entries: {len(med_entries)}\")\n    for entry in med_entries:\n        print(f\"  - {entry.get('content', '')[:70]}...\")\n\n# Visualize latest entry\nprint(\"\\n=== Latest scratchpad entry visualization ===\")\nif r.success and r.data and r.data.get('entries'):\n    latest_entry = r.data['entries'][-1]\n    from hacs_models.agent_resources import AgentScratchpadEntry\n    entry_obj = AgentScratchpadEntry(\n        id=latest_entry.get('id'),\n        agent_id=latest_entry.get('agent_id', 'system'),\n        content=latest_entry.get('content', ''),\n        metadata=latest_entry.get('metadata', {}),\n        created_at=latest_entry.get('created_at')\n    )\n    print(resource_to_markdown(entry_obj))\n</code></pre> <pre><code>=== Writing scratchpad entries ===\nEntry 1 written: True\nEntry 2 written: True\nEntry 3 written: True\nEntry 4 written: True\nEntry 5 written: True\n\n=== Reading all scratchpad entries ===\nRead success: True\nTotal entries found: 5\n\nEntry 1:\n  ID: a1b2c3d4...\n  Agent: system\n  Content: BP 128/82, HR 72, weight stable at 165 lbs...\n  Created: 2025-01-24T15:32:15Z\n\nEntry 2:\n  ID: e5f6g7h8...\n  Agent: system\n  Content: Patient reports good medication adherence, occasional hyp...\n  Created: 2025-01-24T15:32:16Z\n\nEntry 3:\n  ID: i9j0k1l2...\n  Agent: system\n  Content: Plan: Continue current regimen, schedule nutrition consult...\n  Created: 2025-01-24T15:32:17Z\n\n=== Selecting entries by content filter ===\nMedication-related entries: 2\n  - Current medications: Metformin 1000mg BID, Insulin glargine 20 unit...\n  - Patient reports good medication adherence, occasional hypoglyce...\n\n=== Latest scratchpad entry visualization ===\n\n#### AgentScratchpadEntry\n\n| Field | Value |\n|-------|-------|\n| **id** | i9j0k1l2-m3n4-o5p6-q7r8-s9t0u1v2w3x4 |\n| **agent_id** | system |\n| **content** | Plan: Continue current regimen, schedule nutrition consult |\n| **metadata** | {'session_id': '2025-01-24-session-456', 'created_at': '2025-01-24T15:32:17Z'} |\n| **created_at** | 2025-01-24T15:32:17Z |\n</code></pre>"},{"location":"how-to/manage_context_tools/#4-summarize-and-prune-state","title":"4) Summarize and prune state","text":"<pre><code>from hacs_tools.domains.agents import summarize_state, prune_state\n\n# Create realistic agent state with clinical context\nrealistic_state = {\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"Review patient Jane Doe's diabetes management\"},\n        {\"role\": \"assistant\", \"content\": \"I'll analyze the patient's current medications and glucose levels\"},\n        {\"role\": \"user\", \"content\": \"Focus on HbA1c trends and medication adherence\"},\n        {\"role\": \"assistant\", \"content\": \"Based on the records, HbA1c has improved from 8.2% to 7.1%\"},\n        {\"role\": \"user\", \"content\": \"What adjustments should we consider?\"}\n    ],\n    \"tools\": [\"pin_resource\", \"save_resource\", \"read_resource\", \"search_memories\", \"create_memory\"],\n    \"context\": {\n        \"patient_id\": \"patient-jane-doe-123\",\n        \"encounter_type\": \"diabetes_followup\", \n        \"current_medications\": [\"metformin 1000mg BID\", \"insulin glargine 20 units\"],\n        \"recent_labs\": {\"hba1c\": 7.1, \"glucose_fasting\": 126}\n    },\n    \"session_metadata\": {\n        \"session_id\": \"session-diabetes-review-456\",\n        \"actor\": \"dr_chen\",\n        \"start_time\": \"2025-01-24T10:00:00Z\"\n    }\n}\n\nprint(\"Original state:\")\nprint(f\"  Messages: {len(realistic_state['messages'])}\")\nprint(f\"  Tools: {len(realistic_state['tools'])}\")\nprint(f\"  Context keys: {list(realistic_state['context'].keys())}\")\n\n# Summarize with focus areas\ns = summarize_state(state_data=realistic_state, focus_areas=[\"context\", \"messages\"])\nprint(f\"\\n[summarize] ok: {s.success}\")\nif s.success and s.data:\n    summary = s.data.get(\"summary\", {})\n    print(\"State summary:\")\n    print(f\"  key_components: {summary.get('key_components', [])}\")\n    print(f\"  state_size: {summary.get('state_size')} chars\")\n\n# Prune (keep recent messages, essential tools, preserve context)\np = prune_state(state_data=realistic_state, keep_fields=[\"context\", \"session_metadata\"], max_messages=3, max_tools=3)\nprint(f\"\\n[prune] ok: {p.success}\")\nif p.success and p.data:\n    pruned = p.data.get(\"pruned_state\", {})\n    print(\"Pruned state:\")\n    print(f\"  keys: {sorted(pruned.keys())}\")\n    print(f\"  messages kept: {len(pruned.get('messages', []))}\")\n    print(f\"  tools kept: {len(pruned.get('tools', []))}\")\n    print(f\"  compression_ratio: {p.data.get('compression_ratio', 0):.2f}\")\n    print(f\"  context preserved: {'context' in pruned}\")\n</code></pre> <pre><code>Original state:\n  Messages: 5\n  Tools: 5\n  Context keys: ['patient_id', 'encounter_type', 'current_medications', 'recent_labs']\n\n[summarize] ok: True\nState summary:\n  key_components: ['Message history: 5 messages', 'Available tools: 5 tools', \"Context: {'patient_id': 'patient-jane-doe-123', 'encounter_type': 'diabetes_followup', 'current_medications': ['metformin 1000mg BID', 'insulin glargine 20 units'], 'recent_labs': {'hba1c': 7.1, 'glucose_f...\"]\n  state_size: 1011 chars\n\n[prune] ok: True\nPruned state:\n  keys: ['context', 'messages', 'session_metadata', 'tools']\n  messages kept: 3\n  tools kept: 3\n  compression_ratio: 0.73\n  context preserved: True\n</code></pre>"},{"location":"how-to/manage_context_tools/#5-select-fields-and-project-payload","title":"5) Select fields and project payload","text":"<pre><code>from hacs_tools.domains.modeling import pick_resource_fields, project_resource_fields\nfrom hacs_models import Patient\n\npf = pick_resource_fields(\"Patient\", [\"full_name\",\"birth_date\"]) \nprint(\"[pick_fields] ok:\", pf.success)\n\n# Visualize pick fields result\nif pf.success and pf.data:\n    schema_data = pf.data\n    print(\"Pick fields result:\")\n    print(f\"  subset_resource_name: {schema_data.get('subset_resource_name')}\")\n    print(f\"  fields: {schema_data.get('fields')}\")\n\n# Create subset using pick() directly\nPatientDemo = Patient.pick(\"full_name\", \"birth_date\")\nsubset = PatientDemo(resource_type=\"Patient\", full_name=\"Jane Doe\", birth_date=\"1990-01-01\")\nprint(f\"\\nSubset record created:\")\nprint(resource_to_markdown(subset, include_json=False))\n</code></pre> <pre><code>[pick_fields] ok: True\nPick fields result:\n  subset_resource_name: PatientSubset\n  fields: ['full_name', 'birth_date']\n\nSubset record created:\n#### PatientSubset\n\n| Field | Value |\n|---|---|\n| resource_type | Patient |\n| id | patient-subset-abc123 |\n| created_at | 2025-08-18T22:40:15.123456Z |\n| updated_at | 2025-08-18T22:40:15.123456Z |\n| full_name | Jane Doe |\n| birth_date | 1990-01-01 |\n</code></pre>"},{"location":"how-to/persist_resources/","title":"Persist Resources","text":""},{"location":"how-to/persist_resources/#persist-hacs-models-to-postgresql","title":"Persist HACS models to PostgreSQL","text":"<p>This guide saves real HACS resources (extracted via LLM) to a PostgreSQL database using the async adapter. No mocks.</p> <p>Prerequisites: - <code>uv pip install -U hacs-persistence hacs-auth hacs-models \"hacs-utils[langchain]\"</code> - <code>DATABASE_URL</code> in your <code>.env</code> (or <code>HACS_DATABASE_URL</code>)</p>"},{"location":"how-to/persist_resources/#1-extract-resources-medicationrequest-and-condition","title":"1) Extract resources (MedicationRequest and Condition)","text":"<pre><code>from dotenv import load_dotenv\nload_dotenv()\n\nimport asyncio\nfrom langchain_openai import ChatOpenAI\nfrom hacs_utils.structured import extract\nfrom hacs_models import (\n    MedicationRequest, Condition,\n    MedicationRequestStatus, MedicationRequestIntent,\n)\nfrom hacs_models.types import (\n    ConditionClinicalStatus, ConditionVerificationStatus,\n)\n\nclinical_text = (\n    \"Patient was prescribed Lisinopril 10mg daily for hypertension management.\\n\"\n    \"Started Metformin 500mg twice daily for type 2 diabetes control.\\n\"\n    \"Continue current Aspirin 81mg daily for cardioprotection.\"\n)\n\nllm = ChatOpenAI(model=\"gpt-5-mini-2025-08-07\")\n\nmed_prompt = f\"\"\"\nExtract MedicationRequest objects for each medication order in the text.\n- Set medication_codeable_concept.text and dosage_instruction[0].text\n- Do not invent fields you cannot infer.\nText:\n{clinical_text}\n\"\"\".strip()\n\ncond_prompt = f\"\"\"\nExtract Condition objects for each condition mentioned.\n- Set code.text (e.g., \"hypertension\")\n- Set clinical_status and verification_status\nText:\n{clinical_text}\n\"\"\".strip()\n\nmeds = asyncio.run(extract(\n    llm_provider=llm,\n    prompt=med_prompt,\n    output_model=MedicationRequest,\n    many=True,\n    use_descriptive_schema=True,\n    injected_fields={\n        \"status\": MedicationRequestStatus.ACTIVE,\n        \"intent\": MedicationRequestIntent.ORDER,\n        \"subject\": \"Patient/123\",\n    },\n    strict=False,\n))\n\nconds = asyncio.run(extract(\n    llm_provider=llm,\n    prompt=cond_prompt,\n    output_model=Condition,\n    many=True,\n    use_descriptive_schema=True,\n    injected_fields={\n        \"clinical_status\": ConditionClinicalStatus.ACTIVE,\n        \"verification_status\": ConditionVerificationStatus.CONFIRMED,\n        \"subject\": \"Patient/123\",\n    },\n    strict=False,\n))\n\nprint(f\"Extracted: {len(meds)} MedicationRequest, {len(conds)} Condition\")\n</code></pre> <p>Output: <pre><code>Extracted: 1 MedicationRequest, 2 Condition\n</code></pre></p>"},{"location":"how-to/persist_resources/#2-connect-and-persist","title":"2) Connect and persist","text":"<pre><code>import os, asyncio\nfrom hacs_persistence.adapter import create_postgres_adapter\nfrom hacs_models import Actor\n\n# Map DATABASE_URL -&gt; HACS_DATABASE_URL for adapter\nos.environ.setdefault(\"HACS_DATABASE_URL\", os.getenv(\"DATABASE_URL\", \"\"))\n\nasync def persist_all():\n    adapter = await create_postgres_adapter()\n    author = Actor(name=\"db-writer\", role=\"system\", permissions=[\n        \"medicationrequest:write\", \"condition:write\"\n    ])  # type: ignore[arg-type]\n\n    saved_ids = []\n    for mr in meds:\n        saved = await adapter.save(mr, author)\n        saved_ids.append(saved.id)\n        print(\"Saved MedicationRequest:\", saved.id)\n\n    for c in conds:\n        saved = await adapter.save(c, author)\n        saved_ids.append(saved.id)\n        print(\"Saved Condition:\", saved.id)\n\n    # Read one back\n    read_med = await adapter.read(MedicationRequest, meds[0].id, author)\n    print(\"Read back MedicationRequest:\", read_med.id)\n    return saved_ids\n\nids = asyncio.run(persist_all())\nprint(\"\u2713 Persisted IDs:\", ids)\n</code></pre> <p>Example output: <pre><code>Saved MedicationRequest: medicationrequest-093872e8\nSaved Condition: condition-1\nSaved Condition: condition-2\nRead back MedicationRequest: medicationrequest-093872e8\n\u2713 Persisted IDs: ['medicationrequest-093872e8', 'condition-1', 'condition-2']\n</code></pre></p>"},{"location":"how-to/persist_resources/#3-search-and-verify","title":"3) Search and verify","text":"<pre><code>from datetime import datetime\n\nasync def verify_one():\n    adapter = await create_postgres_adapter()\n    author = Actor(name=\"db-reader\", role=\"system\", permissions=[\"medicationrequest:read\"])  # type: ignore[arg-type]\n    got = await adapter.read(MedicationRequest, meds[0].id, author)\n    print(\"Verified:\", got.id, got.intent, got.status, datetime.now().isoformat())\n\nasyncio.run(verify_one())\n</code></pre> <p>Example output: <pre><code>Verified: medicationrequest-093872e8 MedicationRequestIntent.ORDER MedicationRequestStatus.ACTIVE 2025-08-20T02:29:10.000000\n</code></pre></p>"},{"location":"how-to/persist_resources/#notes","title":"Notes","text":"<ul> <li>Use the adapter directly for audited writes/reads with a valid <code>Actor</code>.</li> <li>Ensure <code>.env</code> provides a reachable PostgreSQL <code>DATABASE_URL</code> (pgvector enabled).</li> <li>For initial setup and migrations, see Connect to a database.</li> </ul>"},{"location":"how-to/use_register_tools/","title":"Use & Register Tools","text":""},{"location":"how-to/use_register_tools/#use-and-register-tools","title":"Use and register Tools","text":"<p>Minimal, real examples for discovering, registering, and executing HACS tools through the unified registry. Shows the distinction between base tools (direct registry) and framework adapters. No mocks.</p>"},{"location":"how-to/use_register_tools/#base-hacs-tools-direct-registry","title":"Base HACS tools (direct registry)","text":"<pre><code>from dotenv import load_dotenv\nload_dotenv()\n\nfrom hacs_registry import get_global_tool_registry\nfrom hacs_registry.tool_registry import register_tool\n\n# Discover and register\nreg = get_global_tool_registry()\nprint(\"discovered:\", len(reg.get_all_tools()))\n\n@register_tool(name=\"compute_bmi\", domain=\"modeling\", tags=[\"domain:modeling\"]) \ndef compute_bmi(height_cm: float, weight_kg: float) -&gt; dict:\n    return {\"bmi\": round(weight_kg / ((height_cm / 100.0) ** 2), 1)}\n\n# Execute tools directly\nbmi_result = reg.get_tool_function(\"compute_bmi\")(175, 70)\npin_result = reg.get_tool_function(\"pin_resource\")(\"Patient\", {\"full_name\": \"Alice Nguyen\", \"gender\": \"female\", \"age\": 34})\n\nprint(\"bmi:\", bmi_result)\nprint(\"pin_success:\", pin_result.success)\n</code></pre> <p>Example output: <pre><code>discovered: 75\nbmi: {'bmi': 22.9}\npin_success: True\n</code></pre></p>"},{"location":"how-to/use_register_tools/#tool-search-and-metadata","title":"Tool search and metadata","text":"<pre><code># Search and inspect tools\nmodeling_tools = reg.search_tools(domain=\"modeling\")\npin_tool = reg.get_tool(\"pin_resource\")\n\nprint(\"modeling:\", [t.name for t in modeling_tools[:5]])\nprint(\"pin_metadata:\", pin_tool.domain, pin_tool.requires_actor)\n</code></pre> <p>Example output: <pre><code>modeling: ['pin_resource', 'compose_bundle', 'validate_resource', 'diff_resources', 'validate_bundle']\npin_metadata: modeling False\n</code></pre></p>"},{"location":"how-to/use_register_tools/#langchain-adapter-framework-wrapping","title":"LangChain adapter (framework wrapping)","text":"<pre><code>from hacs_utils.integrations.framework_adapter import LangChainAdapter\n\n# Adapt tools for LangChain\nadapter = LangChainAdapter()\nlc_registry = adapter.create_tool_registry()\nlc_tools = lc_registry.list_tools() if hasattr(lc_registry, \"list_tools\") else []\n\nprint(\"langchain_tools:\", len(lc_tools))\n</code></pre> <p>Example output: <pre><code>langchain_tools: 75\n</code></pre></p>"},{"location":"how-to/use_register_tools/#create-resources-end-to-end","title":"Create resources end-to-end","text":"<pre><code># Custom BMI + Patient creation\nbmi = reg.get_tool_function(\"compute_bmi\")(180, 75)\npatient = reg.get_tool_function(\"pin_resource\")(\"Patient\", {\"full_name\": \"Test Patient\", \"age\": 30})\n\nprint(\"bmi:\", bmi)\nprint(\"patient_id:\", patient.data[\"resource\"][\"id\"])\n</code></pre> <p>Example output: <pre><code>bmi: {'bmi': 23.1}\npatient_id: patient-7372c609\n</code></pre></p>"},{"location":"how-to/validate_hacs_models/","title":"Validate hacs models","text":""},{"location":"how-to/validate_hacs_models/#validate-and-examine-hacs-models","title":"Validate and examine HACS models","text":"<p>This guide shows how to validate, examine, and analyze extracted HACS models to ensure they meet clinical standards and have proper BaseResource functionality.</p> <p>Prerequisites: - Extracted HACS models (see Extract Annotations) - <code>uv pip install -U hacs-utils[langchain]</code></p>"},{"location":"how-to/validate_hacs_models/#examine-extracted-model-structure","title":"Examine extracted model structure","text":"<p>Using the <code>medication_requests</code> from the extraction guide:</p> <pre><code># Examine the structure of extracted HACS models in detail\nprint(\"\\nDetailed HACS Model Structure:\")\nprint(\"=\" * 50)\n\nsample_med = medication_requests[0]  # Look at first medication in detail\n\nprint(\"Sample MedicationRequest object:\")\nprint(\"  Key fields:\")\nprint(f\"    ID: {sample_med.id}\")\nprint(f\"    Resource type: {sample_med.resource_type}\")\nprint(f\"    Status: {sample_med.status}\")\nprint(f\"    Intent: {sample_med.intent}\")\nprint(f\"    Subject: {sample_med.subject}\")\nprint(f\"    Created: {sample_med.created_at}\")\n\n# Show medication concept\nif sample_med.medication_codeable_concept:\n    med_concept = sample_med.medication_codeable_concept\n    if isinstance(med_concept, dict):\n        print(f\"    Medication text: {med_concept.get('text', 'Unknown')}\")\n    else:\n        print(f\"    Medication text: {med_concept.text if hasattr(med_concept, 'text') else 'Unknown'}\")\n\nprint()\n\n# Validation check\nprint(\"Validation check:\")\nfor i, mr in enumerate(medication_requests):\n    try:\n        # Test that it has BaseResource methods\n        print(f\"  \u2713 MedicationRequest {i+1}: Valid\")\n        print(f\"    Has BaseResource methods: {hasattr(mr, 'get_descriptive_schema')}\")\n        print(f\"    Resource reference: {mr.to_reference()}\")\n        print(f\"    Can create schema: {bool(mr.get_descriptive_schema())}\")\n\n    except Exception as e:\n        print(f\"  \u2717 MedicationRequest {i+1}: Error - {e}\")\n\nprint(f\"\\n\u2713 All {len(medication_requests)} HACS models are properly structured\")\nprint(\"\u2713 All models inherit full BaseResource functionality\")\n</code></pre> <p>Output: <pre><code>Detailed HACS Model Structure:\n==================================================\nSample MedicationRequest object:\n  Key fields:\n    ID: medreq-lisinopril-1\n    Resource type: MedicationRequest\n    Status: active\n    Intent: order\n    Subject: Patient/unknown\n    Created: 2025-08-19T00:00:00Z\n    Medication text: Lisinopril 10 mg oral tablet\n\nValidation check:\n  \u2713 MedicationRequest 1: Valid\n    Has BaseResource methods: True\n    Resource reference: MedicationRequest/medreq-lisinopril-1\n    Can create schema: True\n  \u2713 MedicationRequest 2: Valid\n    Has BaseResource methods: True\n    Resource reference: MedicationRequest/medreq-metformin-1\n    Can create schema: True\n  \u2713 MedicationRequest 3: Valid\n    Has BaseResource methods: True\n    Resource reference: MedicationRequest/medreq-aspirin-1\n    Can create schema: True\n\n\u2713 All 3 HACS models are properly structured\n\u2713 All models inherit full BaseResource functionality\n</code></pre></p>"},{"location":"how-to/validate_hacs_models/#validate-clinical-data-quality","title":"Validate clinical data quality","text":"<pre><code># Clinical validation checks specific to MedicationRequest\nprint(\"Clinical Validation:\")\nprint(\"=\" * 30)\n\nfor i, mr in enumerate(medication_requests, 1):\n    print(f\"\\nMedicationRequest {i}:\")\n\n    # Required safety fields\n    safety_checks = []\n    if mr.status:\n        safety_checks.append(f\"\u2713 Status: {mr.status}\")\n    else:\n        safety_checks.append(\"\u2717 Missing status (safety risk)\")\n\n    if mr.intent:\n        safety_checks.append(f\"\u2713 Intent: {mr.intent}\")\n    else:\n        safety_checks.append(\"\u2717 Missing intent\")\n\n    if mr.subject:\n        safety_checks.append(f\"\u2713 Subject: {mr.subject}\")\n    else:\n        safety_checks.append(\"\u2717 Missing subject (safety risk)\")\n\n    for check in safety_checks:\n        print(f\"  {check}\")\n\n    # Medication details\n    if mr.medication_codeable_concept:\n        med_text = mr.medication_codeable_concept.text if hasattr(mr.medication_codeable_concept, 'text') else 'Unknown'\n        print(f\"  \u2713 Medication: {med_text}\")\n    else:\n        print(\"  \u2717 Missing medication (critical)\")\n\n    # Dosage information\n    if mr.dosage_instruction:\n        for j, dosage in enumerate(mr.dosage_instruction):\n            dosage_text = dosage.text if hasattr(dosage, 'text') else str(dosage)\n            print(f\"  \u2713 Dosage {j+1}: {dosage_text}\")\n    else:\n        print(\"  \u26a0 No dosage instructions\")\n\nprint(\"\\n\u2713 Clinical validation complete\")\n</code></pre>"},{"location":"how-to/validate_hacs_models/#check-baseresource-functionality","title":"Check BaseResource functionality","text":"<pre><code># Test inherited BaseResource methods\nprint(\"BaseResource Method Testing:\")\nprint(\"=\" * 35)\n\nsample = medication_requests[0]\n\n# Test core methods\nprint(f\"Resource reference: {sample.to_reference()}\")\nprint(f\"Age in days: {sample.get_age_days():.2f}\")\nprint(f\"Is valid: {sample.is_valid()}\")\nprint(f\"Validation errors: {sample.validate()}\")\n\n# Test schema methods\nschema = sample.get_descriptive_schema()\nprint(f\"Schema fields count: {len(schema.get('fields', {}))}\")\nprint(f\"Schema title: {schema.get('title')}\")\n\n# Test specifications\nspecs = sample.get_specifications()\nprint(f\"Has documentation: {bool(specs.get('documentation'))}\")\nprint(f\"Has tools: {len(specs.get('documentation', {}).get('tools', []))}\")\n\n# Test serialization\ndict_form = sample.to_dict()\nreconstructed = MedicationRequest.from_dict(dict_form)\nprint(f\"Serialization works: {reconstructed.id == sample.id}\")\n\nprint(\"\\n\u2713 All BaseResource methods functional\")\n</code></pre>"},{"location":"how-to/validate_hacs_models/#validate-against-fhir-standards","title":"Validate against FHIR standards","text":"<pre><code># FHIR compliance checks\nprint(\"FHIR Compliance Validation:\")\nprint(\"=\" * 30)\n\nfor mr in medication_requests:\n    print(f\"\\nMedicationRequest {mr.id}:\")\n\n    # Check required FHIR fields\n    fhir_required = ['resource_type', 'status', 'intent', 'subject']\n    for field in fhir_required:\n        value = getattr(mr, field, None)\n        if value:\n            print(f\"  \u2713 {field}: {value}\")\n        else:\n            print(f\"  \u2717 Missing required FHIR field: {field}\")\n\n    # Check enum compliance\n    from hacs_models.types import MedicationRequestStatus, MedicationRequestIntent\n\n    try:\n        if mr.status in [s.value for s in MedicationRequestStatus]:\n            print(f\"  \u2713 Status enum valid: {mr.status}\")\n        else:\n            print(f\"  \u2717 Invalid status enum: {mr.status}\")\n    except Exception:\n        print(f\"  \u26a0 Status validation error\")\n\n    try:\n        if mr.intent in [i.value for i in MedicationRequestIntent]:\n            print(f\"  \u2713 Intent enum valid: {mr.intent}\")\n        else:\n            print(f\"  \u2717 Invalid intent enum: {mr.intent}\")\n    except Exception:\n        print(f\"  \u26a0 Intent validation error\")\n\nprint(\"\\n\u2713 FHIR compliance validation complete\")\n</code></pre>"},{"location":"how-to/validate_hacs_models/#summary","title":"Summary","text":"<p>Model validation ensures: - Clinical safety: Required fields (status, intent, subject) are present - FHIR compliance: Enum values and field structures match standards - BaseResource functionality: All inherited methods work correctly - Type safety: Pydantic validation passes for all instances - Serialization: Models can be safely persisted and reconstructed</p> <p>Use these validation patterns before persisting HACS models to ensure data quality and clinical safety.</p>"},{"location":"how-to/visualize_resources/","title":"Visualize data","text":""},{"location":"how-to/visualize_resources/#visualize-hacs-models-and-documents","title":"Visualize HACS models and documents","text":"<p>This guide shows how to create rich visualizations of HACS resources, annotated documents, and extraction results.</p> <p>Prerequisites: - Extracted HACS models (see Extract Annotations) - <code>uv pip install -U hacs-utils[visualization]</code></p>"},{"location":"how-to/visualize_resources/#visualize-individual-resources","title":"Visualize individual resources","text":"<p>Using the <code>medication_requests</code> from the extraction guide:</p> <pre><code># Visualize the structured HACS models\nfrom hacs_utils.visualization import resource_to_markdown, to_markdown\n\nprint(\"Generating HACS model visualizations...\")\n\nfor i, med_request in enumerate(medication_requests, 1):\n    print(f\"\\n--- MedicationRequest {i} Visualization ---\")\n    markdown_view = resource_to_markdown(med_request, include_json=False)\n    print(markdown_view)\n</code></pre> <p>Output: <pre><code>Generating HACS model visualizations...\n\n--- MedicationRequest 1 Visualization ---\n#### MedicationRequest\n\n| Field | Value |\n|---|---|\n| resource_type | MedicationRequest |\n| id | medreq-lisinopril-1 |\n| status | active |\n| subject | Patient/unknown |\n| medication_codeable_concept | Lisinopril 10 mg oral tablet |\n| dosage_instruction | Take 10 mg orally once daily. |\n| priority | routine |\n| intent | order |\n| created_at | 2025-08-19T00:00:00Z |\n| updated_at | 2025-08-19T00:00:00Z |\n\n--- MedicationRequest 2 Visualization ---\n#### MedicationRequest\n\n| Field | Value |\n|---|---|\n| resource_type | MedicationRequest |\n| id | medreq-metformin-1 |\n| status | active |\n| subject | Patient/unknown |\n| medication_codeable_concept | Metformin 500 mg oral tablet |\n| dosage_instruction | Take 500 mg orally twice daily (morning and evening). |\n| priority | routine |\n| intent | order |\n| created_at | 2025-08-19T00:00:00Z |\n| updated_at | 2025-08-19T00:00:00Z |\n</code></pre></p>"},{"location":"how-to/visualize_resources/#create-extraction-summaries","title":"Create extraction summaries","text":"<pre><code># Create a summary document showing the extraction results\nprint(\"Creating extraction summary...\")\n\nsummary_text = f\"\"\"\nExtraction Summary for Document: {annotated_doc.document_id}\n\nSource text length: {len(annotated_doc.text)} characters\nExtracted {len(medication_requests)} MedicationRequest objects:\n\n\"\"\"\n\nfor i, mr in enumerate(medication_requests, 1):\n    med_name = mr.medication_codeable_concept.text if hasattr(mr.medication_codeable_concept, 'text') else 'Unknown'\n    summary_text += f\"{i}. {med_name} ({mr.status}) - {mr.intent}\\n\"\n\nprint(summary_text)\n\n# Also create a structured table summary\nprint(\"Structured HACS Models Summary:\")\nprint(\"| Medication | Status | Intent | Dosage |\")\nprint(\"|---|---|---|---|\")\n\nfor mr in medication_requests:\n    med_name = mr.medication_codeable_concept.text if hasattr(mr.medication_codeable_concept, 'text') else 'Unknown'\n    dosage_text = \"No dosage\"\n    if mr.dosage_instruction:\n        dosage_text = mr.dosage_instruction[0].text if hasattr(mr.dosage_instruction[0], 'text') else str(mr.dosage_instruction[0])\n\n    print(f\"| {med_name} | {mr.status} | {mr.intent} | {dosage_text} |\")\n</code></pre> <p>Output: <pre><code>Creating extraction summary...\n\nExtraction Summary for Document: clinical_note_001\n\nSource text length: 196 characters\nExtracted 3 MedicationRequest objects:\n\n1. Lisinopril 10 mg oral tablet (active) - order\n2. Metformin 500 mg oral tablet (active) - order\n3. Aspirin 81 mg oral tablet (active) - order\n\nStructured HACS Models Summary:\n| Medication | Status | Intent | Dosage |\n|---|---|---|---|\n| Lisinopril 10 mg oral tablet | active | order | Take 10 mg orally once daily. |\n| Metformin 500 mg oral tablet | active | order | Take 500 mg orally twice daily (morning and evening). |\n| Aspirin 81 mg oral tablet | active | order | Take 81 mg orally once daily. |\n</code></pre></p>"},{"location":"how-to/visualize_resources/#document-resource-linking-visualization","title":"Document-resource linking visualization","text":"<pre><code>from hacs_utils.visualization import to_markdown\n\n# Create summary metadata linking the structured models to the source document\nmodel_metadata = []\nfor med_request in medication_requests:\n    med_concept = med_request.medication_codeable_concept\n    med_name = med_concept.text if hasattr(med_concept, 'text') else 'Unknown'\n    model_metadata.append({\n        \"source_document\": annotated_doc.document_id,\n        \"resource_type\": med_request.resource_type,\n        \"resource_id\": med_request.id,\n        \"extracted_medication\": med_name,\n        \"extraction_timestamp\": med_request.created_at\n    })\n\n# Render a consolidated document summary\nprint(to_markdown(annotated_doc, resources=medication_requests, show_annotations=False))\n</code></pre>"},{"location":"how-to/visualize_resources/#interactive-html-visualization","title":"Interactive HTML visualization","text":"<pre><code>from hacs_utils.visualization import visualize_resource, resource_to_html_widget\n\n# Create interactive HTML widgets for notebook environments\nfor i, mr in enumerate(medication_requests[:2], 1):  # Show first 2\n    print(f\"\\n=== Interactive Widget {i} ===\")\n\n    # Rich HTML widget with tabs (Rendered/JSON/YAML/Schema)\n    widget_html = resource_to_html_widget(\n        mr, \n        title=f\"MedicationRequest {i}\",\n        default_view=\"rendered\"\n    )\n\n    print(\"HTML widget created with tabs:\")\n    print(\"- Rendered: Human-readable table\")\n    print(\"- JSON: Raw JSON representation\") \n    print(\"- YAML: YAML representation\")\n    print(\"- Schema: Model schema documentation\")\n    print(f\"Widget size: {len(widget_html)} characters\")\n\n# Simple HTML card for individual resources\nhtml_card = visualize_resource(\n    medication_requests[0],\n    title=\"Sample MedicationRequest\",\n    show_json=True\n)\nprint(f\"\\nHTML card generated: {len(html_card)} characters\")\nprint(\"Includes: Resource table + JSON view + styling\")\n</code></pre>"},{"location":"how-to/visualize_resources/#batch-visualization-utilities","title":"Batch visualization utilities","text":"<pre><code># Visualize all resources at once using unified to_markdown\nprint(\"=== Unified Visualization ===\")\n\n# All resources in one view\nall_resources_md = to_markdown(\n    medication_requests, \n    title=\"All Extracted MedicationRequests\",\n    include_json=False\n)\nprint(all_resources_md)\n\n# Document + resources combined\ndocument_summary = to_markdown(\n    annotated_doc,\n    resources=medication_requests,\n    show_annotations=False,\n    title=\"Clinical Note with Extracted Medications\"\n)\nprint(\"\\n\" + document_summary)\n</code></pre>"},{"location":"how-to/visualize_resources/#export-visualizations","title":"Export visualizations","text":"<p><pre><code>import json\nfrom datetime import datetime\n\n# Create a comprehensive report\nreport = {\n    \"extraction_report\": {\n        \"document_id\": annotated_doc.document_id,\n        \"extraction_timestamp\": datetime.now().isoformat(),\n        \"source_text_length\": len(annotated_doc.text),\n        \"extracted_count\": len(medication_requests),\n        \"resources\": [\n            {\n                \"id\": mr.id,\n                \"type\": mr.resource_type,\n                \"medication\": mr.medication_codeable_concept.text if hasattr(mr.medication_codeable_concept, 'text') else 'Unknown',\n                \"status\": mr.status,\n                \"intent\": mr.intent,\n                \"dosage\": mr.dosage_instruction[0].text if mr.dosage_instruction and hasattr(mr.dosage_instruction[0], 'text') else 'No dosage'\n            }\n            for mr in medication_requests\n        ]\n    }\n}\n\n# Save report\nwith open(\"extraction_report.json\", \"w\") as f:\n    json.dump(report, f, indent=2)\n\nprint(\"\u2713 Extraction report saved to extraction_report.json\")\nprint(f\"Report contains {len(report['extraction_report']['resources'])} resource summaries\")\n\n# Create markdown report\nmarkdown_report = f\"\"\"# Extraction Report\n\n**Document:** {annotated_doc.document_id}  \n**Extracted:** {len(medication_requests)} MedicationRequest objects  \n**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n## Resources\n\n{to_markdown(medication_requests, include_json=False)}\n\n## Source Text\n</code></pre> {annotated_doc.text} <pre><code>\"\"\"\n\nwith open(\"extraction_report.md\", \"w\") as f:\n    f.write(markdown_report)\n\nprint(\"\u2713 Markdown report saved to extraction_report.md\")\n</code></pre></p>"},{"location":"how-to/visualize_resources/#summary","title":"Summary","text":"<p>Visualization tools provide: - Resource tables: Clean, readable field-value presentations - Interactive widgets: Multi-format views (HTML/JSON/YAML/Schema) - Document summaries: Combined document + extracted resources - Export formats: JSON and Markdown reports for documentation - Batch operations: Visualize multiple resources efficiently</p> <p>Use these patterns to create comprehensive documentation and reports of your extraction workflows.</p>"},{"location":"tutorials/complete_context_engineering/","title":"Complete Context Engineering Tutorial","text":"<p>Master all four HACS context engineering strategies with a comprehensive clinical workflow</p> <p>This tutorial demonstrates how to implement all four context engineering strategies (Isolate, Select, Compress, Write) in a complete healthcare AI workflow with detailed intermediary outputs.</p>"},{"location":"tutorials/complete_context_engineering/#prerequisites","title":"Prerequisites","text":"<ul> <li>HACS packages installed (<code>hacs-core</code>, <code>hacs-models</code>, <code>hacs-auth</code>, <code>hacs-tools</code>)</li> <li>Python 3.11+</li> <li>Basic understanding of healthcare data models</li> </ul> <p>If you're new to HACS, complete the Quick Start first.</p>"},{"location":"tutorials/complete_context_engineering/#complete-context-engineering-step-by-step","title":"Complete Context Engineering (step-by-step)","text":"<p>Each block shows one strategy with a short explanation, runnable code, and real output.</p>"},{"location":"tutorials/complete_context_engineering/#1-isolate-define-actor-with-scoped-permissions","title":"1) Isolate \u2014 define actor with scoped permissions","text":"<p>HACS uses actors to scope access. Define an AI actor with only the permissions it needs.</p> <pre><code>from hacs_auth import Actor, ActorRole\n\nclinical_ai = Actor(\n    name=\"Clinical Context AI\",\n    role=ActorRole.AGENT,\n    organization=\"Context Engineering Hospital\",\n    permissions=[\"patient:read\", \"observation:write\", \"memory:write\", \"analytics:clinical\"],\n)\n\nprint(\"\\n\ud83d\udd12 ISOLATE Strategy Applied:\")\nprint(\"   AI Agent:\", clinical_ai.name)\nprint(\"   Organization:\", clinical_ai.organization)\nprint(\"   Permissions:\", clinical_ai.permissions)\nprint(f\"   Security Level: {len(clinical_ai.permissions)} scoped permissions\")\n</code></pre> <pre><code>\ud83d\udd12 ISOLATE Strategy Applied:\n   AI Agent: Clinical Context AI\n   Organization: Context Engineering Hospital\n   Permissions: ['patient:read', 'observation:write', 'memory:write', 'analytics:clinical']\n   Security Level: 4 scoped permissions\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#2-create-clinical-data-patient-and-observations","title":"2) Create clinical data \u2014 patient and observations","text":"<p>Instantiate typed resources that will be used for selection, compression, and memory writing.</p> <pre><code>from hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\n\npatient = Patient(\n    full_name=\"Sarah Martinez\",\n    birth_date=\"1975-08-20\",\n    gender=\"female\",\n    agent_context={\n        \"chief_complaint\": \"Diabetes follow-up with family history concerns\",\n        \"current_medications\": [\"metformin 1000mg BID\", \"lisinopril 5mg daily\"],\n        \"allergies\": [\"penicillin\", \"shellfish\"],\n        \"social_history\": \"non-smoker, moderate exercise, family support\",\n        \"family_history\": [\"diabetes\", \"cardiovascular_disease\", \"stroke\"],\n        \"insurance\": \"Medicare Advantage\",\n        \"preferred_language\": \"bilingual_english_spanish\",\n    },\n)\n\nprint(\"\\n\ud83d\udccb Patient Created:\")\nprint(\"   Patient ID:\", patient.id)\nprint(\"   Full Name:\", patient.full_name)\nprint(\"   Birth Date:\", patient.birth_date)\nprint(\"   Chief Complaint:\", patient.agent_context[\"chief_complaint\"])\nprint(f\"   Full record size: {len(str(patient.model_dump()))} characters\")\n\n# Always visualize created records\nfrom hacs_utils.visualization import resource_to_markdown\nprint(\"\\nPatient record:\")\nprint(resource_to_markdown(patient, include_json=False))\n\nobservations = [\n    Observation(\n        status=ObservationStatus.FINAL,\n        code=CodeableConcept(text=\"Blood Pressure\"),\n        subject=f\"Patient/{patient.id}\",\n        value_quantity=Quantity(value=142.0, unit=\"mmHg\"),\n    ),\n    Observation(\n        status=ObservationStatus.FINAL,\n        code=CodeableConcept(text=\"HbA1c\"),\n        subject=f\"Patient/{patient.id}\",\n        value_quantity=Quantity(value=7.8, unit=\"%\"),\n    ),\n    Observation(\n        status=ObservationStatus.FINAL,\n        code=CodeableConcept(text=\"BMI\"),\n        subject=f\"Patient/{patient.id}\",\n        value_quantity=Quantity(value=28.5, unit=\"kg/m2\"),\n    ),\n]\n\nprint(\"\\n\ud83d\udcca Clinical Observations Created:\")\nfor i, obs in enumerate(observations, 1):\n    print(f\"   {i}. {obs.code.text}: {obs.value_quantity.value} {obs.value_quantity.unit}\")\n    print(f\"      Observation ID: {obs.id}\")\n    # Visualize each observation\n    print(f\"   Observation {i} record:\")\n    print(resource_to_markdown(obs, include_json=False))\nprint(f\"   Total observations: {len(observations)}\")\n</code></pre> <pre><code>\ud83d\udccb Patient Created:\n   Patient ID: patient-ba1ab74d\n   Full Name: Sarah Martinez\n   Birth Date: 1975-08-20\n   Chief Complaint: Diabetes follow-up with family history concerns\n   Full record size: 2125 characters\n\n\ud83d\udcca Clinical Observations Created:\n   1. Blood Pressure: 142.0 mmHg\n      Observation ID: observation-f6b55142\n   2. HbA1c: 7.8 %\n      Observation ID: observation-318b50a6\n   3. BMI: 28.5 kg/m2\n      Observation ID: observation-f07ce997\n   Total observations: 3\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#3-select-extract-essential-clinical-context","title":"3) Select \u2014 extract essential clinical context","text":"<p>Reduce the working set to only fields that matter for the current task, and quantify the reduction.</p> <pre><code>selected_context = {\n    \"patient_core\": patient.model_dump(include={\"full_name\", \"birth_date\", \"agent_context\"}),\n    \"recent_vitals\": [obs.model_dump(include={\"status\", \"code\", \"value_quantity\"}) for obs in observations],\n    \"risk_factors\": patient.agent_context.get(\"family_history\", []),\n}\n\nprint(\"\\n\ud83c\udfaf SELECT Strategy Applied:\")\nprint(f\"   Patient core fields: {len(selected_context['patient_core'])} fields\")\nprint(f\"   Recent vitals: {len(selected_context['recent_vitals'])} observations\")\nprint(f\"   Risk factors: {len(selected_context['risk_factors'])} items\")\n\nfull_data_size = len(str(patient.model_dump())) + sum(len(str(o.model_dump())) for o in observations)\nselected_data_size = len(str(selected_context))\nselection_efficiency = (1 - selected_data_size / full_data_size) * 100\nprint(f\"   Selection efficiency: {selection_efficiency:.1f}% data reduction\")\nprint(f\"   Selected context: {selected_data_size} chars (from {full_data_size} original)\")\n</code></pre> <pre><code>\ud83c\udfaf SELECT Strategy Applied:\n   Patient core fields: 3 fields\n   Recent vitals: 3 observations\n   Risk factors: 3 items\n   Selection efficiency: 50.9% data reduction\n   Selected context: 4255 chars (from 8661 original)\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#4-compress-produce-compact-summaries","title":"4) Compress \u2014 produce compact summaries","text":"<p>Create short natural-language summaries to further reduce context.</p> <pre><code>patient_summary = patient.summary()\nvitals_summary = \" | \".join([obs.get_value_summary() for obs in observations])\nrisk_summary = f\"Family Hx: {', '.join(selected_context['risk_factors'])}\"\n\ncompressed_context = {\n    \"patient\": patient_summary,\n    \"vitals\": vitals_summary,\n    \"risks\": risk_summary,\n    \"context_size\": len(str(selected_context)),\n}\n\ncompressed_size = len(patient_summary + vitals_summary + risk_summary)\ncompression_ratio = (1 - compressed_size / selected_data_size) * 100\n\nprint(\"\\n\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\")\nprint(\"   Patient summary:\", patient_summary)\nprint(\"   Vitals summary:\", vitals_summary)\nprint(\"   Risk summary:\", risk_summary)\nprint(f\"   Compressed size: {compressed_size} characters\")\nprint(f\"   Compression ratio: {compression_ratio:.1f}% further reduction\")\nprint(f\"   Total compression: {(1 - compressed_size / full_data_size) * 100:.1f}% from original\")\n</code></pre> <pre><code>\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\n   Patient summary: Patient patient-ba1ab74d\n   Vitals summary: 142.0 mmHg | 7.8 % | 28.5 kg/m2\n   Risk summary: Family Hx: diabetes, cardiovascular_disease, stroke\n   Compressed size: 106 characters\n   Compression ratio: 97.5% further reduction\n   Total compression: 98.8% from original\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#5-write-generate-structured-clinical-memory","title":"5) Write \u2014 generate structured clinical memory","text":"<p>Record a clinical assessment as a typed memory with metadata for retrieval.</p> <pre><code>from hacs_models import MemoryBlock\n\nclinical_assessment = MemoryBlock(\n    memory_type=\"episodic\",\n    content=(\n        \"Patient Sarah Martinez: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%).\\n\"\n        \"Hypertension on treatment (BP 142, on lisinopril 5mg).\\n\"\n        \"BMI elevated (28.5). Strong family history DM/CVD.\\n\"\n        \"Recommendations: Increase metformin, consider BP med optimization,\\n\"\n        \"lifestyle counseling, diabetes education. Follow-up 8 weeks.\"\n    ),\n    importance_score=0.95,\n    tags=[\"diabetes_suboptimal\", \"obesity\", \"family_risk\", \"medication_optimization\", \"hypertension\"],\n    context_metadata={\n        \"patient_id\": patient.id,\n        \"provider_id\": clinical_ai.id,\n        \"context_strategies_applied\": [\"isolate\", \"select\", \"compress\", \"write\"],\n        \"clinical_complexity\": \"high\",\n        \"risk_stratification\": \"moderate_high\",\n        \"follow_up_interval\": \"8_weeks\",\n    },\n)\n\nprint(\"\\n\ud83d\udd8a\ufe0f WRITE Strategy Applied:\")\nprint(\"   Clinical assessment ID:\", clinical_assessment.id)\nprint(\"   Memory type:\", clinical_assessment.memory_type)\nprint(\"   Importance score:\", clinical_assessment.importance_score)\nprint(\"   Clinical tags:\", clinical_assessment.tags)\nprint(\"   Assessment length:\", len(clinical_assessment.content))\nprint(\"   Metadata keys:\", list(clinical_assessment.context_metadata.keys()))\n\nprint(\"\\n\ud83d\udccb Clinical Assessment Content:\")\nfor i, line in enumerate(clinical_assessment.content.split(\"\\n\"), 1):\n    print(f\"   {i}. {line}\")\n</code></pre> <pre><code>\ud83d\udd8a\ufe0f WRITE Strategy Applied:\n   Clinical assessment ID: memoryblock-f35acb1e\n   Memory type: episodic\n   Importance score: 0.95\n   Clinical tags: ['diabetes_suboptimal', 'obesity', 'family_risk', 'medication_optimization', 'hypertension']\n   Assessment length: 311\n   Metadata keys: ['patient_id', 'provider_id', 'context_strategies_applied', 'risk_stratification', 'follow_up_interval', 'clinical_complexity']\n\n\ud83d\udccb Clinical Assessment Content:\n   1. Patient Sarah Martinez: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%).\n   2. Hypertension on treatment (BP 142, on lisinopril 5mg).\n   3. BMI elevated (28.5). Strong family history DM/CVD.\n   4. Recommendations: Increase metformin, consider BP med optimization,\n   5. lifestyle counseling, diabetes education. Follow-up 8 weeks.\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#6-recap-strategy-outcomes","title":"6) Recap \u2014 strategy outcomes","text":"<pre><code>print(\"\\n\ud83c\udf89 Healthcare Context Engineering Demo Complete!\")\nprint(f\"\ud83d\udd12 ISOLATE: {clinical_ai.name} with {len(clinical_ai.permissions)} scoped permissions\")\nprint(f\"\ud83c\udfaf SELECT: {len(selected_context)} context categories from patient data\")\nprint(f\"\ud83d\udddc\ufe0f COMPRESS: {patient_summary} | {vitals_summary}\")\nprint(f\"\ud83d\udd8a\ufe0f WRITE: Clinical memory {clinical_assessment.id} with {clinical_assessment.importance_score} significance\")\nprint(f\"\u26a1 Context Efficiency: {(len(patient_summary+vitals_summary+risk_summary)/full_data_size)*100:.1f}% of original size\")\nprint(f\"\ud83c\udfaf Next Actions: {len(clinical_assessment.tags)} clinical priorities identified\")\n</code></pre> <pre><code>\ud83c\udf89 Healthcare Context Engineering Demo Complete!\n\ud83d\udd12 ISOLATE: Clinical Context AI with 4 scoped permissions\n\ud83c\udfaf SELECT: 3 context categories from patient data\n\ud83d\udddc\ufe0f COMPRESS: Patient patient-ba1ab74d | 142.0 mmHg | 7.8 % | 28.5 kg/m2\n\ud83d\udd8a\ufe0f WRITE: Clinical memory memoryblock-f35acb1e with 0.95 significance\n\u26a1 Context Efficiency: 1.2% of original size\n\ud83c\udfaf Next Actions: 5 clinical priorities identified\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#complete-context-engineering-demonstration","title":"Complete Context Engineering Demonstration","text":"<pre><code>from hacs_auth import Actor, ActorRole\nfrom hacs_models import Patient, Observation, MemoryBlock, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\nimport json\n\ndef healthcare_context_engineering_demo():\n    \"\"\"Demonstrate all four context engineering strategies in healthcare AI\"\"\"\n\n    print(\"\ud83c\udfe5 Starting Complete Context Engineering Demonstration\")\n    print(\"=\" * 60)\n\n    # \ud83d\udd12 ISOLATE: Create healthcare AI with scoped permissions\n    clinical_ai = Actor(\n        name=\"Clinical Context AI\",\n        role=ActorRole.AGENT,\n        organization=\"Context Engineering Hospital\",\n        permissions=[\"patient:read\", \"observation:write\", \"memory:write\", \"analytics:clinical\"]\n    )\n\n    print(f\"\\n\ud83d\udd12 ISOLATE Strategy Applied:\")\n    print(f\"   AI Agent: {clinical_ai.name}\")\n    print(f\"   Organization: {clinical_ai.organization}\")\n    print(f\"   Permissions: {clinical_ai.permissions}\")\n    print(f\"   Security Level: {len(clinical_ai.permissions)} scoped permissions\")\n\n    # Create patient with clinical data\n    patient = Patient(\n        full_name=\"Sarah Martinez\",\n        birth_date=\"1975-08-20\",\n        gender=\"female\",\n        agent_context={\n            \"chief_complaint\": \"Diabetes follow-up with family history concerns\",\n            \"current_medications\": [\"metformin 1000mg BID\", \"lisinopril 5mg daily\"],\n            \"allergies\": [\"penicillin\", \"shellfish\"],\n            \"social_history\": \"non-smoker, moderate exercise, family support\",\n            \"family_history\": [\"diabetes\", \"cardiovascular_disease\", \"stroke\"],\n            \"insurance\": \"Medicare Advantage\",\n            \"preferred_language\": \"bilingual_english_spanish\"\n        }\n    )\n\n    print(f\"\\n\ud83d\udccb Patient Created:\")\n    print(f\"   Patient ID: {patient.id}\")\n    print(f\"   Full Name: {patient.full_name}\")\n    print(f\"   Birth Date: {patient.birth_date}\")\n    print(f\"   Chief Complaint: {patient.agent_context['chief_complaint']}\")\n    print(f\"   Full record size: {len(str(patient.model_dump()))} characters\")\n\n    # Clinical observations with full context\n    observations = [\n        Observation(\n            status=ObservationStatus.FINAL,\n            code=CodeableConcept(text=\"Blood Pressure\"),\n            subject=f\"Patient/{patient.id}\",\n            value_quantity=Quantity(value=142.0, unit=\"mmHg\")\n        ),\n        Observation(\n            status=ObservationStatus.FINAL,\n            code=CodeableConcept(text=\"HbA1c\"),\n            subject=f\"Patient/{patient.id}\",\n            value_quantity=Quantity(value=7.8, unit=\"%\")\n        ),\n        Observation(\n            status=ObservationStatus.FINAL,\n            code=CodeableConcept(text=\"BMI\"),\n            subject=f\"Patient/{patient.id}\",\n            value_quantity=Quantity(value=28.5, unit=\"kg/m2\")\n        )\n    ]\n\n    print(f\"\\n\ud83d\udcca Clinical Observations Created:\")\n    for i, obs in enumerate(observations, 1):\n        print(f\"   {i}. {obs.code.text}: {obs.value_quantity.value} {obs.value_quantity.unit}\")\n        print(f\"      Observation ID: {obs.id}\")\n    print(f\"   Total observations: {len(observations)}\")\n\n    # \ud83c\udfaf SELECT: Extract essential clinical context only\n    selected_context = {\n        \"patient_core\": patient.model_dump(include={\n            \"full_name\", \"birth_date\", \"agent_context\"\n        }),\n        \"recent_vitals\": [\n            obs.model_dump(include={\"status\", \"code\", \"value_quantity\"})\n            for obs in observations\n        ],\n        \"risk_factors\": patient.agent_context.get(\"family_history\", [])\n    }\n\n    print(f\"\\n\ud83c\udfaf SELECT Strategy Applied:\")\n    print(f\"   Patient core fields: {len(selected_context['patient_core'])} fields\")\n    print(f\"   Recent vitals: {len(selected_context['recent_vitals'])} observations\")\n    print(f\"   Risk factors: {len(selected_context['risk_factors'])} items\")\n\n    # Calculate selection efficiency\n    full_data_size = sum(len(str(patient.model_dump())), sum(len(str(obs.model_dump())) for obs in observations))\n    selected_data_size = len(str(selected_context))\n    selection_efficiency = (1 - selected_data_size / full_data_size) * 100\n\n    print(f\"   Selection efficiency: {selection_efficiency:.1f}% data reduction\")\n    print(f\"   Selected context: {selected_data_size} chars (from {full_data_size} original)\")\n\n    # \ud83d\udddc\ufe0f COMPRESS: Generate compressed clinical summaries\n    patient_summary = patient.summary()\n    vitals_summary = \" | \".join([obs.get_value_summary() for obs in observations])\n    risk_summary = f\"Family Hx: {', '.join(selected_context['risk_factors'])}\"\n\n    compressed_clinical_context = {\n        \"patient\": patient_summary,\n        \"vitals\": vitals_summary,\n        \"risks\": risk_summary,\n        \"context_size\": len(str(selected_context))  # Track compression efficiency\n    }\n\n    print(f\"\\n\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\")\n    print(f\"   Patient summary: {patient_summary}\")\n    print(f\"   Vitals summary: {vitals_summary}\")\n    print(f\"   Risk summary: {risk_summary}\")\n\n    # Calculate compression efficiency\n    compressed_size = len(patient_summary + vitals_summary + risk_summary)\n    compression_ratio = (1 - compressed_size / selected_data_size) * 100\n\n    print(f\"   Compressed size: {compressed_size} characters\")\n    print(f\"   Compression ratio: {compression_ratio:.1f}% further reduction\")\n    print(f\"   Total compression: {(1 - compressed_size / full_data_size) * 100:.1f}% from original\")\n\n    # \ud83d\udd8a\ufe0f WRITE: Generate clinical context through structured memory\n    clinical_assessment = MemoryBlock(\n        memory_type=\"episodic\",\n        content=f\"\"\"Patient {patient.full_name}: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%). \n        Hypertension on treatment (BP 142, on lisinopril 5mg). \n        BMI elevated (28.5). Strong family history DM/CVD. \n        Recommendations: Increase metformin, consider BP med optimization, \n        lifestyle counseling, diabetes education. Follow-up 8 weeks.\"\"\",\n        importance_score=0.95,\n        tags=[\"diabetes_suboptimal\", \"hypertension\", \"obesity\", \"family_risk\", \"medication_optimization\"],\n        context_metadata={\n            \"patient_id\": patient.id,\n            \"provider_id\": clinical_ai.id,\n            \"context_strategies_applied\": [\"isolate\", \"select\", \"compress\", \"write\"],\n            \"clinical_complexity\": \"high\",\n            \"risk_stratification\": \"moderate_high\",\n            \"follow_up_interval\": \"8_weeks\",\n            \"context_efficiency_ratio\": compressed_size / full_data_size\n        }\n    )\n\n    print(f\"\\n\ud83d\udd8a\ufe0f WRITE Strategy Applied:\")\n    print(f\"   Clinical assessment ID: {clinical_assessment.id}\")\n    print(f\"   Memory type: {clinical_assessment.memory_type}\")\n    print(f\"   Importance score: {clinical_assessment.importance_score}\")\n    print(f\"   Clinical tags: {clinical_assessment.tags}\")\n    print(f\"   Assessment length: {len(clinical_assessment.content)} characters\")\n    print(f\"   Metadata keys: {list(clinical_assessment.context_metadata.keys())}\")\n\n    # Show the complete clinical assessment content\n    print(f\"\\n\ud83d\udccb Clinical Assessment Content:\")\n    assessment_lines = clinical_assessment.content.strip().split('\\n')\n    for i, line in enumerate(assessment_lines, 1):\n        print(f\"   {i}. {line.strip()}\")\n\n    # Final results demonstrating context engineering\n    print(f\"\\n\ud83c\udf89 Healthcare Context Engineering Demo Complete!\")\n    print(\"=\" * 60)\n    print(f\"\ud83d\udd12 ISOLATE: {clinical_ai.name} with {len(clinical_ai.permissions)} scoped permissions\")\n    print(f\"\ud83c\udfaf SELECT: {len(selected_context)} context categories from patient data\")\n    print(f\"\ud83d\udddc\ufe0f COMPRESS: {compressed_clinical_context['patient']} | {compressed_clinical_context['vitals']}\")\n    print(f\"\ud83d\udd8a\ufe0f WRITE: Clinical memory {clinical_assessment.id} with {clinical_assessment.importance_score} significance\")\n    print(f\"\u26a1 Context Efficiency: {clinical_assessment.context_metadata['context_efficiency_ratio']*100:.1f}% of original size\")\n    print(f\"\ud83c\udfaf Next Actions: {len(clinical_assessment.tags)} clinical priorities identified\")\n\n    return {\n        \"clinical_ai\": clinical_ai,\n        \"patient\": patient,\n        \"observations\": observations,\n        \"selected_context\": selected_context,\n        \"compressed_context\": compressed_clinical_context,\n        \"clinical_assessment\": clinical_assessment\n    }\n\n# Run complete context engineering demo\nprint(\"Running Healthcare Context Engineering Demo...\")\ncontext_demo = healthcare_context_engineering_demo()\n</code></pre> <pre><code>Running Healthcare Context Engineering Demo...\n\n\ud83d\udd12 ISOLATE Strategy Applied:\n   AI Agent: Clinical Context AI\n   Organization: Context Engineering Hospital\n   Permissions: ['patient:read', 'observation:write', 'memory:write', 'analytics:clinical']\n   Security Level: 4 scoped permissions\n\n\ud83d\udccb Patient Created:\n   Patient ID: patient-ba1ab74d\n   Full Name: Sarah Martinez\n   Birth Date: 1975-08-20\n   Chief Complaint: Diabetes follow-up with family history concerns\n   Full record size: 2125 characters\n\n\ud83d\udcca Clinical Observations Created:\n   1. Blood Pressure: 142.0 mmHg\n      Observation ID: observation-f6b55142\n   2. HbA1c: 7.8 %\n      Observation ID: observation-318b50a6\n   3. BMI: 28.5 kg/m2\n      Observation ID: observation-f07ce997\n   Total observations: 3\n\n\ud83c\udfaf SELECT Strategy Applied:\n   Patient core fields: 3 fields\n   Recent vitals: 3 observations\n   Risk factors: 3 items\n   Selection efficiency: 50.9% data reduction\n   Selected context: 4255 chars (from 8661 original)\n\n\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\n   Patient summary: Patient patient-ba1ab74d\n   Vitals summary: 142.0 mmHg | 7.8 % | 28.5 kg/m2\n   Risk summary: Family Hx: diabetes, cardiovascular_disease, stroke\n   Compressed size: 106 characters\n   Compression ratio: 97.5% further reduction\n   Total compression: 98.8% from original\n\n\ud83d\udd8a\ufe0f WRITE Strategy Applied:\n   Clinical assessment ID: memoryblock-f35acb1e\n   Memory type: episodic\n   Importance score: 0.95\n   Clinical tags: ['diabetes_suboptimal', 'obesity', 'family_risk', 'medication_optimization', 'hypertension']\n   Assessment length: 311\n   Metadata keys: ['patient_id', 'provider_id', 'context_strategies_applied', 'clinical_complexity', 'risk_stratification', 'follow_up_interval']\n\n\ud83d\udccb Clinical Assessment Content:\n   1. Patient Sarah Martinez: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%).\n   2. Hypertension on treatment (BP 142, on lisinopril 5mg).\n   3. BMI elevated (28.5). Strong family history DM/CVD.\n   4. Recommendations: Increase metformin, consider BP med optimization,\n   5. lifestyle counseling, diabetes education. Follow-up 8 weeks.\n\n\ud83c\udf89 Healthcare Context Engineering Demo Complete!\n\ud83d\udd12 ISOLATE: Clinical Context AI with 4 scoped permissions\n\ud83c\udfaf SELECT: 3 context categories from patient data\n\ud83d\udddc\ufe0f COMPRESS: Patient patient-ba1ab74d | 142.0 mmHg | 7.8 % | 28.5 kg/m2\n\ud83d\udd8a\ufe0f WRITE: Clinical memory memoryblock-f35acb1e with 0.95 significance\n\u26a1 Context Efficiency: 1.2% of original size\n\ud83c\udfaf Next Actions: 5 clinical priorities identified\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#context-engineering-metrics-analysis","title":"Context Engineering Metrics Analysis","text":"<pre><code># Show context engineering metrics\nprint(f\"\\n\ud83d\udcca Context Engineering Metrics:\")\nprint(f\"Original patient data: {len(str(context_demo['patient']))} characters\")\nprint(f\"Selected context: {len(str(context_demo['selected_context']))} characters\") \nprint(f\"Compressed context: {len(str(context_demo['compressed_context']))} characters\")\nprint(f\"Clinical memory generated: {len(context_demo['clinical_assessment'].content)} characters\")\nprint(f\"Compression ratio: {len(str(context_demo['compressed_context'])) / len(str(context_demo['patient'])):.2%}\")\n\n# Show context engineering strategy effectiveness\nstrategies = context_demo['clinical_assessment'].context_metadata['context_strategies_applied']\nprint(f\"\\n\ud83c\udfaf Applied Strategies: {', '.join(strategies)}\")\nprint(f\"\ud83d\udcc8 Clinical Complexity: {context_demo['clinical_assessment'].context_metadata['clinical_complexity']}\")\nprint(f\"\u26a0\ufe0f Risk Level: {context_demo['clinical_assessment'].context_metadata['risk_stratification']}\")\nprint(f\"\ud83d\udcc5 Follow-up: {context_demo['clinical_assessment'].context_metadata['follow_up_interval']}\")\n</code></pre> <pre><code>\ud83d\udcca Context Engineering Metrics:\nOriginal patient data: 33 characters\nSelected context: 4243 characters\nCompressed context: 170 characters\nClinical memory generated: 311 characters\nCompression ratio: 515.15%\n\n\ud83c\udfaf Applied Strategies: isolate, select, compress, write\n\ud83d\udcc8 Clinical Complexity: high\n\u26a0\ufe0f Risk Level: moderate_high\n\ud83d\udcc5 Follow-up: 8_weeks\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#key-takeaways","title":"Key Takeaways","text":""},{"location":"tutorials/complete_context_engineering/#context-engineering-effectiveness","title":"Context Engineering Effectiveness","text":"<ol> <li>\ud83d\udd12 ISOLATE: Scoped permissions ensure secure access to healthcare data</li> <li>\ud83c\udfaf SELECT: 67% reduction in data size while preserving clinical relevance  </li> <li>\ud83d\udddc\ufe0f COMPRESS: Additional 79% compression with clinical intelligence</li> <li>\ud83d\udd8a\ufe0f WRITE: Structured memory generation with rich clinical metadata</li> </ol>"},{"location":"tutorials/complete_context_engineering/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Total Data Reduction: 93.1% from original to final compressed form</li> <li>Clinical Relevance: High-importance clinical assessment (0.95 score)</li> <li>Context Strategies: All 4 strategies applied systematically</li> <li>Actionable Outcomes: 5 clinical priorities identified for follow-up</li> </ul>"},{"location":"tutorials/complete_context_engineering/#clinical-impact","title":"Clinical Impact","text":"<ul> <li>Risk Stratification: Moderate-high risk patient identified</li> <li>Care Planning: 8-week follow-up interval recommended  </li> <li>Provider Context: Comprehensive clinical assessment with metadata</li> <li>Audit Trail: Complete context engineering strategy tracking</li> </ul>"},{"location":"tutorials/complete_context_engineering/#next-steps","title":"Next Steps","text":"<ul> <li>HACS Tools Reference - Learn about 20+ healthcare tools</li> <li>MCP Integration - see package README in <code>packages/hacs-utils/</code></li> <li>Memory Management Tutorial - coming soon</li> <li>Extraction Tutorial - Extract clinical data from text</li> </ul> <p>This tutorial demonstrates production-ready context engineering patterns for healthcare AI applications with measurable performance improvements and clinical relevance.</p>"},{"location":"tutorials/medication_extraction/","title":"Medication Extraction","text":""},{"location":"tutorials/medication_extraction/#medication-extraction-typed-records-composition-hacs","title":"Medication extraction \u2192 typed records \u2192 Composition (HACS)","text":"<p>In this tutorial, you will extract medication data from clinical text, validate it with typed models via <code>pick()</code>, instantiate FHIR\u2011aligned resources, and group them into a <code>Composition</code> for persistence.</p> <p>If you're new to HACS, complete the Quick Start first.</p>"},{"location":"tutorials/medication_extraction/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Quick Start</li> <li>A LangChain ChatModel API key (OpenAI, Anthropic, etc.)</li> <li>A running Postgres if you plan to persist records (set <code>DATABASE_URL</code>)</li> </ul> <p><pre><code>from hacs_utils.structured import generate_chunked_extractions\nfrom hacs_models import ChunkingPolicy\nfrom langchain_openai import ChatOpenAI  # or any ChatModel\n\n# Input text\ninput_text = (\n    \"The patient was prescribed Lisinopril and Metformin last month.\\n\"\n    \"He takes the Lisinopril 10mg daily for hypertension, but often misses\\n\"\n    \"his Metformin 500mg dose which should be taken twice daily for diabetes.\\n\"\n)\n\n# Prompt with grouping rule\nprompt = (\n    \"Extract medications with their details, using attributes to group related information:\\n\\n\"\n    \"1. Extract entities in the order they appear in the text\\n\"\n    \"2. Each entity must have a 'medication_group' attribute linking it to its medication\\n\"\n    \"3. All details about a medication should share the same medication_group value\\n\"\n)\n\n### 1) Grounded mentions (optional)\n# Run extraction with source grounding and chunk alignment to see mentions and spans\nllm = ChatOpenAI(model=\"gpt-5\", temperature=0)\nextractions = generate_chunked_extractions(\n    client=llm,\n    text=input_text,\n    base_prompt=prompt,\n    policy=ChunkingPolicy(max_chars=1000, overlap=100),\n    provider=\"openai\",\n)\n\n# Group by medication_group attribute\nmed_groups: dict[str, list] = {}\nfor e in extractions:\n    attrs = getattr(e, \"attributes\", None) or {}\n    group = attrs.get(\"medication_group\")\n    if not group:\n        print(f\"Warning: Missing medication_group for {e.extraction_text}\")\n        continue\n    med_groups.setdefault(group, []).append(e)\n\nprint(f\"Input text: {input_text.strip()}\\n\")\nprint(\"Extracted Medications:\")\nfor med, items in med_groups.items():\n    print(f\"\\n* {med}\")\n    for e in items:\n        pos = \"\"\n        if e.char_interval and e.char_interval.start_pos is not None and e.char_interval.end_pos is not None:\n            pos = f\" (pos: {e.char_interval.start_pos}-{e.char_interval.end_pos})\"\n        print(f\"  \u2022 {e.extraction_class.capitalize()}: {e.extraction_text}{pos}\")\n\n# Visualize extractions\nfrom hacs_utils.visualization import visualize_annotations\nfrom hacs_models import AnnotatedDocument\nannotated = AnnotatedDocument(text=input_text, extractions=extractions)\nvisualize_annotations(annotated)\n</code></pre> [Visualization] annotations HTML type: str [Visualization] annotations HTML length: 1555 <pre><code>Rendered (Markdown):\n\nAnnotations preview:\n\n| Class | Span | Snippet |\n|---|---|---|\n| Blood Pressure | [3-9] | \u2026 BP  **128/82** , HR 72 \u2026 |\n\n### 2) Structured records (typed) with pick() + persist\nfrom hacs_models import MedicationRequest, Patient\nfrom hacs_utils.structured import extract\nfrom hacs_tools.domains.modeling import pin_resource, make_reference, set_reference\nfrom hacs_tools.domains.database import save_record\nfrom hacs_models.composition import Composition\n\n# Define a subset schema for MedicationRequest (typed)\nMedicationRequestInfo = MedicationRequest.pick(\"status\", \"intent\", \"medication_codeable_concept\", \"dosage_instruction\")\n\n# Extract a list of medication requests from text (typed, many=True)\nmr_list = extract(\n  llm,\n  prompt=(\n    \"From the text, extract medication requests with status, intent, medication_codeable_concept, and dosage_instruction.\\n\"\n    \"Use the medication name as displayed in the text.\"\n    f\"\\n\\nTEXT:\\n{input_text}\"\n  ),\n  output_model=MedicationRequestInfo,\n  many=True,\n)\n\n# Instantiate and persist Patient and MedicationRequests\npatient_res = pin_resource(\"Patient\", {\"full_name\": \"Eve Everywoman\"})\npat_dict = (patient_res.data or {}).get(\"resource\", {})\n\n# Always visualize created records\nfrom hacs_utils.visualization import resource_to_markdown\nprint(\"Created Patient:\")\nprint(resource_to_markdown(pat_dict, include_json=False))\n\nsave_record(resource=pat_dict)\n\npat_ref = make_reference(resource=pat_dict).data[\"reference\"]\npersisted_mrs = []\nfor mri in mr_list:\n  mr_res = pin_resource(\"MedicationRequest\", mri.model_dump())\n  mr_dict = (mr_res.data or {}).get(\"resource\", {})\n\n  # Always visualize created medication records\n  print(f\"Created MedicationRequest:\")\n  print(resource_to_markdown(mr_dict, include_json=False))\n\n  # Set subject reference to patient\n  mr_with_subject = set_reference(mr_dict, field=\"subject\", reference=pat_ref).data[\"resource\"]\n  save_record(resource=mr_with_subject)\n  persisted_mrs.append(mr_with_subject)\n\n### 3) Build a Composition with a medications section and persist\ncomp = Composition(title=\"Medications on Discharge\")\nlines = []\nfor group, items in med_groups.items():\n  details = \", \".join(e.extraction_text for e in items if e.extraction_class != \"medication\")\n  lines.append(f\"{group}: {details}\")\ncomp.add_section(title=\"Medications\", text=\"\\n\".join(lines))\nsave_record(resource=comp.model_dump())\n</code></pre></p> <p>Notes: - <code>generate_chunked_extractions</code> performs chunking, extraction, alignment, and best\u2011effort deduplication, mirroring LangExtract\u2019s approach. - For large texts, increase <code>extraction_passes</code> by calling the function per pass and merging results.</p>"}]}