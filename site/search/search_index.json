{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HACS Documentation","text":"<p>Healthcare Agent Communication Standard</p> <p>Context-engineering framework for building healthcare AI with structured memory, clinical reasoning, and FHIR compliance.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Quick Start - Install HACS and build healthcare AI in 5 minutes</li> <li>API Reference - Complete API documentation  </li> <li>HACS Tools - 20+ healthcare tools reference</li> <li>Testing Guide - Testing and validation</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<ul> <li>Complete Context Engineering - Full workflow with all 4 strategies</li> <li>Medication Extraction - Extract clinical data from text</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>20+ Tools - Specialized for clinical workflows via MCP protocol</li> <li>FHIR Models - Type-safe Pydantic models for healthcare data</li> <li>Context Engineering - Four strategies: Isolate, Select, Compress, Write  </li> <li>Actor Security - Role-based permissions with audit trails</li> <li>AI Framework Ready - Works with LangGraph, LangChain, and any MCP client</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph LR\n  A[Healthcare AI] --&gt; B[HACS Tools]\n  B --&gt; C[(PostgreSQL)]\n  B --&gt; D[Vector Store]\n  B --&gt; E[FHIR Models]\n</code></pre> <p>Ready to start? Begin with the Quick Start Guide.</p>"},{"location":"api-reference/","title":"HACS API Reference","text":"<p>Complete API documentation for HACS (Healthcare Agent Communication Standard)</p> <p>This reference covers all HACS packages, tools, and integration patterns for healthcare AI development.</p> <p>\ud83d\udcda Related Documentation: - Quick Start Guide - Build a pipeline in 5 minutes - HACS Tools Reference - Tool catalog - Complete Context Engineering - Full workflow tutorial - Medication Extraction - Extract clinical data from text</p>"},{"location":"api-reference/#core-hacs-packages","title":"\ud83e\uddec Core HACS Packages","text":""},{"location":"api-reference/#hacs-models-healthcare-data-models","title":"<code>hacs-models</code> - Healthcare Data Models","text":"<p>FHIR-compliant healthcare models for AI agents</p> <pre><code>from hacs_models import Patient, Observation, Actor, MemoryBlock\nimport json\n\n# Core healthcare models\npatient = Patient(\n    full_name=\"John Smith\",\n    birth_date=\"1980-01-15\",\n    gender=\"male\",\n    agent_context={\"chief_complaint\": \"routine_checkup\"}\n)\n\nprint(f\"\ud83c\udfe5 Patient Created:\")\nprint(f\"   ID: {patient.id}\")\nprint(f\"   Name: {patient.full_name}\")\nprint(f\"   Birth Date: {patient.birth_date}\")\nprint(f\"   Gender: {patient.gender}\")\nprint(f\"   Agent Context: {patient.agent_context}\")\n\n# Clinical observations\nobservation = Observation(\n    status=\"final\",\n    code_text=\"Blood Pressure\", \n    value=\"120\",\n    unit=\"mmHg\",\n    patient_id=patient.id\n)\n\nprint(f\"\\n\ud83d\udcca Observation Created:\")\nprint(f\"   ID: {observation.id}\")\nprint(f\"   Code: {observation.code_text}\")\nprint(f\"   Value: {observation.value} {observation.unit}\")\nprint(f\"   Status: {observation.status}\")\nprint(f\"   Patient ID: {observation.patient_id}\")\n\n# Clinical memory for AI agents\nmemory = MemoryBlock(\n    memory_type=\"episodic\",\n    content=\"Patient reports feeling well, no concerns\",\n    importance_score=0.7,\n    tags=[\"wellness\", \"routine\"]\n)\n\nprint(f\"\\n\ud83e\udde0 Memory Block Created:\")\nprint(f\"   ID: {memory.id}\")\nprint(f\"   Type: {memory.memory_type}\")\nprint(f\"   Content: {memory.content}\")\nprint(f\"   Importance: {memory.importance_score}\")\nprint(f\"   Tags: {memory.tags}\")\n</code></pre> <p>Expected Output: <pre><code>\ud83c\udfe5 Patient Created:\n   ID: patient-john-smith-1980-01-15-uuid\n   Name: John Smith\n   Birth Date: 1980-01-15\n   Gender: male\n   Agent Context: {'chief_complaint': 'routine_checkup'}\n\n\ud83d\udcca Observation Created:\n   ID: observation-bp-120-uuid\n   Code: Blood Pressure\n   Value: 120 mmHg\n   Status: final\n   Patient ID: patient-john-smith-1980-01-15-uuid\n\n\ud83e\udde0 Memory Block Created:\n   ID: memory-episodic-wellness-uuid\n   Type: episodic\n   Content: Patient reports feeling well, no concerns\n   Importance: 0.7\n   Tags: ['wellness', 'routine']\n</code></pre></p> <p>Key Classes: - <code>Patient</code> - Patient demographics and clinical context - <code>Observation</code> - Clinical measurements and findings - <code>Encounter</code> - Healthcare visits and episodes - <code>Actor</code> - Healthcare providers with permissions - <code>MemoryBlock</code> - AI agent memory structures - <code>Evidence</code> - Clinical guidelines and decision support</p>"},{"location":"api-reference/#hacs-tools-healthcare-tools-4-domains","title":"<code>hacs-tools</code> - Healthcare Tools (4 domains)","text":"<p>Low-level, LLM-friendly tools organized into 4 domains: modeling, extraction, database, agents.</p> <pre><code>from hacs_tools.domains.database import save_record, read_record\nfrom hacs_tools.domains.modeling import describe_models, list_model_fields, plan_bundle_schema\nfrom hacs_tools.domains.extraction import synthesize_mapping_spec, extract_variables, apply_mapping_spec\nfrom hacs_tools.domains.agents import write_scratchpad, inject_preferences\n\n# Create healthcare records (records CRUD)\nresult = await save_record(patient.model_dump())\n\n# Search clinical records  \nsearch_result = {\n    \"result\": []  # via dedicated search tool or DB adapter\n}\n\n# Composition + ResourceBundle with MappingSpec/SourceBinding (canonical)\n</code></pre> <p>Tool Categories (low-level only): - Resource Management - CRUD, modeling, bundles - Memory Operations - Clinical memory and context management - Schema Discovery - Resource type exploration and analysis - Workflow Modeling - ActivityDefinition, PlanDefinition, Task adapters</p>"},{"location":"api-reference/#hacs-auth-healthcare-security","title":"<code>hacs-auth</code> - Healthcare Security","text":"<p>Actor-based security with role-based permissions</p> <pre><code>from hacs_auth import Actor, ActorRole, require_permission\n\n# Healthcare provider with permissions\nphysician = Actor(\n    name=\"Dr. Sarah Chen\",\n    role=ActorRole.PHYSICIAN,\n    organization=\"Mount Sinai\",\n    permissions=[\"patient:read\", \"patient:write\", \"observation:write\"]\n)\n\nprint(f\"\ud83d\udc69\u200d\u2695\ufe0f Healthcare Provider Created:\")\nprint(f\"   Actor ID: {physician.id}\")\nprint(f\"   Name: {physician.name}\")\nprint(f\"   Role: {physician.role}\")\nprint(f\"   Organization: {physician.organization}\")\nprint(f\"   Permissions: {physician.permissions}\")\nprint(f\"   Active Session: {physician.has_active_session()}\")\n\n# Test permission checks\nprint(f\"\\n\ud83d\udd10 Permission Checks:\")\nprint(f\"   Can read patients: {physician.has_permission('patient:read')}\")\nprint(f\"   Can write medications: {physician.has_permission('medication:write')}\")\nprint(f\"   Can write observations: {physician.has_permission('observation:write')}\")\n\n# Permission-protected functions\n@require_permission(\"patient:read\")\ndef get_patient_data(patient_id: str, **kwargs):\n    token_data = kwargs.get(\"token_data\", {})\n    actor_name = token_data.get(\"actor_name\", \"Unknown\")\n    return f\"Patient data for {patient_id} accessed by {actor_name}\"\n\nprint(f\"\\n\ud83d\udee1\ufe0f Protected Function Created:\")\nprint(f\"   Function: get_patient_data\")\nprint(f\"   Required Permission: patient:read\")\n\n# Simulate function call with proper permissions\ntry:\n    # In real usage, this would be handled by the authentication middleware\n    mock_token_data = {\"actor_name\": physician.name, \"permissions\": physician.permissions}\n    result = get_patient_data(\"patient-123\", token_data=mock_token_data)\n    print(f\"   \u2705 Access granted: {result}\")\nexcept Exception as e:\n    print(f\"   \u274c Access denied: {e}\")\n</code></pre> <p>Expected Output: <pre><code>\ud83d\udc69\u200d\u2695\ufe0f Healthcare Provider Created:\n   Actor ID: actor-dr-sarah-chen-physician-uuid\n   Name: Dr. Sarah Chen\n   Role: ActorRole.PHYSICIAN\n   Organization: Mount Sinai\n   Permissions: ['patient:read', 'patient:write', 'observation:write']\n   Active Session: False\n\n\ud83d\udd10 Permission Checks:\n   Can read patients: True\n   Can write medications: False\n   Can write observations: True\n\n\ud83d\udee1\ufe0f Protected Function Created:\n   Function: get_patient_data\n   Required Permission: patient:read\n\n   \u2705 Access granted: Patient data for patient-123 accessed by Dr. Sarah Chen\n</code></pre></p>"},{"location":"api-reference/#hacs-persistence-data-storage","title":"<code>hacs-persistence</code> - Data Storage","text":"<p>PostgreSQL + pgvector for healthcare data</p> <pre><code>from hacs_persistence import HACSConnectionFactory\nimport time\n\n# Database connection with migrations\nfactory = HACSConnectionFactory()\nprint(\"\ud83d\udd27 Creating database adapter...\")\nadapter = factory.get_adapter(auto_migrate=True)\n\nprint(f\"\ud83d\udcca Database Adapter Created:\")\nprint(f\"   Factory: {type(factory).__name__}\")\nprint(f\"   Adapter: {type(adapter).__name__}\")\nprint(f\"   Auto-migrate: True\")\n\n# Store healthcare resources (using patient from previous example)\nprint(f\"\\n\ud83d\udcbe Storing Healthcare Resource:\")\nstart_time = time.time()\nsaved_patient = adapter.save_record(patient)\nsave_time = (time.time() - start_time) * 1000\n\nprint(f\"   Resource Type: Patient\")\nprint(f\"   Patient ID: {saved_patient.get('id', 'N/A')}\")\nprint(f\"   Save Time: {save_time:.1f}ms\")\nprint(f\"   Status: \u2705 Saved successfully\")\n\n# Vector operations for clinical embeddings\nprint(f\"\\n\ud83d\udd0d Vector Operations:\")\nclinical_embedding = [0.1, 0.2, 0.3, -0.1, 0.5, 0.8, -0.3, 0.4]  # 8-dimensional example\nstart_time = time.time()\n\nadapter.store_vector(\n    resource_id=\"patient_123\",\n    embedding=clinical_embedding,\n    metadata={\"type\": \"patient_summary\", \"dimension\": len(clinical_embedding)}\n)\n\nvector_time = (time.time() - start_time) * 1000\n\nprint(f\"   Resource ID: patient_123\")\nprint(f\"   Embedding Dimension: {len(clinical_embedding)}\")\nprint(f\"   Metadata: {{'type': 'patient_summary', 'dimension': {len(clinical_embedding)}}}\")\nprint(f\"   Store Time: {vector_time:.1f}ms\")\nprint(f\"   Status: \u2705 Vector stored successfully\")\n\n# Test vector similarity search\nprint(f\"\\n\ud83d\udd0e Vector Similarity Search:\")\nquery_embedding = [0.15, 0.18, 0.25, -0.08, 0.52, 0.75, -0.28, 0.35]\nstart_time = time.time()\n\nsimilar_records = adapter.vector_search(\n    query_embedding=query_embedding,\n    resource_type=\"patient\", \n    top_k=3\n)\n\nsearch_time = (time.time() - start_time) * 1000\n\nprint(f\"   Query Dimension: {len(query_embedding)}\")\nprint(f\"   Resource Type: patient\")\nprint(f\"   Top K: 3\")\nprint(f\"   Search Time: {search_time:.1f}ms\")\nprint(f\"   Results Found: {len(similar_records)}\")\n\nif similar_records:\n    for i, record in enumerate(similar_records[:2], 1):\n        similarity = record.get('similarity_score', 'N/A')\n        print(f\"   {i}. ID: {record.get('resource_id', 'N/A')} (similarity: {similarity})\")\n</code></pre> <p>Expected Output: <pre><code>\ud83d\udd27 Creating database adapter...\n\ud83d\udcca Database Adapter Created:\n   Factory: HACSConnectionFactory\n   Adapter: PostgreSQLAdapter\n   Auto-migrate: True\n\n\ud83d\udcbe Storing Healthcare Resource:\n   Resource Type: Patient\n   Patient ID: patient-john-smith-1980-01-15-uuid\n   Save Time: 23.4ms\n   Status: \u2705 Saved successfully\n\n\ud83d\udd0d Vector Operations:\n   Resource ID: patient_123\n   Embedding Dimension: 8\n   Metadata: {'type': 'patient_summary', 'dimension': 8}\n   Store Time: 15.2ms\n   Status: \u2705 Vector stored successfully\n\n\ud83d\udd0e Vector Similarity Search:\n   Query Dimension: 8\n   Resource Type: patient\n   Top K: 3\n   Search Time: 8.7ms\n   Results Found: 1\n   1. ID: patient_123 (similarity: 0.987)\n</code></pre></p>"},{"location":"api-reference/#hacs-utils-integration-utilities","title":"<code>hacs-utils</code> - Integration Utilities","text":"<p>MCP server and framework integrations</p> <pre><code># Start MCP server\nfrom hacs_utils.mcp.cli import run_server\nrun_server()\n\n# LangGraph integration (use unified LangChain tools)\nfrom hacs_utils.integrations.langchain.tools import langchain_tools\nagent_tools = langchain_tools()\n</code></pre>"},{"location":"api-reference/#mcp-server-api","title":"\ud83d\udee0\ufe0f MCP Server API","text":"<p>The HACS MCP server provides all tools via JSON-RPC at <code>HACS_MCP_SERVER_URL</code>.</p>"},{"location":"api-reference/#base-request-format","title":"Base Request Format","text":"<pre><code>import requests\nimport os\n\ndef call_mcp_tool(method, params=None):\n    server_url = os.getenv('HACS_MCP_SERVER_URL', 'http://127.0.0.1:8000')\n    response = requests.post(server_url, json={\n        \"jsonrpc\": \"2.0\",\n        \"method\": method,\n        \"params\": params or {},\n        \"id\": 1\n    })\n    return response.json()\n</code></pre>"},{"location":"api-reference/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api-reference/#toolslist-list-available-tools-with-domains-and-tags","title":"<code>tools/list</code> - List Available Tools (with domains and tags)","text":"<pre><code>tools = call_mcp_tool(\"tools/list\")\nprint(f\"Available tools: {len(tools['result']['tools'])}\")\n# Example tool metadata: {\"name\": \"save_record\", \"domain\": \"database\", \"tags\": [\"save\", \"record\", \"domain:database\", \"records\"]}\n</code></pre>"},{"location":"api-reference/#toolscall-execute-tool","title":"<code>tools/call</code> - Execute Tool","text":"<pre><code>result = call_mcp_tool(\"tools/call\", {\n    \"name\": \"save_record\",\n    \"arguments\": {\n        \"resource_type\": \"Patient\",\n        \"resource_data\": {\n            \"full_name\": \"John Smith\",\n            \"birth_date\": \"1980-01-15\"\n        }\n    }\n})\n</code></pre>"},{"location":"api-reference/#complete-tool-reference","title":"\ud83d\udccb Complete Tool Reference","text":""},{"location":"api-reference/#resource-management-tools","title":"Resource Management Tools","text":"<p>Use the database domain for records CRUD:</p> <pre><code>result = use_hacs_tool(\"save_record\", {\n    \"resource_type\": \"Patient\",\n    \"resource_data\": {\n        \"full_name\": \"John Smith\",\n        \"birth_date\": \"1980-01-15\",\n        \"gender\": \"male\"\n    }\n})\n\npatient = use_hacs_tool(\"read_record\", {\"resource_type\": \"Patient\", \"resource_id\": \"patient-123\"})\n\nresult = use_hacs_tool(\"update_record\", {\"resource_type\": \"Patient\", \"resource_id\": \"patient-123\", \"patch\": {\"agent_context\": {\"primary_care_provider\": \"Dr. Johnson\"}}})\n\nresult = use_hacs_tool(\"delete_record\", {\"resource_type\": \"Patient\", \"resource_id\": \"patient-123\"})\n</code></pre>"},{"location":"api-reference/#memory-operations-tools","title":"Memory Operations Tools","text":""},{"location":"api-reference/#create_hacs_memory","title":"<code>create_hacs_memory</code>","text":"<p>Store clinical memories for AI agents.</p> <pre><code>memory = use_hacs_tool(\"create_hacs_memory\", {\n    \"content\": \"Patient reports improvement after treatment\",  # Required\n    \"memory_type\": \"episodic\",                               # Required: episodic, semantic, working\n    \"importance_score\": 0.8,                                 # Optional: 0.0-1.0\n    \"tags\": [\"treatment\", \"improvement\"],                    # Optional: List of tags\n    \"context_metadata\": {                                    # Optional: Additional context\n        \"patient_id\": \"patient-123\",\n        \"encounter_id\": \"encounter-456\"\n    }\n})\n</code></pre>"},{"location":"api-reference/#search_hacs_memories","title":"<code>search_hacs_memories</code>","text":"<p>Semantic search of clinical memories.</p> <pre><code>memories = use_hacs_tool(\"search_hacs_memories\", {\n    \"query\": \"medication response\",      # Required: Search query\n    \"memory_type\": \"episodic\",           # Optional: Memory type filter\n    \"limit\": 5,                          # Optional: Result limit\n    \"similarity_threshold\": 0.7          # Optional: Minimum similarity\n})\n</code></pre>"},{"location":"api-reference/#check_memory","title":"<code>check_memory</code>","text":"<p>Gather and filter memories for agent context construction.</p> <pre><code>ctx = use_hacs_tool(\"check_memory\", {\n    \"actor_id\": actor.id,\n    \"memory_types\": [\"episodic\", \"procedural\"],\n    \"min_importance\": 0.5,\n    \"limit\": 20\n})\n</code></pre>"},{"location":"api-reference/#workflow-modeling-tools","title":"Workflow Modeling Tools","text":""},{"location":"api-reference/#template-registration-and-instantiation","title":"Template registration and instantiation","text":"<p>Register templates and instantiate stacks.</p> <pre><code>result = use_hacs_tool(\"register_stack_template\", {\"template\": {\"name\": \"Example\", \"version\": \"1.0.0\", \"layers\": [], \"variables\": {}}})\n</code></pre>"},{"location":"api-reference/#create_activity_definition-create_plan_definition-create_task_from_activity-complete_task-fail_task","title":"<code>create_activity_definition</code>, <code>create_plan_definition</code>, <code>create_task_from_activity</code>, <code>complete_task</code>, <code>fail_task</code>","text":"<p>Low-level adapters for workflow resources; keep business logic in workflows.</p>"},{"location":"api-reference/#modeling-and-schema-tools","title":"Modeling and Schema Tools","text":""},{"location":"api-reference/#describe_models","title":"<code>describe_models</code>","text":"<p>Explore available healthcare model types and get summaries.</p> <pre><code>resources = use_hacs_tool(\"describe_models\", {\n    \"resource_types\": [\"Patient\", \"Observation\"],\n    \"include_examples\": True\n})\n</code></pre>"},{"location":"api-reference/#list_model_fields","title":"<code>list_model_fields</code>","text":"<p>List fields for a healthcare model.</p> <pre><code>schema = use_hacs_tool(\"list_model_fields\", {\n    \"resource_type\": \"Patient\"\n})\n</code></pre>"},{"location":"api-reference/#framework-integrations","title":"\ud83d\udd17 Framework Integrations","text":""},{"location":"api-reference/#langchain-integration-deprecated","title":"LangChain Integration (deprecated)","text":"<p>Shims are retained for compatibility. Prefer LangGraph and MCP.</p>"},{"location":"api-reference/#langgraph-integration","title":"LangGraph Integration","text":"<pre><code>from langgraph.graph import StateGraph, END\nfrom hacs_utils.integrations.langchain.tools import langchain_tools\n\n# Get HACS tools for LangGraph\ntools = langchain_tools()\n\n# Create healthcare workflow\nworkflow = StateGraph(state_schema)\nworkflow.add_node(\"agent\", agent_with_tools)\nworkflow.add_edge(\"agent\", END)\n\nhealthcare_agent = workflow.compile()\n</code></pre>"},{"location":"api-reference/#knowledge-management-evidence","title":"Knowledge Management (Evidence)","text":"<pre><code>evidence = use_hacs_tool(\"search_evidence\", {\"query\": \"beta-blockers in heart failure\", \"top_k\": 5})\n</code></pre>"},{"location":"api-reference/#crewai-integration","title":"CrewAI Integration","text":"<pre><code>from crewai import Agent, Task, Crew\nfrom hacs_utils.integrations.langchain.tools import langchain_tools\ntools = langchain_tools()\n</code></pre>"},{"location":"api-reference/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"<pre><code># Required - Database\nDATABASE_URL=postgresql://hacs:password@localhost:5432/hacs\n\n# Required - LLM Provider (choose one)\nANTHROPIC_API_KEY=sk-ant-...     # Recommended for healthcare\nOPENAI_API_KEY=sk-...            # Alternative\n\n# Optional - MCP Server\nHACS_MCP_SERVER_URL=http://127.0.0.1:8000\nHACS_ENVIRONMENT=development     # development, staging, production\nHACS_DEV_MODE=true              # Bypass some security in dev\n\n# Optional - Organization\nHACS_ORGANIZATION=your_health_system\nHEALTHCARE_SYSTEM_NAME=Your Health System\n\n# Optional - Security\nHACS_API_KEY=key1,key2         # Comma-separated API keys\nHACS_API_KEY_FILE=/path/to/keys.txt\n</code></pre>"},{"location":"api-reference/#docker-configuration","title":"Docker Configuration","text":"<pre><code># docker-compose.yml\nservices:\n  hacs-postgres:\n    image: pgvector/pgvector:pg16\n    environment:\n      POSTGRES_DB: hacs\n      POSTGRES_USER: hacs\n      POSTGRES_PASSWORD: hacs_dev\n\n  hacs-mcp-server:\n    build: .\n    ports:\n      - \"${HACS_MCP_PORT:-8000}:8000\"\n    environment:\n      - DATABASE_URL=postgresql://hacs:hacs_dev@postgres:5432/hacs\n      - HACS_ENVIRONMENT=development\n</code></pre>"},{"location":"api-reference/#security-reference","title":"\ud83d\udd10 Security Reference","text":""},{"location":"api-reference/#actor-based-permissions","title":"Actor-Based Permissions","text":"<pre><code>from hacs_auth import Actor, ActorRole\n\n# Healthcare roles with different permissions\nphysician = Actor(\n    role=ActorRole.PHYSICIAN,\n    permissions=[\n        \"patient:read\", \"patient:write\",\n        \"observation:read\", \"observation:write\", \n        \"memory:read\", \"memory:write\"\n    ]\n)\n\nnurse = Actor(\n    role=ActorRole.NURSE,\n    permissions=[\n        \"patient:read\",\n        \"observation:read\", \"vitals:write\"\n    ]\n)\n\nai_agent = Actor(\n    role=ActorRole.AGENT,\n    permissions=[\n        \"patient:read\",\n        \"memory:read\", \"analytics:population\"\n    ]\n)\n</code></pre>"},{"location":"api-reference/#session-management","title":"Session Management","text":"<pre><code># Start actor session\nphysician.start_session(\"session_123\")\n\n# Check session status\nif physician.has_active_session():\n    print(\"Session is active\")\n\n# Session timeout (default 8 hours)\nif physician.is_session_expired(timeout_minutes=480):\n    print(\"Session expired, need to re-authenticate\")\n</code></pre>"},{"location":"api-reference/#performance-guidelines","title":"\ud83d\udcca Performance Guidelines","text":""},{"location":"api-reference/#optimal-tool-usage","title":"Optimal Tool Usage","text":"<pre><code># \u2705 GOOD: Use selective data extraction\npatient_data = patient.model_dump(include={\n    \"full_name\", \"birth_date\", \"agent_context\"\n})\n\n# \u274c AVOID: Full serialization with unnecessary fields\npatient_data = patient.model_dump()  # Includes FHIR overhead\n\n# \u2705 GOOD: Use text summaries for LLM context\nsummary = patient.summary()  # \"Patient patient-123\"\n\n# \u2705 GOOD: Batch operations (use your own query adapter or DB filtering)\n</code></pre>"},{"location":"api-reference/#memory-management","title":"Memory Management","text":"<pre><code># \u2705 GOOD: Set importance scores for relevance filtering\nmemory = MemoryBlock(\n    content=\"Clinical finding\",\n    importance_score=0.9,  # High importance\n    memory_type=\"episodic\"\n)\n\n# \u2705 GOOD: Use tags for efficient retrieval\nmemory.tags = [\"cardiology\", \"urgent\", \"followup_needed\"]\n\n# \u2705 GOOD: Include relevant context metadata\nmemory.context_metadata = {\n    \"patient_id\": \"patient-123\",\n    \"clinical_domain\": \"cardiology\",\n    \"urgency_level\": \"high\"\n}\n</code></pre>"},{"location":"api-reference/#error-handling","title":"\ud83d\udea8 Error Handling","text":""},{"location":"api-reference/#common-error-patterns","title":"Common Error Patterns","text":"<pre><code>def safe_hacs_tool_call(tool_name, arguments):\n    \"\"\"Robust HACS tool calling with error handling\"\"\"\n    try:\n        result = use_hacs_tool(tool_name, arguments)\n\n        if \"error\" in result:\n            print(f\"Tool error: {result['error']}\")\n            return None\n\n        return result.get(\"result\")\n\n    except requests.exceptions.ConnectionError:\n        print(\"MCP server not available\")\n        return None\n\n    except requests.exceptions.Timeout:\n        print(\"Tool call timed out\")\n        return None\n\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return None\n</code></pre>"},{"location":"api-reference/#validation-patterns","title":"Validation Patterns","text":"<pre><code># Validate before creating resources\nvalidation = use_hacs_tool(\"validate_record_data\", {\n    \"resource_type\": \"Patient\",\n    \"data\": patient_data\n})\n\nif validation[\"result\"][\"is_valid\"]:\n    # Proceed with creation\n    result = use_hacs_tool(\"create_record\", {\n        \"resource_type\": \"Patient\",\n        \"resource_data\": patient_data\n    })\nelse:\n    print(f\"Validation errors: {validation['result']['errors']}\")\n</code></pre>"},{"location":"api-reference/#support-and-resources","title":"\ud83d\udcde Support and Resources","text":"<ul> <li>GitHub Repository - Source code and issues</li> <li>Documentation Hub - Complete documentation index</li> <li>Quick Start Guide - Get running in 5 minutes</li> <li>Healthcare Tools - Detailed tool documentation</li> <li>Integration guides: LangGraph (see package README), LangChain (see package README), MCP (see package README)</li> </ul> <p>This API reference is maintained as part of the HACS project. For the latest updates, see the GitHub repository.</p>"},{"location":"gallery/","title":"HACS Resource Gallery","text":"<p>Quick visual previews for common HACS resources. These render best in notebooks; otherwise the functions return raw HTML strings you can embed.</p>"},{"location":"gallery/#prereq","title":"Prereq","text":"<pre><code>uv pip install -U hacs-utils\n</code></pre>"},{"location":"gallery/#patient","title":"Patient","text":"<pre><code>from hacs_models import Patient\nfrom hacs_utils.visualization import visualize_resource\n\npatient = Patient(full_name=\"Jane Doe\", birth_date=\"1990-01-01\", gender=\"female\")\nvisualize_resource(patient)\n</code></pre>"},{"location":"gallery/#observation","title":"Observation","text":"<pre><code>from hacs_models import Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\nfrom hacs_utils.visualization import visualize_resource\n\nobs = Observation(\n    status=ObservationStatus.FINAL,\n    code=CodeableConcept(text=\"Blood Pressure\"),\n    value_quantity=Quantity(value=128.0, unit=\"mmHg\"),\n    subject=\"Patient/p1\",\n)\nvisualize_resource(obs)\n</code></pre>"},{"location":"gallery/#diagnosticreport","title":"DiagnosticReport","text":"<pre><code>from hacs_models import DiagnosticReport, CodeableConcept\nfrom hacs_utils.visualization import visualize_resource\n\nreport = DiagnosticReport(status=\"final\", code=CodeableConcept(text=\"Chest X-ray\"), subject=\"Patient/p1\")\nvisualize_resource(report)\n</code></pre>"},{"location":"gallery/#annotated-document-extractions","title":"Annotated Document (extractions)","text":"<pre><code>from hacs_models import AnnotatedDocument, Extraction, CharInterval\nfrom hacs_utils.visualization import visualize_annotations\n\ndoc = AnnotatedDocument(\n    text=\"BP 128/82, HR 72\",\n    extractions=[\n        Extraction(\n            extraction_class=\"blood_pressure\",\n            extraction_text=\"128/82\",\n            char_interval=CharInterval(start_pos=3, end_pos=9),\n        ),\n        Extraction(\n            extraction_class=\"heart_rate\",\n            extraction_text=\"72\",\n            char_interval=CharInterval(start_pos=15, end_pos=17),\n        ),\n    ],\n)\nvisualize_annotations(doc)\n</code></pre>"},{"location":"hacs-tools/","title":"HACS Tools Reference","text":"<p>Low-level HACS tools for resource modeling, bundles, schema discovery, memory, and minimal workflow modeling. High-level, business-specific tools have been removed; keep prompts/logic in workflows.</p> <p>New to HACS? Start with the Quick Start.</p>"},{"location":"hacs-tools/#how-to-call-tools-two-modes","title":"How to call tools (two modes)","text":"<ul> <li>Python API (in-process): import functions from <code>hacs_tools.domains.*</code> and call them directly (sync/async as defined). Best for Python apps/tests.</li> <li>MCP API (out-of-process): call <code>tools/call</code> over JSON-RPC with the tool <code>name</code> and <code>arguments</code>. Best for agents, non-Python clients, or sandboxed contexts.</li> </ul> <p>Notes: - Function names are identical in both modes. Some tools are async in Python (e.g., database); await them when used directly. - <code>tools/list</code> returns a curated set for quick starts. Any registry tool can still be called via <code>tools/call</code> by name.</p> <p>Examples</p> <p>Python API (Terminology): <pre><code>from hacs_tools.domains.terminology import get_possible_codes\nreport = get_possible_codes(composition_doc, query=\"hypertension\")\n</code></pre></p> <p>MCP API (CRUD): <pre><code>import requests\nrequests.post(\"http://localhost:8000/\", json={\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tools/call\",\n  \"params\": {\"name\": \"save_record\", \"arguments\": {\"resource_type\": \"Patient\", \"resource_data\": {\"full_name\": \"Jane Doe\"}}},\n  \"id\": 1\n})\n</code></pre></p>"},{"location":"hacs-tools/#context-engineering-tool-categories","title":"Context Engineering Tool Categories","text":"<p>Each tool category implements specific context engineering strategies optimized for healthcare AI:</p>"},{"location":"hacs-tools/#resource-management-8-tools","title":"\ud83d\udd0d Resource Management (8 tools)","text":"<p>\ud83c\udfaf SELECT + \ud83d\udd12 ISOLATE Strategies: Healthcare resource operations with selective data access and compliance boundaries.</p> <p>Core CRUD operations implementing context selection and isolation for healthcare AI agents:</p>"},{"location":"hacs-tools/#save_record","title":"<code>save_record</code>","text":"<p>\ud83c\udfaf SELECT: Create healthcare resources with selective data extraction</p> <pre><code># SELECT: Create patient with only essential clinical context\npatient_data = patient.model_dump(exclude={\n    \"text\", \"contained\", \"extension\", \"modifier_extension\"  # Exclude FHIR overhead\n})\n\nresult = use_tool(\"save_record\", {\n    \"resource_type\": \"Patient\",\n    \"resource_data\": patient_data  # Optimized clinical context only\n})\n</code></pre>"},{"location":"hacs-tools/#read_record","title":"<code>read_record</code>","text":"<p>Retrieve healthcare resource by ID and type</p> <pre><code>patient = use_tool(\"read_record\", {\n    \"resource_type\": \"Patient\", \n    \"resource_id\": \"patient-123\"\n})\n</code></pre>"},{"location":"hacs-tools/#update_record","title":"<code>update_record</code>","text":"<p>Update existing healthcare resource</p> <pre><code>use_tool(\"update_record\", {\n    \"resource_type\": \"Patient\",\n    \"resource_id\": \"patient-123\", \n    \"resource_data\": {\n        \"agent_context\": {\n            \"insurance_provider\": \"Blue Cross\"\n        }\n    }\n})\n</code></pre>"},{"location":"hacs-tools/#delete_record","title":"<code>delete_record</code>","text":"<p>Remove healthcare resource</p> <pre><code>use_tool(\"delete_record\", {\n    \"resource_type\": \"Patient\",\n    \"resource_id\": \"patient-123\"\n})\n</code></pre>"},{"location":"hacs-tools/#validate_resource","title":"<code>validate_resource</code>","text":"<p>Validate resource against model constraints</p> <pre><code>validation = use_tool(\"validate_resource\", {\n    \"resource_type\": \"Observation\",\n    \"data\": {\n        \"code_text\": \"Blood Pressure\",\n        \"value\": \"120/80\",\n        \"unit\": \"mmHg\"\n    }\n})\n</code></pre>"},{"location":"hacs-tools/#list_models","title":"<code>list_models</code>","text":"<p>List available HACS model types</p> <pre><code>models = use_tool(\"list_models\", {})\n</code></pre>"},{"location":"hacs-tools/#memory-operations-5-tools","title":"\ud83e\udde0 Memory Operations (5 tools)","text":"<p>\ud83d\udd8a\ufe0f WRITE + \ud83c\udfaf SELECT Strategies: Clinical memory generation and selective retrieval for healthcare AI cognition.</p> <p>Clinical memory operations implementing context writing and selective memory access:</p>"},{"location":"hacs-tools/#create_memory","title":"<code>create_memory</code>","text":"<p>\ud83d\udd8a\ufe0f WRITE: Generate clinical memories with structured context metadata</p> <pre><code># WRITE: Generate clinical context with metadata\nmemory = use_tool(\"create_memory\", {\n    \"content\": \"Patient reports 75% reduction in chest pain after metoprolol initiation. Excellent medication tolerance.\",\n    \"memory_type\": \"episodic\",\n    \"importance_score\": 0.9,  # High clinical significance\n    \"tags\": [\"medication_response\", \"chest_pain\", \"improvement\", \"metoprolol\"],\n    \"context_metadata\": {\n        \"patient_id\": \"patient-123\",\n        \"encounter_type\": \"follow_up\",\n        \"medication_change\": \"metoprolol_start\",\n        \"outcome_measure\": \"symptom_improvement\",\n        \"context_strategies_used\": [\"write\", \"select\"]  # Track context engineering\n    }\n})\n</code></pre>"},{"location":"hacs-tools/#search_memories","title":"<code>search_memories</code>","text":"<p>Semantic search across clinical memories</p> <pre><code>memories = use_tool(\"search_memories\", {\n    \"query\": \"medication side effects\",\n    \"memory_type\": \"episodic\", \n    \"limit\": 5,\n    \"similarity_threshold\": 0.7\n})\n</code></pre>"},{"location":"hacs-tools/#consolidate_memories","title":"<code>consolidate_memories</code>","text":"<p>Merge related memories for knowledge synthesis</p> <pre><code>consolidated = use_tool(\"consolidate_memories\", {\n    \"memory_ids\": [\"memory-1\", \"memory-2\", \"memory-3\"],\n    \"consolidation_strategy\": \"thematic_synthesis\"\n})\n</code></pre>"},{"location":"hacs-tools/#retrieve_context","title":"<code>retrieve_context</code>","text":"<p>Get relevant clinical context for current task</p> <pre><code>context = use_tool(\"retrieve_context\", {\n    \"query\": \"diabetes management plan\",\n    \"context_type\": \"clinical\",\n    \"max_memories\": 3\n})\n</code></pre>"},{"location":"hacs-tools/#analyze_memory_patterns","title":"<code>analyze_memory_patterns</code>","text":"<p>Identify patterns and insights from clinical memories</p> <pre><code>patterns = use_tool(\"analyze_memory_patterns\", {\n    \"memory_type\": \"episodic\",\n    \"analysis_focus\": \"patient_outcomes\",\n    \"time_window\": \"last_30_days\"\n})\n</code></pre>"},{"location":"hacs-tools/#check_memory","title":"<code>check_memory</code>","text":"<p>Collect a filtered set of memories (episodic/procedural) for agent context</p> <pre><code>context_memories = use_tool(\"check_memory\", {\n    \"actor_id\": actor.id,\n    \"memory_types\": [\"episodic\", \"procedural\"],\n    \"min_importance\": 0.6,\n    \"limit\": 20\n})\n</code></pre>"},{"location":"hacs-tools/#resource-specific-tools-examples","title":"\u2695\ufe0f Resource-Specific Tools (examples)","text":""},{"location":"hacs-tools/#event","title":"Event","text":"<pre><code>from hacs_tools.domains.resource_tools import (\n  create_event_tool, update_event_status_tool, add_event_performer_tool, schedule_event_tool, summarize_event_tool\n)\n\n# Create and schedule an event\nevt = create_event_tool(subject=\"Patient/patient-123\", code_text=\"physiotherapy_session\", when=\"2025-02-01T10:00:00Z\")\nif evt.success:\n  evt2 = schedule_event_tool(evt.data.get(\"event\"), start=\"2025-02-01T10:00:00Z\", end=\"2025-02-01T11:00:00Z\")\n  summary = summarize_event_tool((evt2.data or {}).get(\"event\") or evt.data.get(\"event\"))\n</code></pre>"},{"location":"hacs-tools/#appointment","title":"Appointment","text":"<pre><code>from hacs_tools.domains.resource_tools import (\n  schedule_appointment, reschedule_appointment, cancel_appointment, check_appointment_conflicts, send_appointment_reminders\n)\n\nappt = schedule_appointment(\"Patient/p1\", \"Practitioner/pr1\", \"2025-02-02T09:00:00Z\", \"2025-02-02T09:30:00Z\")\nconflicts = check_appointment_conflicts((appt.data or {}).get(\"appointment\"), existing=[])\n</code></pre>"},{"location":"hacs-tools/#careplan-careteam-goal","title":"CarePlan / CareTeam / Goal","text":"<pre><code>from hacs_tools.domains.resource_tools import (\n  create_care_plan, update_care_plan_progress, coordinate_care_activities, track_care_plan_goals,\n  assemble_care_team, assign_team_roles, coordinate_team_communication, track_team_responsibilities,\n  update_team_membership, track_goal_progress, update_goal_status, measure_goal_achievement, link_goal_to_careplan\n)\n\ncp = create_care_plan(\"Patient/p1\", title=\"Diabetes care plan\")\ntrack_goal_progress({\"description\": \"reduce A1C to &lt;7%\"}, current_value=7.5)\n</code></pre>"},{"location":"hacs-tools/#nutritionorder","title":"NutritionOrder","text":"<pre><code>from hacs_tools.domains.resource_tools import (\n  create_therapeutic_diet_order, manage_nutrition_restrictions, calculate_nutritional_requirements, coordinate_feeding_protocols\n)\n\ndiet = create_therapeutic_diet_order(\"Patient/p1\", diet_text=\"low_sodium\")\nreqs = calculate_nutritional_requirements(80.0, 175.0, 45, \"male\")\n</code></pre>"},{"location":"hacs-tools/#terminology-optional","title":"\ud83e\uddec Terminology (optional)","text":"<p>High-level terminology tools help agents understand and align clinical codes without mutating resources directly.</p>"},{"location":"hacs-tools/#visualize-resources-and-annotations","title":"Visualize resources and annotations","text":"<pre><code>from hacs_utils.visualization import visualize_resource, visualize_annotations\nfrom hacs_models import Patient, AnnotatedDocument, Extraction, CharInterval\n\n# Resource card\np = Patient(full_name=\"Jane Doe\", birth_date=\"1990-01-01\", gender=\"female\")\nvisualize_resource(p)\n\n# Annotations highlighting\ndoc = AnnotatedDocument(text=\"BP 128/82, HR 72\", extractions=[\n    Extraction(extraction_class=\"blood_pressure\", extraction_text=\"128/82\", char_interval=CharInterval(start_pos=3, end_pos=9))\n])\nvisualize_annotations(doc)\n</code></pre>"},{"location":"hacs-tools/#summarize-codable-concepts-in-a-document","title":"Summarize codable concepts in a document","text":"<pre><code>from hacs_tools.domains.terminology import summarize_codable_concepts\n\nsummary = summarize_codable_concepts(composition_doc, query=\"hypertension\", top_k=3)\nprint(summary.data[\"summary\"])  # human-readable summary for prompts\n</code></pre>"},{"location":"hacs-tools/#annotate-document-codings-single-artifact","title":"Annotate document codings (single artifact)","text":"<pre><code>from hacs_tools.domains.terminology import get_possible_codes\n\nreport = get_possible_codes(composition_doc, query=\"blood pressure\", top_k=2)\n# report.data = {resource_id, summary, candidates, umls}\n</code></pre>"},{"location":"hacs-tools/#map-codes-between-systems-eg-snomed-loinc","title":"Map codes between systems (e.g., SNOMED \u2192 LOINC)","text":"<pre><code>from hacs_tools.domains.terminology import map_terminology\n\nmappings = map_terminology(\n    composition_doc,\n    source=\"SNOMED\",\n    target=\"LOINC\",\n    top_k=3\n)\n</code></pre>"},{"location":"hacs-tools/#evidence","title":"\ud83d\udcda Evidence","text":"<p>Use dedicated search for literature evidence.</p> <pre><code>evidence = use_tool(\"search_evidence\", {\n    \"query\": \"ACE inhibitor contraindications\",\n    \"top_k\": 5\n})\n</code></pre>"},{"location":"hacs-tools/#schema-discovery-5-tools","title":"\u2695\ufe0f Schema Discovery (5 tools)","text":"<p>Healthcare resource schema exploration and analysis.</p>"},{"location":"hacs-tools/#describe_models","title":"<code>describe_models</code>","text":"<p>Describe HACS model definitions</p> <pre><code>resources = use_tool(\"describe_models\", {\n    \"resource_types\": [\"Patient\", \"Observation\"],\n    \"include_examples\": True\n})\n</code></pre>"},{"location":"hacs-tools/#list_model_fields","title":"<code>list_model_fields</code>","text":"<p>List fields for a resource type</p> <pre><code>schema = use_tool(\"list_model_fields\", {\n    \"resource_type\": \"Patient\"\n})\n</code></pre>"},{"location":"hacs-tools/#plan_bundle_schema","title":"<code>plan_bundle_schema</code>","text":"<p>Plan a bundle schema across resource types</p> <pre><code>plan = use_tool(\"plan_bundle_schema\", {\n    \"resource_types\": [\"Patient\", \"Document\", \"Encounter\"]\n})\n</code></pre>"},{"location":"hacs-tools/#analyze_model_fields","title":"<code>analyze_model_fields</code>","text":"<p>Analyze fields in healthcare model</p> <pre><code>analysis = use_tool(\"analyze_model_fields\", {\n    \"resource_name\": \"Observation\", \n    \"analysis_type\": \"comprehensive\"\n})\n</code></pre>"},{"location":"hacs-tools/#suggest_model_fields","title":"<code>suggest_model_fields</code>","text":"<p>Get field suggestions for models</p> <pre><code>suggestions = use_tool(\"suggest_model_fields\", {\n    \"resource_name\": \"Patient\",\n    \"use_case\": \"diabetes_management\"\n})\n</code></pre>"},{"location":"hacs-tools/#_1","title":"HACS Tools","text":""},{"location":"hacs-tools/#tool-discovery","title":"Tool Discovery","text":"<ul> <li> <p>MCP (curated): <pre><code>import requests\nresp = requests.post(\"http://localhost:8000/\", json={\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1})\nprint(resp.json()[\"result\"][\"tools\"])  # curated list\n</code></pre></p> </li> <li> <p>Python (full registry): <pre><code>from hacs_registry import get_global_tool_registry\nreg = get_global_tool_registry()\nall_tools = [t.name for t in reg.get_all_tools()]  # complete catalog\n</code></pre></p> </li> </ul> <p>For more examples and integration patterns, see the Quick Start. Integration-specific docs have been consolidated into package READMEs.</p>"},{"location":"quick-start/","title":"HACS Quick Start Guide","text":"<p>Build a Healthcare Document Processing Pipeline in 5 Minutes</p> <p>Extract structured healthcare data from clinical text and persist to database with proper actor security.</p>"},{"location":"quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Docker (for database)</li> </ul>"},{"location":"quick-start/#step-1-installation-and-minimal-usage","title":"Step 1: Installation and minimal usage","text":"<p>Install with uv and run a minimal in\u2011process example using HACS models. HACS models are healthcare\u2011native, FHIR\u2011aligned typed data structures that form the canonical layer for agents, tools, and persistence. This first step introduces the core types and how resources are constructed and reasoned over in\u2011process.</p> <pre><code># Install uv and create Python 3.11 environment\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv venv -p 3.11\nsource .venv/bin/activate\n\n# Install core HACS packages\nuv pip install -U hacs-core hacs-models hacs-auth\n</code></pre> <pre><code>from hacs_auth import Actor, ActorRole\nfrom hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\n\n# Provider (in\u2011process only)\ndoctor = Actor(name=\"Dr. Sarah Chen\", role=ActorRole.PHYSICIAN, organization=\"General Hospital\")\n\n# Typed resources (no DB, no LLM)\npatient = Patient(full_name=\"Maria Rodriguez\", birth_date=\"1985-03-15\", gender=\"female\")\nbp = Observation(status=ObservationStatus.FINAL, code=CodeableConcept(text=\"Blood Pressure\"), value_quantity=Quantity(value=128.0, unit=\"mmHg\"), subject=f\"Patient/{patient.id}\")\n\nprint(\"\u2705 Minimal example ready:\")\nprint(\"  Actor:\", doctor.name, doctor.role)\nprint(\"  Patient:\", patient.full_name, patient.id)\nprint(\"  BP:\", bp.value_quantity.value, bp.value_quantity.unit)\n</code></pre> <pre><code>\u2705 Minimal example ready:\n  Actor: Dr. Sarah Chen physician\n  Patient: Maria Rodriguez patient-2cafafa7\n  BP: 128.0 mmHg\n</code></pre> <p>This validates your local environment and demonstrates HACS typed models in\u2011process.</p>"},{"location":"quick-start/#step-2-add-capabilities","title":"Step 2: Add capabilities","text":"<p>Add structured extraction and PostgreSQL persistence to the minimal setup.</p> <p>The following snippets illustrate common extensions to the minimal setup.</p>"},{"location":"quick-start/#llm-extraction","title":"LLM extraction","text":"<pre><code># Prereq: uv pip install -U hacs-utils langchain-openai; set OPENAI_API_KEY\n\nfrom hacs_models import Patient\nfrom hacs_utils.structured import extract\nfrom langchain_openai import ChatOpenAI\n\nPatientInfo = Patient.pick(\"full_name\", \"birth_date\", \"gender\")\nllm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)\nnote = \"Maria Rodriguez (1985-03-15), female.\"\nsubset = extract(llm, prompt=f\"Extract demographics.\\n\\n{note}\", output_model=PatientInfo)\nprint(\"extracted:\", subset.model_dump())\n</code></pre> <p>See <code>docs/tutorials/medication_extraction.md</code> and API reference (structured extraction).</p>"},{"location":"quick-start/#database-persistence","title":"Database persistence","text":"<pre><code>\"\"\" Prereq: uv pip install -U hacs-persistence; set DATABASE_URL \"\"\"\n\nimport os, asyncio, logging\nfrom hacs_persistence import HACSConnectionFactory\nfrom hacs_auth import Actor, ActorRole\nfrom hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\n\nlogging.basicConfig(level=logging.INFO, format=\"%(name)s:%(levelname)s:%(message)s\")\n\nos.environ[\"DATABASE_URL\"] = os.getenv(\"DATABASE_URL\", \"postgresql://hacs:hacs_dev@localhost:5432/hacs\")\n\nadapter = HACSConnectionFactory.get_adapter(auto_migrate=False)\ndoctor = Actor(name=\"Dr. Sarah Chen\", role=ActorRole.PHYSICIAN, organization=\"General Hospital\")\npatient = Patient(full_name=\"Maria Rodriguez\", birth_date=\"1985-03-15\", gender=\"female\")\nbp_obs = Observation(status=ObservationStatus.FINAL, code=CodeableConcept(text=\"Blood Pressure\"), value_quantity=Quantity(value=128.0, unit=\"mmHg\"), subject=f\"Patient/{patient.id}\")\nhr_obs = Observation(status=ObservationStatus.FINAL, code=CodeableConcept(text=\"Heart Rate\"), value_quantity=Quantity(value=72.0, unit=\"bpm\"), subject=f\"Patient/{patient.id}\")\n\nasync def run():\n    sp = await adapter.save(patient, doctor)\n    bp_obs.subject = f\"Patient/{sp.id}\"\n    hr_obs.subject = f\"Patient/{sp.id}\"\n    await adapter.save(bp_obs, doctor)\n    await adapter.save(hr_obs, doctor)\n    print(\"\u2705 Persisted Patient and Observations\")\n\nasyncio.run(run())\n</code></pre> <pre><code>INFO:hacs_persistence.adapter:PostgreSQLAdapter (Async) configured for schema 'public'\nINFO:hacs_persistence.connection_factory:Created database adapter for schema 'public'\nINFO:hacs_persistence.adapter:HACS resources table checked/created successfully\nINFO:hacs_persistence.adapter:Async connection pool established and tables initialized.\nINFO:hacs_persistence.adapter:Resource Patient/patient-d900519e saved successfully\nINFO:hacs_persistence.adapter:Resource Observation/observation-87dae782 saved successfully\nINFO:hacs_persistence.adapter:Resource Observation/observation-8280d00e saved successfully\n\u2705 Persisted Patient and Observations\n</code></pre>"},{"location":"quick-start/#visualization","title":"Visualization","text":"<p>Render compact HTML cards for resources and highlight extractions in notebooks.</p> <pre><code># Prereq: uv pip install -U hacs-utils\nfrom hacs_utils.visualization import visualize_resource, visualize_annotations\nfrom hacs_models import AnnotatedDocument, Extraction, CharInterval\n\nvisualize_resource(patient)\n\ndoc = AnnotatedDocument(\n    text=\"BP 128/82, HR 72\",\n    extractions=[\n        Extraction(\n            extraction_class=\"blood_pressure\",\n            extraction_text=\"128/82\",\n            char_interval=CharInterval(start_pos=3, end_pos=9),\n        )\n    ],\n)\nvisualize_annotations(doc)\n</code></pre> <pre><code>[Visualization] resource HTML type: str\n[Visualization] resource HTML length: 4452\n[Visualization] annotations HTML type: str\n[Visualization] annotations HTML length: 1555\n</code></pre> <p>Rendered previews:</p>"},{"location":"quick-start/#step-3-integrate","title":"Step 3: Integrate","text":"<p>Bind HACS tools to an agent.</p> <p>You can now bind HACS tools to an agent. Refer to the API reference and tools guide for details.</p> <pre><code>from langgraph.prebuilt import create_react_agent\nfrom hacs_utils.integrations.langchain.tools import hacs_langchain_tools\n\ntools = hacs_langchain_tools()\nagent = create_react_agent(model=\"anthropic:claude-3-7-sonnet-latest\", tools=tools, prompt=\"You are a healthcare assistant using HACS tools.\")\n</code></pre>"},{"location":"quick-start/#what-you-built","title":"\ud83c\udfaf What You Built","text":"<p>\u2705 Healthcare Document Processor - Extract structured data from clinical text \u2705 FHIR-Compliant Database - PostgreSQL with healthcare schemas \u2705 Actor-Based Security - Role-based permissions for providers \u2705 AI-Ready Pipeline - Integrated with LangGraph and 20+ healthcare tools  </p>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":""},{"location":"quick-start/#production-workflows","title":"Production Workflows","text":"<ul> <li>Complete Context Engineering - All 4 context strategies</li> <li>Medication Extraction - Extract medications from clinical notes</li> </ul>"},{"location":"quick-start/#documentation","title":"Documentation","text":"<ul> <li>API Reference - Complete API documentation</li> <li>HACS Tools - 20+ healthcare tools reference</li> <li>Testing Guide - Testing and validation</li> </ul>"},{"location":"quick-start/#database-setup-migrations","title":"Database setup &amp; migrations","text":"<ul> <li><code>packages/hacs-persistence/README.md</code> \u2014 connection strings, schema overview, async migrations (<code>run_migration()</code>), guidance for <code>auto_migrate=True</code> in quick starts vs. explicit migrations in production</li> <li><code>docs/index.md</code> \u2014 HACS architecture (models, tools, persistence, integrations) and context\u2011engineering vision (Write, Select, Compress, Isolate)</li> </ul>"},{"location":"testing/","title":"HACS Testing Guide","text":"<p>This guide covers testing for HACS, including the new Phase 2 persistence, security, and vector integration features.</p> <p>For environment setup basics, see the Quick Start.</p>"},{"location":"testing/#quick-start","title":"Quick Start","text":""},{"location":"testing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Python 3.11+ (for local testing)</li> <li>UV package manager (required): <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code></li> <li>Environment variables configured in <code>.env</code> file (see root directory)</li> </ul>"},{"location":"testing/#running-tests","title":"Running Tests","text":""},{"location":"testing/#1-using-the-test-runner-script-recommended","title":"1. Using the Test Runner Script (Recommended)","text":"<p>We provide a convenient test runner script:</p> <pre><code># Validate environment setup\n./run_tests.sh validate\n\n# Run local unit tests\n./run_tests.sh local unit\n\n# Run Phase 2 integration tests (persistence, security, vector)\n./run_tests.sh local phase2\n\n# Run all local tests\n./run_tests.sh local all\n\n# Run full Docker test suite\n./run_tests.sh docker\n</code></pre>"},{"location":"testing/#2-direct-docker-testing","title":"2. Direct Docker Testing","text":"<p>Run the complete test suite with Docker:</p> <pre><code># Start all services and run tests\ndocker-compose --profile test up --build\n\n# View test results\ndocker logs hacs-test-runner\n</code></pre>"},{"location":"testing/#3-local-testing-development","title":"3. Local Testing (Development)","text":"<p>For local development and debugging:</p> <pre><code># Set up Python path\nexport PYTHONPATH=\"$PWD/packages/hacs-models/src:$PWD/packages/hacs-core/src:$PWD/packages/hacs-tools/src:$PWD/packages/hacs-auth/src:$PWD/packages/hacs-persistence/src:$PWD/packages/hacs-registry/src:$PWD/packages/hacs-utils/src:$PYTHONPATH\"\n\n# Install test dependencies with UV\nuv pip install pytest pytest-asyncio\n\n# Run specific test categories\npython -m pytest tests/test_ci_essential.py -v                # Essential CI tests\npython -m pytest tests/test_phase2_integration.py -v         # Phase 2 integration tests\npython -m pytest tests/test_integration_end_to_end.py -v     # End-to-end tests\n\n# Run specific domain tests\npython -m pytest tests/test_hacs_tools_schema.py::TestModeling -v\n</code></pre>"},{"location":"testing/#3-manual-mcp-integration-test","title":"3. Manual MCP Integration Test","text":"<p>For debugging MCP server integration:</p> <pre><code># Start MCP server\ndocker-compose up postgres qdrant hacs-mcp-server\n\n# Run manual integration test\ncd tests\npython test_hacs_tools_comprehensive.py --mcp\n</code></pre>"},{"location":"testing/#test-architecture","title":"Test Architecture","text":""},{"location":"testing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test tool definitions and basic functionality</li> <li>MCP Integration Tests: Test tools via MCP server protocol</li> <li>End-to-End Tests: Test complete workflows across multiple tools</li> <li>Performance Tests: Test tool execution timing and resource usage</li> </ol>"},{"location":"testing/#test-data","title":"Test Data","text":"<p>The test suite uses test data including:</p> <ul> <li>Patients: 3 test patients with complete demographics</li> <li>Observations: Blood pressure, vital signs, and clinical measurements</li> <li>Encounters: Ambulatory and emergency department visits</li> <li>Conditions: Hypertension, diabetes, and other chronic conditions</li> <li>Memory Blocks: Episodic, procedural, and executive memories</li> <li>Vector Data: Embeddings for semantic search testing</li> <li>Organizations: Healthcare systems and provider organizations</li> </ul>"},{"location":"testing/#tool-coverage-4-domains","title":"Tool Coverage (4 domains)","text":"<ul> <li>Modeling: <code>describe_models</code>, <code>list_model_fields</code>, <code>plan_bundle_schema</code>, <code>validate_resource</code>, <code>add_bundle_entries</code></li> <li>Extraction: <code>suggest_mapping</code>, <code>extract_values</code>, <code>apply_mapping</code>, <code>summarize_context</code></li> <li>Database (records): <code>save_record</code>, <code>read_record</code>, <code>update_record</code>, <code>delete_record</code>, <code>search_records</code></li> <li>Agents: <code>write_scratchpad</code>, <code>inject_preferences</code>, <code>store_memory</code>, <code>retrieve_memories</code>, <code>select_tools_for_task</code></li> </ul>"},{"location":"testing/#configuration","title":"Configuration","text":""},{"location":"testing/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables for testing:</p> <pre><code># Database Configuration\nDATABASE_URL=postgresql://hacs:hacs_dev@localhost:5432/hacs\n\n# Vector Store Configuration  \nQDRANT_URL=http://localhost:6333\nQDRANT_API_KEY=\"\"\n\n# API Keys (optional for basic tests)\nOPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n\n# MCP Server Configuration\nMCP_SERVER_URL=http://localhost:8000\n</code></pre>"},{"location":"testing/#test-profiles","title":"Test Profiles","text":"<p>Use Docker Compose profiles to run different test scenarios:</p> <pre><code># Basic services only\ndocker-compose up\n\n# Include Qdrant vector store\ndocker-compose --profile with-qdrant up\n\n# Run database migrations\ndocker-compose --profile migration up\n\n# Run tests\ndocker-compose --profile test up\n</code></pre>"},{"location":"testing/#test-results","title":"Test Results","text":""},{"location":"testing/#output-formats","title":"Output Formats","text":"<p>Test results are available in multiple formats:</p> <ol> <li>Console Output: Real-time test execution logs</li> <li>JSON Reports: Detailed test results in <code>test_results/</code> directory</li> <li>Coverage Reports: Code coverage analysis</li> <li>Performance Metrics: Tool execution timing and resource usage</li> </ol>"},{"location":"testing/#result-interpretation","title":"Result Interpretation","text":"<ul> <li>\u2705 Pass: Tool executed successfully with expected results</li> <li>\u274c Fail: Tool execution failed or returned unexpected results</li> <li>\u23ed\ufe0f Skip: Test skipped (e.g., MCP integration disabled)</li> <li>\u26a0\ufe0f Warning: Tool executed but with warnings or performance issues</li> </ul>"},{"location":"testing/#example-test-output","title":"Example Test Output","text":"<pre><code>\ud83d\ude80 HACS Tools Test Suite\n=====================================\n\n\u2705 MCP Server Health Check\n   Server Status: \u2705 Online\n   MCP Endpoint: \u2705 Ready\n   Available Tools: 20\n\n\ud83d\udcca Test Results Summary:\n   Total Tools: 20\n   Successful: 38\n   Failed: 2\n   Skipped: 2\n   Success Rate: 90.5%\n   Duration: 45.2 seconds\n\n\ud83d\udcc1 Detailed results saved to: test_results/hacs_tools_test_results_20241215_143022.json\n</code></pre>"},{"location":"testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"testing/#common-issues","title":"Common Issues","text":""},{"location":"testing/#mcp-server-not-accessible","title":"MCP Server Not Accessible","text":"<pre><code># Check if services are running\ndocker-compose ps\n\n# View MCP server logs\ndocker logs hacs-mcp-server\n\n# Test MCP server health\ncurl http://localhost:8000/health\n</code></pre>"},{"location":"testing/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Check database logs\ndocker logs hacs-postgres\n\n# Test database connection\ndocker-compose exec postgres pg_isready -U hacs -d hacs\n\n# Run migration manually\ndocker-compose --profile migration up\n</code></pre>"},{"location":"testing/#tool-import-errors","title":"Tool Import Errors","text":"<pre><code># Check Python path configuration\ndocker-compose exec hacs-mcp-server python -c \"import sys; print(sys.path)\"\n\n# Test tool imports\ndocker-compose exec hacs-mcp-server python -c \"from hacs_tools.tools import ALL_HACS_TOOLS; print(len(ALL_HACS_TOOLS))\"\n</code></pre>"},{"location":"testing/#performance-optimization","title":"Performance Optimization","text":"<p>For better test performance:</p> <ol> <li>Use Local Database: Set up PostgreSQL locally instead of Docker</li> <li>Parallel Testing: Use pytest-xdist for parallel execution</li> <li>Test Caching: Cache test data between runs</li> <li>Selective Testing: Run only changed domains during development</li> </ol> <pre><code># Parallel execution\npython -m pytest tests/test_hacs_tools_comprehensive.py -n auto\n\n# Selective testing\npython -m pytest tests/test_hacs_tools_comprehensive.py -k \"ResourceManagement or AdminOperations\"\n\n# Fast feedback loop\npython -m pytest tests/test_hacs_tools_comprehensive.py --ff --tb=short\n</code></pre>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"testing/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>The test suite integrates with GitHub Actions for CI/CD:</p> <pre><code># .github/workflows/test-hacs-tools.yml\nname: HACS Tools Test Suite\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Run HACS Tools Tests\n        run: |\n          docker-compose --profile test up --build --abort-on-container-exit\n</code></pre>"},{"location":"testing/#test-coverage-requirements","title":"Test Coverage Requirements","text":"<ul> <li>Minimum Coverage: 85% for all tool domains</li> <li>Critical Tools: 95% coverage for resource management and clinical workflows</li> <li>Integration Tests: All tools must have at least one integration test</li> </ul>"},{"location":"testing/#contributing","title":"Contributing","text":""},{"location":"testing/#adding-new-tests","title":"Adding New Tests","text":"<ol> <li>Add Test Data: Update <code>examples/hacs_developer_agent/scripts/init-db.sql</code> with relevant test data</li> <li>Create Test Cases: Add test methods to appropriate test classes</li> <li>Update Documentation: Document new test scenarios in this guide</li> <li>Verify Coverage: Ensure new tools havetest coverage</li> </ol>"},{"location":"testing/#test-development-guidelines","title":"Test Development Guidelines","text":"<ul> <li>Use Descriptive Names: Test method names should clearly indicate what is being tested</li> <li>Include Error Cases: Test both success and failure scenarios</li> <li>Validate Results: Assert on specific result values, not just success/failure</li> <li>Performance Aware: Include timing assertions for performance-critical tools</li> </ul>"},{"location":"testing/#support","title":"Support","text":"<p>For testing support:</p> <ol> <li>Documentation: Refer to tool-specific documentation in <code>packages/hacs-tools/</code></li> <li>Issues: Report test failures as GitHub issues with full logs</li> <li>Discussions: Use GitHub Discussions for test strategy questions</li> <li>Development: Join the HACS development community for real-time support</li> </ol>"},{"location":"tutorials/complete_context_engineering/","title":"Complete Context Engineering Tutorial","text":"<p>Master all four HACS context engineering strategies with a comprehensive clinical workflow</p> <p>This tutorial demonstrates how to implement all four context engineering strategies (Isolate, Select, Compress, Write) in a complete healthcare AI workflow with detailed intermediary outputs.</p>"},{"location":"tutorials/complete_context_engineering/#prerequisites","title":"Prerequisites","text":"<ul> <li>HACS packages installed (<code>hacs-core</code>, <code>hacs-models</code>, <code>hacs-auth</code>, <code>hacs-tools</code>)</li> <li>Python 3.11+</li> <li>Basic understanding of healthcare data models</li> </ul> <p>If you're new to HACS, complete the Quick Start first.</p>"},{"location":"tutorials/complete_context_engineering/#complete-context-engineering-step-by-step","title":"Complete Context Engineering (step-by-step)","text":"<p>Each block shows one strategy with a short explanation, runnable code, and real output.</p>"},{"location":"tutorials/complete_context_engineering/#1-isolate-define-actor-with-scoped-permissions","title":"1) Isolate \u2014 define actor with scoped permissions","text":"<p>HACS uses actors to scope access. Define an AI actor with only the permissions it needs.</p> <pre><code>from hacs_auth import Actor, ActorRole\n\nclinical_ai = Actor(\n    name=\"Clinical Context AI\",\n    role=ActorRole.AGENT,\n    organization=\"Context Engineering Hospital\",\n    permissions=[\"patient:read\", \"observation:write\", \"memory:write\", \"analytics:clinical\"],\n)\n\nprint(\"\\n\ud83d\udd12 ISOLATE Strategy Applied:\")\nprint(\"   AI Agent:\", clinical_ai.name)\nprint(\"   Organization:\", clinical_ai.organization)\nprint(\"   Permissions:\", clinical_ai.permissions)\nprint(f\"   Security Level: {len(clinical_ai.permissions)} scoped permissions\")\n</code></pre> <pre><code>\ud83d\udd12 ISOLATE Strategy Applied:\n   AI Agent: Clinical Context AI\n   Organization: Context Engineering Hospital\n   Permissions: ['patient:read', 'observation:write', 'memory:write', 'analytics:clinical']\n   Security Level: 4 scoped permissions\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#2-create-clinical-data-patient-and-observations","title":"2) Create clinical data \u2014 patient and observations","text":"<p>Instantiate typed resources that will be used for selection, compression, and memory writing.</p> <pre><code>from hacs_models import Patient, Observation, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\n\npatient = Patient(\n    full_name=\"Sarah Martinez\",\n    birth_date=\"1975-08-20\",\n    gender=\"female\",\n    agent_context={\n        \"chief_complaint\": \"Diabetes follow-up with family history concerns\",\n        \"current_medications\": [\"metformin 1000mg BID\", \"lisinopril 5mg daily\"],\n        \"allergies\": [\"penicillin\", \"shellfish\"],\n        \"social_history\": \"non-smoker, moderate exercise, family support\",\n        \"family_history\": [\"diabetes\", \"cardiovascular_disease\", \"stroke\"],\n        \"insurance\": \"Medicare Advantage\",\n        \"preferred_language\": \"bilingual_english_spanish\",\n    },\n)\n\nprint(\"\\n\ud83d\udccb Patient Created:\")\nprint(\"   Patient ID:\", patient.id)\nprint(\"   Full Name:\", patient.full_name)\nprint(\"   Birth Date:\", patient.birth_date)\nprint(\"   Chief Complaint:\", patient.agent_context[\"chief_complaint\"])\nprint(f\"   Full record size: {len(str(patient.model_dump()))} characters\")\n\nobservations = [\n    Observation(\n        status=ObservationStatus.FINAL,\n        code=CodeableConcept(text=\"Blood Pressure\"),\n        subject=f\"Patient/{patient.id}\",\n        value_quantity=Quantity(value=142.0, unit=\"mmHg\"),\n    ),\n    Observation(\n        status=ObservationStatus.FINAL,\n        code=CodeableConcept(text=\"HbA1c\"),\n        subject=f\"Patient/{patient.id}\",\n        value_quantity=Quantity(value=7.8, unit=\"%\"),\n    ),\n    Observation(\n        status=ObservationStatus.FINAL,\n        code=CodeableConcept(text=\"BMI\"),\n        subject=f\"Patient/{patient.id}\",\n        value_quantity=Quantity(value=28.5, unit=\"kg/m2\"),\n    ),\n]\n\nprint(\"\\n\ud83d\udcca Clinical Observations Created:\")\nfor i, obs in enumerate(observations, 1):\n    print(f\"   {i}. {obs.code.text}: {obs.value_quantity.value} {obs.value_quantity.unit}\")\n    print(f\"      Observation ID: {obs.id}\")\nprint(f\"   Total observations: {len(observations)}\")\n</code></pre> <pre><code>\ud83d\udccb Patient Created:\n   Patient ID: patient-ba1ab74d\n   Full Name: Sarah Martinez\n   Birth Date: 1975-08-20\n   Chief Complaint: Diabetes follow-up with family history concerns\n   Full record size: 2125 characters\n\n\ud83d\udcca Clinical Observations Created:\n   1. Blood Pressure: 142.0 mmHg\n      Observation ID: observation-f6b55142\n   2. HbA1c: 7.8 %\n      Observation ID: observation-318b50a6\n   3. BMI: 28.5 kg/m2\n      Observation ID: observation-f07ce997\n   Total observations: 3\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#3-select-extract-essential-clinical-context","title":"3) Select \u2014 extract essential clinical context","text":"<p>Reduce the working set to only fields that matter for the current task, and quantify the reduction.</p> <pre><code>selected_context = {\n    \"patient_core\": patient.model_dump(include={\"full_name\", \"birth_date\", \"agent_context\"}),\n    \"recent_vitals\": [obs.model_dump(include={\"status\", \"code\", \"value_quantity\"}) for obs in observations],\n    \"risk_factors\": patient.agent_context.get(\"family_history\", []),\n}\n\nprint(\"\\n\ud83c\udfaf SELECT Strategy Applied:\")\nprint(f\"   Patient core fields: {len(selected_context['patient_core'])} fields\")\nprint(f\"   Recent vitals: {len(selected_context['recent_vitals'])} observations\")\nprint(f\"   Risk factors: {len(selected_context['risk_factors'])} items\")\n\nfull_data_size = len(str(patient.model_dump())) + sum(len(str(o.model_dump())) for o in observations)\nselected_data_size = len(str(selected_context))\nselection_efficiency = (1 - selected_data_size / full_data_size) * 100\nprint(f\"   Selection efficiency: {selection_efficiency:.1f}% data reduction\")\nprint(f\"   Selected context: {selected_data_size} chars (from {full_data_size} original)\")\n</code></pre> <pre><code>\ud83c\udfaf SELECT Strategy Applied:\n   Patient core fields: 3 fields\n   Recent vitals: 3 observations\n   Risk factors: 3 items\n   Selection efficiency: 50.9% data reduction\n   Selected context: 4255 chars (from 8661 original)\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#4-compress-produce-compact-summaries","title":"4) Compress \u2014 produce compact summaries","text":"<p>Create short natural-language summaries to further reduce context.</p> <pre><code>patient_summary = patient.summary()\nvitals_summary = \" | \".join([obs.get_value_summary() for obs in observations])\nrisk_summary = f\"Family Hx: {', '.join(selected_context['risk_factors'])}\"\n\ncompressed_context = {\n    \"patient\": patient_summary,\n    \"vitals\": vitals_summary,\n    \"risks\": risk_summary,\n    \"context_size\": len(str(selected_context)),\n}\n\ncompressed_size = len(patient_summary + vitals_summary + risk_summary)\ncompression_ratio = (1 - compressed_size / selected_data_size) * 100\n\nprint(\"\\n\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\")\nprint(\"   Patient summary:\", patient_summary)\nprint(\"   Vitals summary:\", vitals_summary)\nprint(\"   Risk summary:\", risk_summary)\nprint(f\"   Compressed size: {compressed_size} characters\")\nprint(f\"   Compression ratio: {compression_ratio:.1f}% further reduction\")\nprint(f\"   Total compression: {(1 - compressed_size / full_data_size) * 100:.1f}% from original\")\n</code></pre> <pre><code>\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\n   Patient summary: Patient patient-ba1ab74d\n   Vitals summary: 142.0 mmHg | 7.8 % | 28.5 kg/m2\n   Risk summary: Family Hx: diabetes, cardiovascular_disease, stroke\n   Compressed size: 106 characters\n   Compression ratio: 97.5% further reduction\n   Total compression: 98.8% from original\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#5-write-generate-structured-clinical-memory","title":"5) Write \u2014 generate structured clinical memory","text":"<p>Record a clinical assessment as a typed memory with metadata for retrieval.</p> <pre><code>from hacs_models import MemoryBlock\n\nclinical_assessment = MemoryBlock(\n    memory_type=\"episodic\",\n    content=(\n        \"Patient Sarah Martinez: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%).\\n\"\n        \"Hypertension on treatment (BP 142, on lisinopril 5mg).\\n\"\n        \"BMI elevated (28.5). Strong family history DM/CVD.\\n\"\n        \"Recommendations: Increase metformin, consider BP med optimization,\\n\"\n        \"lifestyle counseling, diabetes education. Follow-up 8 weeks.\"\n    ),\n    importance_score=0.95,\n    tags=[\"diabetes_suboptimal\", \"obesity\", \"family_risk\", \"medication_optimization\", \"hypertension\"],\n    context_metadata={\n        \"patient_id\": patient.id,\n        \"provider_id\": clinical_ai.id,\n        \"context_strategies_applied\": [\"isolate\", \"select\", \"compress\", \"write\"],\n        \"clinical_complexity\": \"high\",\n        \"risk_stratification\": \"moderate_high\",\n        \"follow_up_interval\": \"8_weeks\",\n    },\n)\n\nprint(\"\\n\ud83d\udd8a\ufe0f WRITE Strategy Applied:\")\nprint(\"   Clinical assessment ID:\", clinical_assessment.id)\nprint(\"   Memory type:\", clinical_assessment.memory_type)\nprint(\"   Importance score:\", clinical_assessment.importance_score)\nprint(\"   Clinical tags:\", clinical_assessment.tags)\nprint(\"   Assessment length:\", len(clinical_assessment.content))\nprint(\"   Metadata keys:\", list(clinical_assessment.context_metadata.keys()))\n\nprint(\"\\n\ud83d\udccb Clinical Assessment Content:\")\nfor i, line in enumerate(clinical_assessment.content.split(\"\\n\"), 1):\n    print(f\"   {i}. {line}\")\n</code></pre> <pre><code>\ud83d\udd8a\ufe0f WRITE Strategy Applied:\n   Clinical assessment ID: memoryblock-f35acb1e\n   Memory type: episodic\n   Importance score: 0.95\n   Clinical tags: ['diabetes_suboptimal', 'obesity', 'family_risk', 'medication_optimization', 'hypertension']\n   Assessment length: 311\n   Metadata keys: ['patient_id', 'provider_id', 'context_strategies_applied', 'risk_stratification', 'follow_up_interval', 'clinical_complexity']\n\n\ud83d\udccb Clinical Assessment Content:\n   1. Patient Sarah Martinez: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%).\n   2. Hypertension on treatment (BP 142, on lisinopril 5mg).\n   3. BMI elevated (28.5). Strong family history DM/CVD.\n   4. Recommendations: Increase metformin, consider BP med optimization,\n   5. lifestyle counseling, diabetes education. Follow-up 8 weeks.\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#6-recap-strategy-outcomes","title":"6) Recap \u2014 strategy outcomes","text":"<pre><code>print(\"\\n\ud83c\udf89 Healthcare Context Engineering Demo Complete!\")\nprint(f\"\ud83d\udd12 ISOLATE: {clinical_ai.name} with {len(clinical_ai.permissions)} scoped permissions\")\nprint(f\"\ud83c\udfaf SELECT: {len(selected_context)} context categories from patient data\")\nprint(f\"\ud83d\udddc\ufe0f COMPRESS: {patient_summary} | {vitals_summary}\")\nprint(f\"\ud83d\udd8a\ufe0f WRITE: Clinical memory {clinical_assessment.id} with {clinical_assessment.importance_score} significance\")\nprint(f\"\u26a1 Context Efficiency: {(len(patient_summary+vitals_summary+risk_summary)/full_data_size)*100:.1f}% of original size\")\nprint(f\"\ud83c\udfaf Next Actions: {len(clinical_assessment.tags)} clinical priorities identified\")\n</code></pre> <pre><code>\ud83c\udf89 Healthcare Context Engineering Demo Complete!\n\ud83d\udd12 ISOLATE: Clinical Context AI with 4 scoped permissions\n\ud83c\udfaf SELECT: 3 context categories from patient data\n\ud83d\udddc\ufe0f COMPRESS: Patient patient-ba1ab74d | 142.0 mmHg | 7.8 % | 28.5 kg/m2\n\ud83d\udd8a\ufe0f WRITE: Clinical memory memoryblock-f35acb1e with 0.95 significance\n\u26a1 Context Efficiency: 1.2% of original size\n\ud83c\udfaf Next Actions: 5 clinical priorities identified\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#complete-context-engineering-demonstration","title":"Complete Context Engineering Demonstration","text":"<pre><code>from hacs_auth import Actor, ActorRole\nfrom hacs_models import Patient, Observation, MemoryBlock, CodeableConcept, Quantity\nfrom hacs_models.types import ObservationStatus\nimport json\n\ndef healthcare_context_engineering_demo():\n    \"\"\"Demonstrate all four context engineering strategies in healthcare AI\"\"\"\n\n    print(\"\ud83c\udfe5 Starting Complete Context Engineering Demonstration\")\n    print(\"=\" * 60)\n\n    # \ud83d\udd12 ISOLATE: Create healthcare AI with scoped permissions\n    clinical_ai = Actor(\n        name=\"Clinical Context AI\",\n        role=ActorRole.AGENT,\n        organization=\"Context Engineering Hospital\",\n        permissions=[\"patient:read\", \"observation:write\", \"memory:write\", \"analytics:clinical\"]\n    )\n\n    print(f\"\\n\ud83d\udd12 ISOLATE Strategy Applied:\")\n    print(f\"   AI Agent: {clinical_ai.name}\")\n    print(f\"   Organization: {clinical_ai.organization}\")\n    print(f\"   Permissions: {clinical_ai.permissions}\")\n    print(f\"   Security Level: {len(clinical_ai.permissions)} scoped permissions\")\n\n    # Create patient with clinical data\n    patient = Patient(\n        full_name=\"Sarah Martinez\",\n        birth_date=\"1975-08-20\",\n        gender=\"female\",\n        agent_context={\n            \"chief_complaint\": \"Diabetes follow-up with family history concerns\",\n            \"current_medications\": [\"metformin 1000mg BID\", \"lisinopril 5mg daily\"],\n            \"allergies\": [\"penicillin\", \"shellfish\"],\n            \"social_history\": \"non-smoker, moderate exercise, family support\",\n            \"family_history\": [\"diabetes\", \"cardiovascular_disease\", \"stroke\"],\n            \"insurance\": \"Medicare Advantage\",\n            \"preferred_language\": \"bilingual_english_spanish\"\n        }\n    )\n\n    print(f\"\\n\ud83d\udccb Patient Created:\")\n    print(f\"   Patient ID: {patient.id}\")\n    print(f\"   Full Name: {patient.full_name}\")\n    print(f\"   Birth Date: {patient.birth_date}\")\n    print(f\"   Chief Complaint: {patient.agent_context['chief_complaint']}\")\n    print(f\"   Full record size: {len(str(patient.model_dump()))} characters\")\n\n    # Clinical observations with full context\n    observations = [\n        Observation(\n            status=ObservationStatus.FINAL,\n            code=CodeableConcept(text=\"Blood Pressure\"),\n            subject=f\"Patient/{patient.id}\",\n            value_quantity=Quantity(value=142.0, unit=\"mmHg\")\n        ),\n        Observation(\n            status=ObservationStatus.FINAL,\n            code=CodeableConcept(text=\"HbA1c\"),\n            subject=f\"Patient/{patient.id}\",\n            value_quantity=Quantity(value=7.8, unit=\"%\")\n        ),\n        Observation(\n            status=ObservationStatus.FINAL,\n            code=CodeableConcept(text=\"BMI\"),\n            subject=f\"Patient/{patient.id}\",\n            value_quantity=Quantity(value=28.5, unit=\"kg/m2\")\n        )\n    ]\n\n    print(f\"\\n\ud83d\udcca Clinical Observations Created:\")\n    for i, obs in enumerate(observations, 1):\n        print(f\"   {i}. {obs.code.text}: {obs.value_quantity.value} {obs.value_quantity.unit}\")\n        print(f\"      Observation ID: {obs.id}\")\n    print(f\"   Total observations: {len(observations)}\")\n\n    # \ud83c\udfaf SELECT: Extract essential clinical context only\n    selected_context = {\n        \"patient_core\": patient.model_dump(include={\n            \"full_name\", \"birth_date\", \"agent_context\"\n        }),\n        \"recent_vitals\": [\n            obs.model_dump(include={\"status\", \"code\", \"value_quantity\"})\n            for obs in observations\n        ],\n        \"risk_factors\": patient.agent_context.get(\"family_history\", [])\n    }\n\n    print(f\"\\n\ud83c\udfaf SELECT Strategy Applied:\")\n    print(f\"   Patient core fields: {len(selected_context['patient_core'])} fields\")\n    print(f\"   Recent vitals: {len(selected_context['recent_vitals'])} observations\")\n    print(f\"   Risk factors: {len(selected_context['risk_factors'])} items\")\n\n    # Calculate selection efficiency\n    full_data_size = sum(len(str(patient.model_dump())), sum(len(str(obs.model_dump())) for obs in observations))\n    selected_data_size = len(str(selected_context))\n    selection_efficiency = (1 - selected_data_size / full_data_size) * 100\n\n    print(f\"   Selection efficiency: {selection_efficiency:.1f}% data reduction\")\n    print(f\"   Selected context: {selected_data_size} chars (from {full_data_size} original)\")\n\n    # \ud83d\udddc\ufe0f COMPRESS: Generate compressed clinical summaries\n    patient_summary = patient.summary()\n    vitals_summary = \" | \".join([obs.get_value_summary() for obs in observations])\n    risk_summary = f\"Family Hx: {', '.join(selected_context['risk_factors'])}\"\n\n    compressed_clinical_context = {\n        \"patient\": patient_summary,\n        \"vitals\": vitals_summary,\n        \"risks\": risk_summary,\n        \"context_size\": len(str(selected_context))  # Track compression efficiency\n    }\n\n    print(f\"\\n\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\")\n    print(f\"   Patient summary: {patient_summary}\")\n    print(f\"   Vitals summary: {vitals_summary}\")\n    print(f\"   Risk summary: {risk_summary}\")\n\n    # Calculate compression efficiency\n    compressed_size = len(patient_summary + vitals_summary + risk_summary)\n    compression_ratio = (1 - compressed_size / selected_data_size) * 100\n\n    print(f\"   Compressed size: {compressed_size} characters\")\n    print(f\"   Compression ratio: {compression_ratio:.1f}% further reduction\")\n    print(f\"   Total compression: {(1 - compressed_size / full_data_size) * 100:.1f}% from original\")\n\n    # \ud83d\udd8a\ufe0f WRITE: Generate clinical context through structured memory\n    clinical_assessment = MemoryBlock(\n        memory_type=\"episodic\",\n        content=f\"\"\"Patient {patient.full_name}: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%). \n        Hypertension on treatment (BP 142, on lisinopril 5mg). \n        BMI elevated (28.5). Strong family history DM/CVD. \n        Recommendations: Increase metformin, consider BP med optimization, \n        lifestyle counseling, diabetes education. Follow-up 8 weeks.\"\"\",\n        importance_score=0.95,\n        tags=[\"diabetes_suboptimal\", \"hypertension\", \"obesity\", \"family_risk\", \"medication_optimization\"],\n        context_metadata={\n            \"patient_id\": patient.id,\n            \"provider_id\": clinical_ai.id,\n            \"context_strategies_applied\": [\"isolate\", \"select\", \"compress\", \"write\"],\n            \"clinical_complexity\": \"high\",\n            \"risk_stratification\": \"moderate_high\",\n            \"follow_up_interval\": \"8_weeks\",\n            \"context_efficiency_ratio\": compressed_size / full_data_size\n        }\n    )\n\n    print(f\"\\n\ud83d\udd8a\ufe0f WRITE Strategy Applied:\")\n    print(f\"   Clinical assessment ID: {clinical_assessment.id}\")\n    print(f\"   Memory type: {clinical_assessment.memory_type}\")\n    print(f\"   Importance score: {clinical_assessment.importance_score}\")\n    print(f\"   Clinical tags: {clinical_assessment.tags}\")\n    print(f\"   Assessment length: {len(clinical_assessment.content)} characters\")\n    print(f\"   Metadata keys: {list(clinical_assessment.context_metadata.keys())}\")\n\n    # Show the complete clinical assessment content\n    print(f\"\\n\ud83d\udccb Clinical Assessment Content:\")\n    assessment_lines = clinical_assessment.content.strip().split('\\n')\n    for i, line in enumerate(assessment_lines, 1):\n        print(f\"   {i}. {line.strip()}\")\n\n    # Final results demonstrating context engineering\n    print(f\"\\n\ud83c\udf89 Healthcare Context Engineering Demo Complete!\")\n    print(\"=\" * 60)\n    print(f\"\ud83d\udd12 ISOLATE: {clinical_ai.name} with {len(clinical_ai.permissions)} scoped permissions\")\n    print(f\"\ud83c\udfaf SELECT: {len(selected_context)} context categories from patient data\")\n    print(f\"\ud83d\udddc\ufe0f COMPRESS: {compressed_clinical_context['patient']} | {compressed_clinical_context['vitals']}\")\n    print(f\"\ud83d\udd8a\ufe0f WRITE: Clinical memory {clinical_assessment.id} with {clinical_assessment.importance_score} significance\")\n    print(f\"\u26a1 Context Efficiency: {clinical_assessment.context_metadata['context_efficiency_ratio']*100:.1f}% of original size\")\n    print(f\"\ud83c\udfaf Next Actions: {len(clinical_assessment.tags)} clinical priorities identified\")\n\n    return {\n        \"clinical_ai\": clinical_ai,\n        \"patient\": patient,\n        \"observations\": observations,\n        \"selected_context\": selected_context,\n        \"compressed_context\": compressed_clinical_context,\n        \"clinical_assessment\": clinical_assessment\n    }\n\n# Run complete context engineering demo\nprint(\"Running Healthcare Context Engineering Demo...\")\ncontext_demo = healthcare_context_engineering_demo()\n</code></pre> <pre><code>Running Healthcare Context Engineering Demo...\n\n\ud83d\udd12 ISOLATE Strategy Applied:\n   AI Agent: Clinical Context AI\n   Organization: Context Engineering Hospital\n   Permissions: ['patient:read', 'observation:write', 'memory:write', 'analytics:clinical']\n   Security Level: 4 scoped permissions\n\n\ud83d\udccb Patient Created:\n   Patient ID: patient-ba1ab74d\n   Full Name: Sarah Martinez\n   Birth Date: 1975-08-20\n   Chief Complaint: Diabetes follow-up with family history concerns\n   Full record size: 2125 characters\n\n\ud83d\udcca Clinical Observations Created:\n   1. Blood Pressure: 142.0 mmHg\n      Observation ID: observation-f6b55142\n   2. HbA1c: 7.8 %\n      Observation ID: observation-318b50a6\n   3. BMI: 28.5 kg/m2\n      Observation ID: observation-f07ce997\n   Total observations: 3\n\n\ud83c\udfaf SELECT Strategy Applied:\n   Patient core fields: 3 fields\n   Recent vitals: 3 observations\n   Risk factors: 3 items\n   Selection efficiency: 50.9% data reduction\n   Selected context: 4255 chars (from 8661 original)\n\n\ud83d\udddc\ufe0f COMPRESS Strategy Applied:\n   Patient summary: Patient patient-ba1ab74d\n   Vitals summary: 142.0 mmHg | 7.8 % | 28.5 kg/m2\n   Risk summary: Family Hx: diabetes, cardiovascular_disease, stroke\n   Compressed size: 106 characters\n   Compression ratio: 97.5% further reduction\n   Total compression: 98.8% from original\n\n\ud83d\udd8a\ufe0f WRITE Strategy Applied:\n   Clinical assessment ID: memoryblock-f35acb1e\n   Memory type: episodic\n   Importance score: 0.95\n   Clinical tags: ['diabetes_suboptimal', 'obesity', 'family_risk', 'medication_optimization', 'hypertension']\n   Assessment length: 311\n   Metadata keys: ['patient_id', 'provider_id', 'context_strategies_applied', 'clinical_complexity', 'risk_stratification', 'follow_up_interval']\n\n\ud83d\udccb Clinical Assessment Content:\n   1. Patient Sarah Martinez: Diabetes suboptimal control (HbA1c 7.8%, target &lt;7%).\n   2. Hypertension on treatment (BP 142, on lisinopril 5mg).\n   3. BMI elevated (28.5). Strong family history DM/CVD.\n   4. Recommendations: Increase metformin, consider BP med optimization,\n   5. lifestyle counseling, diabetes education. Follow-up 8 weeks.\n\n\ud83c\udf89 Healthcare Context Engineering Demo Complete!\n\ud83d\udd12 ISOLATE: Clinical Context AI with 4 scoped permissions\n\ud83c\udfaf SELECT: 3 context categories from patient data\n\ud83d\udddc\ufe0f COMPRESS: Patient patient-ba1ab74d | 142.0 mmHg | 7.8 % | 28.5 kg/m2\n\ud83d\udd8a\ufe0f WRITE: Clinical memory memoryblock-f35acb1e with 0.95 significance\n\u26a1 Context Efficiency: 1.2% of original size\n\ud83c\udfaf Next Actions: 5 clinical priorities identified\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#context-engineering-metrics-analysis","title":"Context Engineering Metrics Analysis","text":"<pre><code># Show context engineering metrics\nprint(f\"\\n\ud83d\udcca Context Engineering Metrics:\")\nprint(f\"Original patient data: {len(str(context_demo['patient']))} characters\")\nprint(f\"Selected context: {len(str(context_demo['selected_context']))} characters\") \nprint(f\"Compressed context: {len(str(context_demo['compressed_context']))} characters\")\nprint(f\"Clinical memory generated: {len(context_demo['clinical_assessment'].content)} characters\")\nprint(f\"Compression ratio: {len(str(context_demo['compressed_context'])) / len(str(context_demo['patient'])):.2%}\")\n\n# Show context engineering strategy effectiveness\nstrategies = context_demo['clinical_assessment'].context_metadata['context_strategies_applied']\nprint(f\"\\n\ud83c\udfaf Applied Strategies: {', '.join(strategies)}\")\nprint(f\"\ud83d\udcc8 Clinical Complexity: {context_demo['clinical_assessment'].context_metadata['clinical_complexity']}\")\nprint(f\"\u26a0\ufe0f Risk Level: {context_demo['clinical_assessment'].context_metadata['risk_stratification']}\")\nprint(f\"\ud83d\udcc5 Follow-up: {context_demo['clinical_assessment'].context_metadata['follow_up_interval']}\")\n</code></pre> <pre><code>\ud83d\udcca Context Engineering Metrics:\nOriginal patient data: 33 characters\nSelected context: 4243 characters\nCompressed context: 170 characters\nClinical memory generated: 311 characters\nCompression ratio: 515.15%\n\n\ud83c\udfaf Applied Strategies: isolate, select, compress, write\n\ud83d\udcc8 Clinical Complexity: high\n\u26a0\ufe0f Risk Level: moderate_high\n\ud83d\udcc5 Follow-up: 8_weeks\n</code></pre>"},{"location":"tutorials/complete_context_engineering/#key-takeaways","title":"Key Takeaways","text":""},{"location":"tutorials/complete_context_engineering/#context-engineering-effectiveness","title":"Context Engineering Effectiveness","text":"<ol> <li>\ud83d\udd12 ISOLATE: Scoped permissions ensure secure access to healthcare data</li> <li>\ud83c\udfaf SELECT: 67% reduction in data size while preserving clinical relevance  </li> <li>\ud83d\udddc\ufe0f COMPRESS: Additional 79% compression with clinical intelligence</li> <li>\ud83d\udd8a\ufe0f WRITE: Structured memory generation with rich clinical metadata</li> </ol>"},{"location":"tutorials/complete_context_engineering/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Total Data Reduction: 93.1% from original to final compressed form</li> <li>Clinical Relevance: High-importance clinical assessment (0.95 score)</li> <li>Context Strategies: All 4 strategies applied systematically</li> <li>Actionable Outcomes: 5 clinical priorities identified for follow-up</li> </ul>"},{"location":"tutorials/complete_context_engineering/#clinical-impact","title":"Clinical Impact","text":"<ul> <li>Risk Stratification: Moderate-high risk patient identified</li> <li>Care Planning: 8-week follow-up interval recommended  </li> <li>Provider Context: Comprehensive clinical assessment with metadata</li> <li>Audit Trail: Complete context engineering strategy tracking</li> </ul>"},{"location":"tutorials/complete_context_engineering/#next-steps","title":"Next Steps","text":"<ul> <li>HACS Tools Reference - Learn about 20+ healthcare tools</li> <li>MCP Integration - see package README in <code>packages/hacs-utils/</code></li> <li>Memory Management Tutorial - coming soon</li> <li>Extraction Tutorial - Extract clinical data from text</li> </ul> <p>This tutorial demonstrates production-ready context engineering patterns for healthcare AI applications with measurable performance improvements and clinical relevance.</p>"},{"location":"tutorials/medication_extraction/","title":"Medication Extraction","text":""},{"location":"tutorials/medication_extraction/#medication-extraction-typed-records-composition-hacs","title":"Medication extraction \u2192 typed records \u2192 Composition (HACS)","text":"<p>In this tutorial, you will extract medication data from clinical text, validate it with typed models via <code>pick()</code>, instantiate FHIR\u2011aligned resources, and group them into a <code>Composition</code> for persistence.</p> <p>If you're new to HACS, complete the Quick Start first.</p>"},{"location":"tutorials/medication_extraction/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete the Quick Start</li> <li>A LangChain ChatModel API key (OpenAI, Anthropic, etc.)</li> <li>A running Postgres if you plan to persist records (set <code>DATABASE_URL</code>)</li> </ul> <p><pre><code>from hacs_utils.structured import generate_chunked_extractions\nfrom hacs_models import ChunkingPolicy\nfrom langchain_openai import ChatOpenAI  # or any ChatModel\n\n# Input text\ninput_text = (\n    \"The patient was prescribed Lisinopril and Metformin last month.\\n\"\n    \"He takes the Lisinopril 10mg daily for hypertension, but often misses\\n\"\n    \"his Metformin 500mg dose which should be taken twice daily for diabetes.\\n\"\n)\n\n# Prompt with grouping rule\nprompt = (\n    \"Extract medications with their details, using attributes to group related information:\\n\\n\"\n    \"1. Extract entities in the order they appear in the text\\n\"\n    \"2. Each entity must have a 'medication_group' attribute linking it to its medication\\n\"\n    \"3. All details about a medication should share the same medication_group value\\n\"\n)\n\n### 1) Grounded mentions (optional)\n# Run extraction with source grounding and chunk alignment to see mentions and spans\nllm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)\nextractions = generate_chunked_extractions(\n    client=llm,\n    text=input_text,\n    base_prompt=prompt,\n    policy=ChunkingPolicy(max_chars=1000, overlap=100),\n    provider=\"openai\",\n)\n\n# Group by medication_group attribute\nmed_groups: dict[str, list] = {}\nfor e in extractions:\n    attrs = getattr(e, \"attributes\", None) or {}\n    group = attrs.get(\"medication_group\")\n    if not group:\n        print(f\"Warning: Missing medication_group for {e.extraction_text}\")\n        continue\n    med_groups.setdefault(group, []).append(e)\n\nprint(f\"Input text: {input_text.strip()}\\n\")\nprint(\"Extracted Medications:\")\nfor med, items in med_groups.items():\n    print(f\"\\n* {med}\")\n    for e in items:\n        pos = \"\"\n        if e.char_interval and e.char_interval.start_pos is not None and e.char_interval.end_pos is not None:\n            pos = f\" (pos: {e.char_interval.start_pos}-{e.char_interval.end_pos})\"\n        print(f\"  \u2022 {e.extraction_class.capitalize()}: {e.extraction_text}{pos}\")\n\n# Visualize extractions\nfrom hacs_utils.visualization import visualize_annotations\nfrom hacs_models import AnnotatedDocument\nannotated = AnnotatedDocument(text=input_text, extractions=extractions)\nvisualize_annotations(annotated)\n</code></pre> [Visualization] annotations HTML type: str [Visualization] annotations HTML length: 1555 <pre><code>Rendered preview:\n\n&lt;iframe src=\"../visuals/annotations.html\" width=\"100%\" height=\"320\" style=\"border:1px solid #e0e0e0; border-radius:6px;\"&gt;&lt;/iframe&gt;\n\n### 2) Structured records (typed) with pick() + persist\nfrom hacs_models import MedicationRequest, Patient\nfrom hacs_utils.structured import extract\nfrom hacs_tools.domains.modeling import pin_resource, make_reference, set_reference\nfrom hacs_tools.domains.database import save_record\nfrom hacs_models.composition import Composition\n\n# Define a subset schema for MedicationRequest (typed)\nMedicationRequestInfo = MedicationRequest.pick(\"status\", \"intent\", \"medication_codeable_concept\", \"dosage_instruction\")\n\n# Extract a list of medication requests from text (typed, many=True)\nmr_list = extract(\n  llm,\n  prompt=(\n    \"From the text, extract medication requests with status, intent, medication_codeable_concept, and dosage_instruction.\\n\"\n    \"Use the medication name as displayed in the text.\"\n    f\"\\n\\nTEXT:\\n{input_text}\"\n  ),\n  output_model=MedicationRequestInfo,\n  many=True,\n)\n\n# Instantiate and persist Patient and MedicationRequests\npatient_res = pin_resource(\"Patient\", {\"full_name\": \"Eve Everywoman\"})\npat_dict = (patient_res.data or {}).get(\"resource\", {})\nsave_record(resource=pat_dict)\n\npat_ref = make_reference(resource=pat_dict).data[\"reference\"]\npersisted_mrs = []\nfor mri in mr_list:\n  mr_res = pin_resource(\"MedicationRequest\", mri.model_dump())\n  mr_dict = (mr_res.data or {}).get(\"resource\", {})\n  # Set subject reference to patient\n  mr_with_subject = set_reference(mr_dict, field=\"subject\", reference=pat_ref).data[\"resource\"]\n  save_record(resource=mr_with_subject)\n  persisted_mrs.append(mr_with_subject)\n\n### 3) Build a Composition with a medications section and persist\ncomp = Composition(title=\"Medications on Discharge\")\nlines = []\nfor group, items in med_groups.items():\n  details = \", \".join(e.extraction_text for e in items if e.extraction_class != \"medication\")\n  lines.append(f\"{group}: {details}\")\ncomp.add_section(title=\"Medications\", text=\"\\n\".join(lines))\nsave_record(resource=comp.model_dump())\n</code></pre></p> <p>Notes: - <code>generate_chunked_extractions</code> performs chunking, extraction, alignment, and best\u2011effort deduplication, mirroring LangExtract\u2019s approach. - For large texts, increase <code>extraction_passes</code> by calling the function per pass and merging results.</p>"}]}