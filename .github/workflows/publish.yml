name: Publish Python packages

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      - name: Set up Python
        run: uv python install 3.12
      - name: Build all packages
        run: |
          set -e
          rm -rf dist
          mkdir -p dist
          for PKG in packages/hacs-*; do
            echo "Building $PKG"
            (cd "$PKG" && uv build --sdist --wheel)
            # Move artifacts to repo-level dist
            mv "$PKG"/dist/* dist/
          done
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          skip-existing: true
        env:
          PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-pypi:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to publish (or "all" for all packages)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - hacs-core
          - hacs-tools
          - hacs-utils
          - hacs-persistence
          - hacs-registry
          - hacs-cli
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write  # Required for trusted publishing

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run tests
        run: |
          uv run pytest packages/ -v --tb=short

      - name: Validate package metadata
        run: |
          uv pip install validate-pyproject
          for package in packages/*/; do
            echo "Validating $(basename $package)..."
            cd "$package"
            uv run validate-pyproject pyproject.toml
            cd - > /dev/null
          done

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install build dependencies
        run: |
          uv pip install build twine

      - name: Determine packages to build
        id: packages
        run: |
          if [[ "${{ github.event.inputs.package }}" == "all" || "${{ github.event_name }}" == "release" ]]; then
            packages=$(find packages/ -name "pyproject.toml" -exec dirname {} \; | sort)
          else
            packages="packages/${{ github.event.inputs.package }}"
          fi
          echo "packages<<EOF" >> $GITHUB_OUTPUT
          echo "$packages" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build packages
        run: |
          while IFS= read -r package; do
            if [ -d "$package" ]; then
              echo "Building $(basename $package)..."
              cd "$package"
              uv run python -m build
              cd - > /dev/null
            fi
          done <<< "${{ steps.packages.outputs.packages }}"

      - name: Check distributions
        run: |
          while IFS= read -r package; do
            if [ -d "$package" ]; then
              echo "Checking $(basename $package)..."
              cd "$package"
              uv run twine check dist/*
              cd - > /dev/null
            fi
          done <<< "${{ steps.packages.outputs.packages }}"

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: distributions
          path: packages/*/dist/

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build-packages
    environment:
      name: ${{ github.event.inputs.test_pypi && 'test-pypi' || 'pypi' }}
      url: ${{ github.event.inputs.test_pypi && 'https://test.pypi.org/p/hacs-core' || 'https://pypi.org/p/hacs-core' }}

    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: distributions
          path: dist/

      - name: Determine packages to publish
        id: packages
        run: |
          if [[ "${{ github.event.inputs.package }}" == "all" || "${{ github.event_name }}" == "release" ]]; then
            packages=$(find dist/ -name "*.whl" -o -name "*.tar.gz" | head -20)
          else
            packages=$(find dist/ -path "*/${{ github.event.inputs.package }}/*" \( -name "*.whl" -o -name "*.tar.gz" \))
          fi
          echo "packages<<EOF" >> $GITHUB_OUTPUT
          echo "$packages" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish to Test PyPI
        if: github.event.inputs.test_pypi == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          skip-existing: true

      - name: Publish to PyPI
        if: github.event.inputs.test_pypi != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi != 'true'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract version from package
        id: version
        run: |
          if [[ "${{ github.event.inputs.package }}" != "all" ]]; then
            cd "packages/${{ github.event.inputs.package }}"
            version=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "package=${{ github.event.inputs.package }}" >> $GITHUB_OUTPUT
          else
            # For "all", use hacs-core version
            cd "packages/hacs-core"
            version=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "package=all" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # HACS Release ${{ steps.version.outputs.version }}

          ## What's Changed

          ### Package Updates

          EOF

          if [[ "${{ steps.version.outputs.package }}" == "all" ]]; then
            echo "- 📦 **All Packages Updated** - Complete HACS ecosystem release" >> release_notes.md
          else
            echo "- 📦 **${{ steps.version.outputs.package }}** - Updated to version ${{ steps.version.outputs.version }}" >> release_notes.md
          fi

          cat >> release_notes.md << EOF

          ### Installation

          \`\`\`bash
          # Install core package
          pip install hacs-core==${{ steps.version.outputs.version }}

          # Install with all integrations
          pip install hacs-core==${{ steps.version.outputs.version }} hacs-tools hacs-utils[all]
          \`\`\`

          ### Documentation

          - 📚 [Getting Started Guide](https://github.com/solana-hacs/hacs/blob/main/docs/getting-started/)
          - 📖 [API Reference](https://github.com/solana-hacs/hacs/blob/main/docs/reference/)
          - 🏥 [Clinical Examples](https://github.com/solana-hacs/hacs/blob/main/docs/examples/)

          ### Security Notes

          This release has been security scanned and tested. See our [Security Policy](https://github.com/solana-hacs/hacs/blob/main/SECURITY.md) for details.

          ---

          **Full Changelog**: https://github.com/solana-hacs/hacs/compare/v${{ steps.version.outputs.version }}...HEAD
          EOF

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: HACS v${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: always() && needs.publish-pypi.result == 'success'

    steps:
      - name: Send success notification
        run: |
          echo "🎉 Successfully published HACS packages to PyPI!"

      # Add additional notification steps here (Slack, Discord, etc.)
      # - name: Notify Slack
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     text: "HACS packages published successfully!"
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    if: always() && needs.publish-pypi.result == 'failure'

    steps:
      - name: Log failure
        run: |
          echo "❌ Publishing failed. Manual intervention may be required."
          echo "Check the publish-pypi job logs for details."

      - name: Create issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Publishing failed for ${{ github.event.inputs.package || 'release' }}`,
              body: `
              ## Publishing Failure Report

              **Failed Job**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              **Package**: ${{ github.event.inputs.package || 'all packages' }}

              **Trigger**: ${{ github.event_name }}

              **Time**: ${{ github.event.head_commit.timestamp }}

              ## Next Steps

              1. Check the failed job logs
              2. Verify package metadata and dependencies
              3. Test publishing to Test PyPI first
              4. Re-run the workflow after fixing issues

              ## Manual Publishing

              If needed, packages can be published manually:

              \`\`\`bash
              cd packages/package-name
              python -m build
              twine upload dist/*
              \`\`\`
              `,
              labels: ['bug', 'publishing', 'ci']
            })