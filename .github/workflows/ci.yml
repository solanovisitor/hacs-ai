name: HACS CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-type:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
      - name: Install workspace
        run: uv sync
      - name: Ruff check
        run: uv run ruff check .
      - name: Ruff format check
        run: uv run ruff format --check .
      - name: Type check (optional)
        run: uv run mypy || true

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      - name: Install dependencies
        run: uv sync --all-extras
      - name: Set up test environment
        run: |
          echo "DATABASE_URL=sqlite:///test_ci.db" >> $GITHUB_ENV
          echo "HACS_ENVIRONMENT=testing" >> $GITHUB_ENV
      - name: Run core tests
        run: |
          uv run pytest tests/test_ci_essential.py tests/test_facades.py tests/test_registry_extractables.py -v --tb=short
      - name: Run package tests
        run: |
          uv run pytest packages/hacs-core/tests/test_document.py packages/hacs-core/tests/test_resource_bundle.py packages/hacs-core/tests/test_workflow.py -v --tb=short || echo "Some core tests failed (non-blocking)"
          uv run pytest packages/hacs-models/tests/test_models_validation.py -v --tb=short || echo "Some models tests failed (non-blocking)"
          uv run pytest packages/hacs-utils/tests/test_extraction_performance.py -v --tb=short -k "not asyncio" || echo "Some utils tests failed (non-blocking)"

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
      - run: uv sync
      - name: Build docs
        run: uv run mkdocs build

  package-imports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
      - run: uv sync
      - name: Test package imports
        run: |
          uv run python -c "
          import sys
          
          # Test core imports
          try:
              from hacs_models import BaseResource, Observation, Patient
              from hacs_utils.structured import extract, structure
              from hacs_registry.resource_registry import HACSResourceRegistry
              print('‚úÖ Core HACS imports successful')
          except Exception as e:
              print(f'‚ùå Core import failed: {e}')
              sys.exit(1)
          
          # Test optional imports (non-blocking)
          optional_packages = [
              ('hacs_tools', 'HACS Tools'),
              ('hacs_persistence', 'HACS Persistence'),
              ('hacs_auth', 'HACS Auth')
          ]
          
          for package, name in optional_packages:
              try:
                  exec(f'import {package}')
                  print(f'‚úÖ {name} imports successful')
              except Exception as e:
                  print(f'‚ö†Ô∏è {name} import issue: {e} (non-blocking)')
          
          print('üéâ All critical imports successful!')
          "